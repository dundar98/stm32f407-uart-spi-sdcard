
ituart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009190  08009190  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009198  08009198  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800919c  0800919c  0001919c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000934  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009a8  200009a8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000103a1  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a44  00000000  00000000  00030488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e00  00000000  00000000  00032ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000abe  00000000  00000000  00033cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002317a  00000000  00000000  0003478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014ba8  00000000  00000000  00057908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc1be  00000000  00000000  0006c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e00  00000000  00000000  00138670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a6c 	.word	0x08008a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008a6c 	.word	0x08008a6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <SELECT+0x1c>)
 80005a8:	f001 ffd2 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f001 fc53 	bl	8001e58 <HAL_Delay>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020400 	.word	0x40020400

080005bc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <DESELECT+0x1c>)
 80005c8:	f001 ffc2 	bl	8002550 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f001 fc43 	bl	8001e58 <HAL_Delay>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020400 	.word	0x40020400

080005dc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005e6:	bf00      	nop
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SPI_TxByte+0x30>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d1f8      	bne.n	80005e8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	2201      	movs	r2, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <SPI_TxByte+0x30>)
 80005fe:	f003 f8c2 	bl	8003786 <HAL_SPI_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000f8 	.word	0x200000f8

08000610 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800061c:	bf00      	nop
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <SPI_TxBuffer+0x30>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	2b02      	cmp	r3, #2
 800062a:	d1f8      	bne.n	800061e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <SPI_TxBuffer+0x30>)
 8000634:	f003 f8a7 	bl	8003786 <HAL_SPI_Transmit>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000f8 	.word	0x200000f8

08000644 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800064e:	bf00      	nop
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <SPI_RxByte+0x34>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	2b02      	cmp	r3, #2
 800065c:	d1f8      	bne.n	8000650 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800065e:	1dba      	adds	r2, r7, #6
 8000660:	1df9      	adds	r1, r7, #7
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <SPI_RxByte+0x34>)
 800066a:	f003 f9c8 	bl	80039fe <HAL_SPI_TransmitReceive>

  return data;
 800066e:	79bb      	ldrb	r3, [r7, #6]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000f8 	.word	0x200000f8

0800067c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000684:	f7ff ffde 	bl	8000644 <SPI_RxByte>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	701a      	strb	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <SD_ReadyWait+0x30>)
 80006a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a4:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80006a6:	f7ff ffcd 	bl	8000644 <SPI_RxByte>
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2bff      	cmp	r3, #255	; 0xff
 80006b2:	d003      	beq.n	80006bc <SD_ReadyWait+0x24>
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <SD_ReadyWait+0x30>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f4      	bne.n	80006a6 <SD_ReadyWait+0xe>

  return res;
 80006bc:	79fb      	ldrb	r3, [r7, #7]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000092 	.word	0x20000092

080006cc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80006d2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006d6:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80006d8:	f7ff ff70 	bl	80005bc <DESELECT>
  for(int i = 0; i < 10; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	e005      	b.n	80006ee <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	f7ff ff7a 	bl	80005dc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	2b09      	cmp	r3, #9
 80006f2:	ddf6      	ble.n	80006e2 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80006f4:	f7ff ff52 	bl	800059c <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80006f8:	2340      	movs	r3, #64	; 0x40
 80006fa:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 800070c:	2395      	movs	r3, #149	; 0x95
 800070e:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000710:	463b      	mov	r3, r7
 8000712:	2106      	movs	r1, #6
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff7b 	bl	8000610 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800071a:	e002      	b.n	8000722 <SD_PowerOn+0x56>
  {
    cnt--;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3b01      	subs	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000722:	f7ff ff8f 	bl	8000644 <SPI_RxByte>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d002      	beq.n	8000732 <SD_PowerOn+0x66>
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <SD_PowerOn+0x50>
  }

  DESELECT();
 8000732:	f7ff ff43 	bl	80005bc <DESELECT>
  SPI_TxByte(0XFF);
 8000736:	20ff      	movs	r0, #255	; 0xff
 8000738:	f7ff ff50 	bl	80005dc <SPI_TxByte>

  PowerFlag = 1;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <SD_PowerOn+0x80>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000095 	.word	0x20000095

08000750 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <SD_PowerOff+0x14>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000095 	.word	0x20000095

08000768 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <SD_CheckPower+0x14>)
 800076e:	781b      	ldrb	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000095 	.word	0x20000095

08000780 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <SD_RxDataBlock+0x58>)
 800078c:	22c8      	movs	r2, #200	; 0xc8
 800078e:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000790:	f7ff ff58 	bl	8000644 <SPI_RxByte>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2bff      	cmp	r3, #255	; 0xff
 800079c:	d103      	bne.n	80007a6 <SD_RxDataBlock+0x26>
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <SD_RxDataBlock+0x58>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f4      	bne.n	8000790 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2bfe      	cmp	r3, #254	; 0xfe
 80007aa:	d001      	beq.n	80007b0 <SD_RxDataBlock+0x30>
 80007ac:	2300      	movs	r3, #0
 80007ae:	e00f      	b.n	80007d0 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff60 	bl	800067c <SPI_RxBytePtr>
  } while(len--);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f4      	bne.n	80007b0 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80007c6:	f7ff ff3d 	bl	8000644 <SPI_RxByte>
  SPI_RxByte();
 80007ca:	f7ff ff3b 	bl	8000644 <SPI_RxByte>

  return TRUE;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000090 	.word	0x20000090

080007dc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80007ec:	f7ff ff54 	bl	8000698 <SD_ReadyWait>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d001      	beq.n	80007fa <SD_TxDataBlock+0x1e>
 80007f6:	2300      	movs	r3, #0
 80007f8:	e02f      	b.n	800085a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff feed 	bl	80005dc <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	2bfd      	cmp	r3, #253	; 0xfd
 8000806:	d020      	beq.n	800084a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff feff 	bl	8000610 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000812:	f7ff ff17 	bl	8000644 <SPI_RxByte>
    SPI_RxByte();
 8000816:	f7ff ff15 	bl	8000644 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800081a:	e00b      	b.n	8000834 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800081c:	f7ff ff12 	bl	8000644 <SPI_RxByte>
 8000820:	4603      	mov	r3, r0
 8000822:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f003 031f 	and.w	r3, r3, #31
 800082a:	2b05      	cmp	r3, #5
 800082c:	d006      	beq.n	800083c <SD_TxDataBlock+0x60>
      i++;
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	3301      	adds	r3, #1
 8000832:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b40      	cmp	r3, #64	; 0x40
 8000838:	d9f0      	bls.n	800081c <SD_TxDataBlock+0x40>
 800083a:	e000      	b.n	800083e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800083c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800083e:	bf00      	nop
 8000840:	f7ff ff00 	bl	8000644 <SPI_RxByte>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0fa      	beq.n	8000840 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f003 031f 	and.w	r3, r3, #31
 8000850:	2b05      	cmp	r3, #5
 8000852:	d101      	bne.n	8000858 <SD_TxDataBlock+0x7c>
 8000854:	2301      	movs	r3, #1
 8000856:	e000      	b.n	800085a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b084      	sub	sp, #16
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	6039      	str	r1, [r7, #0]
 800086c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800086e:	f7ff ff13 	bl	8000698 <SD_ReadyWait>
 8000872:	4603      	mov	r3, r0
 8000874:	2bff      	cmp	r3, #255	; 0xff
 8000876:	d001      	beq.n	800087c <SD_SendCmd+0x1a>
 8000878:	23ff      	movs	r3, #255	; 0xff
 800087a:	e042      	b.n	8000902 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff feac 	bl	80005dc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	0e1b      	lsrs	r3, r3, #24
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fea6 	bl	80005dc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	0c1b      	lsrs	r3, r3, #16
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fea0 	bl	80005dc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe9a 	bl	80005dc <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe95 	bl	80005dc <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b40      	cmp	r3, #64	; 0x40
 80008b6:	d102      	bne.n	80008be <SD_SendCmd+0x5c>
 80008b8:	2395      	movs	r3, #149	; 0x95
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e007      	b.n	80008ce <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b48      	cmp	r3, #72	; 0x48
 80008c2:	d102      	bne.n	80008ca <SD_SendCmd+0x68>
 80008c4:	2387      	movs	r3, #135	; 0x87
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	e001      	b.n	80008ce <SD_SendCmd+0x6c>
  else crc = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe83 	bl	80005dc <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b4c      	cmp	r3, #76	; 0x4c
 80008da:	d101      	bne.n	80008e0 <SD_SendCmd+0x7e>
 80008dc:	f7ff feb2 	bl	8000644 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80008e0:	230a      	movs	r3, #10
 80008e2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80008e4:	f7ff feae 	bl	8000644 <SPI_RxByte>
 80008e8:	4603      	mov	r3, r0
 80008ea:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	da05      	bge.n	8000900 <SD_SendCmd+0x9e>
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	73bb      	strb	r3, [r7, #14]
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f1      	bne.n	80008e4 <SD_SendCmd+0x82>

  return res;
 8000900:	7b7b      	ldrb	r3, [r7, #13]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SD_disk_initialize+0x14>
 800091c:	2301      	movs	r3, #1
 800091e:	e0d1      	b.n	8000ac4 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000920:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <SD_disk_initialize+0x1c0>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <SD_disk_initialize+0x2a>
 800092e:	4b67      	ldr	r3, [pc, #412]	; (8000acc <SD_disk_initialize+0x1c0>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	e0c6      	b.n	8000ac4 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000936:	f7ff fec9 	bl	80006cc <SD_PowerOn>

  /* slave select */
  SELECT();
 800093a:	f7ff fe2f 	bl	800059c <SELECT>

  /* check disk type */
  type = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000942:	2100      	movs	r1, #0
 8000944:	2040      	movs	r0, #64	; 0x40
 8000946:	f7ff ff8c 	bl	8000862 <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	f040 80a1 	bne.w	8000a94 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000952:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <SD_disk_initialize+0x1c4>)
 8000954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000958:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800095a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800095e:	2048      	movs	r0, #72	; 0x48
 8000960:	f7ff ff7f 	bl	8000862 <SD_SendCmd>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d155      	bne.n	8000a16 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	e00c      	b.n	800098a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000970:	7bfc      	ldrb	r4, [r7, #15]
 8000972:	f7ff fe67 	bl	8000644 <SPI_RxByte>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	f104 0310 	add.w	r3, r4, #16
 800097e:	443b      	add	r3, r7
 8000980:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	3301      	adds	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d9ef      	bls.n	8000970 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000990:	7abb      	ldrb	r3, [r7, #10]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d17e      	bne.n	8000a94 <SD_disk_initialize+0x188>
 8000996:	7afb      	ldrb	r3, [r7, #11]
 8000998:	2baa      	cmp	r3, #170	; 0xaa
 800099a:	d17b      	bne.n	8000a94 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800099c:	2100      	movs	r1, #0
 800099e:	2077      	movs	r0, #119	; 0x77
 80009a0:	f7ff ff5f 	bl	8000862 <SD_SendCmd>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d807      	bhi.n	80009ba <SD_disk_initialize+0xae>
 80009aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009ae:	2069      	movs	r0, #105	; 0x69
 80009b0:	f7ff ff57 	bl	8000862 <SD_SendCmd>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d004      	beq.n	80009c4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <SD_disk_initialize+0x1c4>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1ec      	bne.n	800099c <SD_disk_initialize+0x90>
 80009c2:	e000      	b.n	80009c6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009c4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009c6:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <SD_disk_initialize+0x1c4>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d062      	beq.n	8000a94 <SD_disk_initialize+0x188>
 80009ce:	2100      	movs	r1, #0
 80009d0:	207a      	movs	r0, #122	; 0x7a
 80009d2:	f7ff ff46 	bl	8000862 <SD_SendCmd>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d15b      	bne.n	8000a94 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e00c      	b.n	80009fc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80009e2:	7bfc      	ldrb	r4, [r7, #15]
 80009e4:	f7ff fe2e 	bl	8000644 <SPI_RxByte>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	f104 0310 	add.w	r3, r4, #16
 80009f0:	443b      	add	r3, r7
 80009f2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d9ef      	bls.n	80009e2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a02:	7a3b      	ldrb	r3, [r7, #8]
 8000a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SD_disk_initialize+0x104>
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	e000      	b.n	8000a12 <SD_disk_initialize+0x106>
 8000a10:	2304      	movs	r3, #4
 8000a12:	73bb      	strb	r3, [r7, #14]
 8000a14:	e03e      	b.n	8000a94 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a16:	2100      	movs	r1, #0
 8000a18:	2077      	movs	r0, #119	; 0x77
 8000a1a:	f7ff ff22 	bl	8000862 <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d808      	bhi.n	8000a36 <SD_disk_initialize+0x12a>
 8000a24:	2100      	movs	r1, #0
 8000a26:	2069      	movs	r0, #105	; 0x69
 8000a28:	f7ff ff1b 	bl	8000862 <SD_SendCmd>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d801      	bhi.n	8000a36 <SD_disk_initialize+0x12a>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e000      	b.n	8000a38 <SD_disk_initialize+0x12c>
 8000a36:	2301      	movs	r3, #1
 8000a38:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d10e      	bne.n	8000a5e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a40:	2100      	movs	r1, #0
 8000a42:	2077      	movs	r0, #119	; 0x77
 8000a44:	f7ff ff0d 	bl	8000862 <SD_SendCmd>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d80e      	bhi.n	8000a6c <SD_disk_initialize+0x160>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2069      	movs	r0, #105	; 0x69
 8000a52:	f7ff ff06 	bl	8000862 <SD_SendCmd>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d107      	bne.n	8000a6c <SD_disk_initialize+0x160>
 8000a5c:	e00c      	b.n	8000a78 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2041      	movs	r0, #65	; 0x41
 8000a62:	f7ff fefe 	bl	8000862 <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <SD_disk_initialize+0x1c4>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1e2      	bne.n	8000a3a <SD_disk_initialize+0x12e>
 8000a74:	e000      	b.n	8000a78 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a76:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <SD_disk_initialize+0x1c4>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d007      	beq.n	8000a90 <SD_disk_initialize+0x184>
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	2050      	movs	r0, #80	; 0x50
 8000a86:	f7ff feec 	bl	8000862 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x188>
 8000a90:	2300      	movs	r3, #0
 8000a92:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000a94:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <SD_disk_initialize+0x1c8>)
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000a9a:	f7ff fd8f 	bl	80005bc <DESELECT>
  SPI_RxByte();
 8000a9e:	f7ff fdd1 	bl	8000644 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <SD_disk_initialize+0x1c0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SD_disk_initialize+0x1c0>)
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e001      	b.n	8000abe <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000aba:	f7ff fe49 	bl	8000750 <SD_PowerOff>
  }

  return Stat;
 8000abe:	4b03      	ldr	r3, [pc, #12]	; (8000acc <SD_disk_initialize+0x1c0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000090 	.word	0x20000090
 8000ad4:	20000094 	.word	0x20000094

08000ad8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SD_disk_status+0x14>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e002      	b.n	8000af2 <SD_disk_status+0x1a>
  return Stat;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SD_disk_status+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <SD_disk_read+0x1c>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <SD_disk_read+0x20>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e051      	b.n	8000bc8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <SD_disk_read+0xcc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SD_disk_read+0x32>
 8000b32:	2303      	movs	r3, #3
 8000b34:	e048      	b.n	8000bc8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SD_disk_read+0xd0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <SD_disk_read+0x44>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b48:	f7ff fd28 	bl	800059c <SELECT>

  if (count == 1)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d111      	bne.n	8000b76 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2051      	movs	r0, #81	; 0x51
 8000b56:	f7ff fe84 	bl	8000862 <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d129      	bne.n	8000bb4 <SD_disk_read+0xb0>
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fe0b 	bl	8000780 <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <SD_disk_read+0xb0>
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e01e      	b.n	8000bb4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2052      	movs	r0, #82	; 0x52
 8000b7a:	f7ff fe72 	bl	8000862 <SD_SendCmd>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d117      	bne.n	8000bb4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fdf9 	bl	8000780 <SD_RxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <SD_disk_read+0xa6>
        buff += 512;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b9a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1ed      	bne.n	8000b84 <SD_disk_read+0x80>
 8000ba8:	e000      	b.n	8000bac <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000baa:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	204c      	movs	r0, #76	; 0x4c
 8000bb0:	f7ff fe57 	bl	8000862 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000bb4:	f7ff fd02 	bl	80005bc <DESELECT>
  SPI_RxByte();
 8000bb8:	f7ff fd44 	bl	8000644 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000094 	.word	0x20000094

08000bd8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d102      	bne.n	8000bf4 <SD_disk_write+0x1c>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <SD_disk_write+0x20>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e06b      	b.n	8000cd0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <SD_disk_write+0x100>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SD_disk_write+0x32>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e062      	b.n	8000cd0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <SD_disk_write+0x100>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SD_disk_write+0x44>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e059      	b.n	8000cd0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <SD_disk_write+0x104>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <SD_disk_write+0x56>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	025b      	lsls	r3, r3, #9
 8000c2c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c2e:	f7ff fcb5 	bl	800059c <SELECT>

  if (count == 1)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d110      	bne.n	8000c5a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2058      	movs	r0, #88	; 0x58
 8000c3c:	f7ff fe11 	bl	8000862 <SD_SendCmd>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13a      	bne.n	8000cbc <SD_disk_write+0xe4>
 8000c46:	21fe      	movs	r1, #254	; 0xfe
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f7ff fdc7 	bl	80007dc <SD_TxDataBlock>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d033      	beq.n	8000cbc <SD_disk_write+0xe4>
      count = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e030      	b.n	8000cbc <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <SD_disk_write+0x104>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2077      	movs	r0, #119	; 0x77
 8000c6a:	f7ff fdfa 	bl	8000862 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	2057      	movs	r0, #87	; 0x57
 8000c72:	f7ff fdf6 	bl	8000862 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2059      	movs	r0, #89	; 0x59
 8000c7a:	f7ff fdf2 	bl	8000862 <SD_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c84:	21fc      	movs	r1, #252	; 0xfc
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f7ff fda8 	bl	80007dc <SD_TxDataBlock>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00a      	beq.n	8000ca8 <SD_disk_write+0xd0>
        buff += 512;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c98:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ee      	bne.n	8000c84 <SD_disk_write+0xac>
 8000ca6:	e000      	b.n	8000caa <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000caa:	21fd      	movs	r1, #253	; 0xfd
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fd95 	bl	80007dc <SD_TxDataBlock>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <SD_disk_write+0xe4>
      {
        count = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000cbc:	f7ff fc7e 	bl	80005bc <DESELECT>
  SPI_RxByte();
 8000cc0:	f7ff fcc0 	bl	8000644 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000094 	.word	0x20000094

08000ce0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	603a      	str	r2, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SD_disk_ioctl+0x1e>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e115      	b.n	8000f2a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d124      	bne.n	8000d54 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d012      	beq.n	8000d38 <SD_disk_ioctl+0x58>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dc1a      	bgt.n	8000d4c <SD_disk_ioctl+0x6c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <SD_disk_ioctl+0x40>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d006      	beq.n	8000d2c <SD_disk_ioctl+0x4c>
 8000d1e:	e015      	b.n	8000d4c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000d20:	f7ff fd16 	bl	8000750 <SD_PowerOff>
      res = RES_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d2a:	e0fc      	b.n	8000f26 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000d2c:	f7ff fcce 	bl	80006cc <SD_PowerOn>
      res = RES_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d36:	e0f6      	b.n	8000f26 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	1c5c      	adds	r4, r3, #1
 8000d3c:	f7ff fd14 	bl	8000768 <SD_CheckPower>
 8000d40:	4603      	mov	r3, r0
 8000d42:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d4a:	e0ec      	b.n	8000f26 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d52:	e0e8      	b.n	8000f26 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <SD_disk_ioctl+0x254>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SD_disk_ioctl+0x86>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e0e1      	b.n	8000f2a <SD_disk_ioctl+0x24a>

    SELECT();
 8000d66:	f7ff fc19 	bl	800059c <SELECT>

    switch (ctrl)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b0d      	cmp	r3, #13
 8000d6e:	f200 80cb 	bhi.w	8000f08 <SD_disk_ioctl+0x228>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <SD_disk_ioctl+0x98>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000e73 	.word	0x08000e73
 8000d7c:	08000db1 	.word	0x08000db1
 8000d80:	08000e63 	.word	0x08000e63
 8000d84:	08000f09 	.word	0x08000f09
 8000d88:	08000f09 	.word	0x08000f09
 8000d8c:	08000f09 	.word	0x08000f09
 8000d90:	08000f09 	.word	0x08000f09
 8000d94:	08000f09 	.word	0x08000f09
 8000d98:	08000f09 	.word	0x08000f09
 8000d9c:	08000f09 	.word	0x08000f09
 8000da0:	08000f09 	.word	0x08000f09
 8000da4:	08000e85 	.word	0x08000e85
 8000da8:	08000ea9 	.word	0x08000ea9
 8000dac:	08000ecd 	.word	0x08000ecd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	; 0x49
 8000db4:	f7ff fd55 	bl	8000862 <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80a8 	bne.w	8000f10 <SD_disk_ioctl+0x230>
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcda 	bl	8000780 <SD_RxDataBlock>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 809e 	beq.w	8000f10 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	099b      	lsrs	r3, r3, #6
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10e      	bne.n	8000dfc <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	7d3b      	ldrb	r3, [r7, #20]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000df2:	8bfb      	ldrh	r3, [r7, #30]
 8000df4:	029a      	lsls	r2, r3, #10
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e02e      	b.n	8000e5a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dfc:	7c7b      	ldrb	r3, [r7, #17]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	7dbb      	ldrb	r3, [r7, #22]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	7d7b      	ldrb	r3, [r7, #21]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0306 	and.w	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e24:	7d3b      	ldrb	r3, [r7, #20]
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	7cfb      	ldrb	r3, [r7, #19]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	7cbb      	ldrb	r3, [r7, #18]
 8000e3a:	029b      	lsls	r3, r3, #10
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e4c:	8bfa      	ldrh	r2, [r7, #30]
 8000e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e52:	3b09      	subs	r3, #9
 8000e54:	409a      	lsls	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e60:	e056      	b.n	8000f10 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e70:	e055      	b.n	8000f1e <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e72:	f7ff fc11 	bl	8000698 <SD_ReadyWait>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d14b      	bne.n	8000f14 <SD_disk_ioctl+0x234>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e82:	e047      	b.n	8000f14 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e84:	2100      	movs	r1, #0
 8000e86:	2049      	movs	r0, #73	; 0x49
 8000e88:	f7ff fceb 	bl	8000862 <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d142      	bne.n	8000f18 <SD_disk_ioctl+0x238>
 8000e92:	2110      	movs	r1, #16
 8000e94:	6a38      	ldr	r0, [r7, #32]
 8000e96:	f7ff fc73 	bl	8000780 <SD_RxDataBlock>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03b      	beq.n	8000f18 <SD_disk_ioctl+0x238>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ea6:	e037      	b.n	8000f18 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	204a      	movs	r0, #74	; 0x4a
 8000eac:	f7ff fcd9 	bl	8000862 <SD_SendCmd>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d132      	bne.n	8000f1c <SD_disk_ioctl+0x23c>
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	6a38      	ldr	r0, [r7, #32]
 8000eba:	f7ff fc61 	bl	8000780 <SD_RxDataBlock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d02b      	beq.n	8000f1c <SD_disk_ioctl+0x23c>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eca:	e027      	b.n	8000f1c <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	207a      	movs	r0, #122	; 0x7a
 8000ed0:	f7ff fcc7 	bl	8000862 <SD_SendCmd>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ee0:	e00b      	b.n	8000efa <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000ee2:	6a3c      	ldr	r4, [r7, #32]
 8000ee4:	1c63      	adds	r3, r4, #1
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	f7ff fbac 	bl	8000644 <SPI_RxByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000efa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d9ef      	bls.n	8000ee2 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f0e:	e006      	b.n	8000f1e <SD_disk_ioctl+0x23e>
      break;
 8000f10:	bf00      	nop
 8000f12:	e004      	b.n	8000f1e <SD_disk_ioctl+0x23e>
      break;
 8000f14:	bf00      	nop
 8000f16:	e002      	b.n	8000f1e <SD_disk_ioctl+0x23e>
      break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <SD_disk_ioctl+0x23e>
      break;
 8000f1c:	bf00      	nop
    }

    DESELECT();
 8000f1e:	f7ff fb4d 	bl	80005bc <DESELECT>
    SPI_RxByte();
 8000f22:	f7ff fb8f 	bl	8000644 <SPI_RxByte>
  }

  return res;
 8000f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	372c      	adds	r7, #44	; 0x2c
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000

08000f38 <UartBufferReset>:
static void MX_SPI2_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * );

void UartBufferReset(){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
	for(int i=0; i<sizeof(UART_BUFFER); i++){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	e00c      	b.n	8000f5e <UartBufferReset+0x26>
		UART_BUFFER[i]='\0';
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <UartBufferReset+0x3c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
				a[i] = '\0';
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <UartBufferReset+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<sizeof(UART_BUFFER); i++){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f64:	d3ee      	bcc.n	8000f44 <UartBufferReset+0xc>
	}
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	20000218 	.word	0x20000218
 8000f78:	20000418 	.word	0x20000418

08000f7c <send_uart>:

void send_uart(char *data){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	data[strlen(data)+1]='\n';
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f92d 	bl	80001e4 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	220a      	movs	r2, #10
 8000f94:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Transmit_IT(&huart5, data, strlen(data));
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff f924 	bl	80001e4 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <send_uart+0x38>)
 8000fa6:	f003 f876 	bl	8004096 <HAL_UART_Transmit_IT>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000150 	.word	0x20000150

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 fed9 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 faa1 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fbc5 	bl	8001754 <MX_GPIO_Init>
  MX_UART5_Init();
 8000fca:	f000 fb99 	bl	8001700 <MX_UART5_Init>
  MX_SPI2_Init();
 8000fce:	f000 fb61 	bl	8001694 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000fd2:	f004 f83d 	bl	8005050 <MX_FATFS_Init>
  MX_RTC_Init();
 8000fd6:	f000 fb03 	bl	80015e0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Transmit(&huart5, "Hello!", 6, 100);
 8000fda:	2364      	movs	r3, #100	; 0x64
 8000fdc:	2206      	movs	r2, #6
 8000fde:	49b1      	ldr	r1, [pc, #708]	; (80012a4 <main+0x2ec>)
 8000fe0:	48b1      	ldr	r0, [pc, #708]	; (80012a8 <main+0x2f0>)
 8000fe2:	f002 ffc6 	bl	8003f72 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart5, "\n", 1, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2201      	movs	r2, #1
 8000fea:	49b0      	ldr	r1, [pc, #704]	; (80012ac <main+0x2f4>)
 8000fec:	48ae      	ldr	r0, [pc, #696]	; (80012a8 <main+0x2f0>)
 8000fee:	f002 ffc0 	bl	8003f72 <HAL_UART_Transmit>

HAL_UART_Receive_IT(&huart5, rx_data, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	49ae      	ldr	r1, [pc, #696]	; (80012b0 <main+0x2f8>)
 8000ff6:	48ac      	ldr	r0, [pc, #688]	; (80012a8 <main+0x2f0>)
 8000ff8:	f003 f892 	bl	8004120 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	49ad      	ldr	r1, [pc, #692]	; (80012b4 <main+0x2fc>)
 8001000:	48ad      	ldr	r0, [pc, #692]	; (80012b8 <main+0x300>)
 8001002:	f002 fa2b 	bl	800345c <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001006:	2200      	movs	r2, #0
 8001008:	49ac      	ldr	r1, [pc, #688]	; (80012bc <main+0x304>)
 800100a:	48ab      	ldr	r0, [pc, #684]	; (80012b8 <main+0x300>)
 800100c:	f002 f944 	bl	8003298 <HAL_RTC_GetTime>

	  sprintf((char*)time,"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001010:	4baa      	ldr	r3, [pc, #680]	; (80012bc <main+0x304>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4ba9      	ldr	r3, [pc, #676]	; (80012bc <main+0x304>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	4619      	mov	r1, r3
 800101c:	4ba7      	ldr	r3, [pc, #668]	; (80012bc <main+0x304>)
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	460b      	mov	r3, r1
 8001024:	49a6      	ldr	r1, [pc, #664]	; (80012c0 <main+0x308>)
 8001026:	48a7      	ldr	r0, [pc, #668]	; (80012c4 <main+0x30c>)
 8001028:	f007 f866 	bl	80080f8 <siprintf>
	  sprintf((char*)date,"%02d-%02d-%2d",sDate.Date, sDate.Month, 2000 + sDate.Year);
 800102c:	4ba1      	ldr	r3, [pc, #644]	; (80012b4 <main+0x2fc>)
 800102e:	789b      	ldrb	r3, [r3, #2]
 8001030:	461a      	mov	r2, r3
 8001032:	4ba0      	ldr	r3, [pc, #640]	; (80012b4 <main+0x2fc>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	4619      	mov	r1, r3
 8001038:	4b9e      	ldr	r3, [pc, #632]	; (80012b4 <main+0x2fc>)
 800103a:	78db      	ldrb	r3, [r3, #3]
 800103c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	460b      	mov	r3, r1
 8001044:	49a0      	ldr	r1, [pc, #640]	; (80012c8 <main+0x310>)
 8001046:	48a1      	ldr	r0, [pc, #644]	; (80012cc <main+0x314>)
 8001048:	f007 f856 	bl	80080f8 <siprintf>

	  //HAL_UART_Transmit(&huart5, (uint8_t *) date, strlen(date), 300);
	  //HAL_UART_Transmit(&huart5, (uint8_t *) time, strlen(time), 300);
	  sprintf(combinedTime, "%s\n", time);
 800104c:	4a9d      	ldr	r2, [pc, #628]	; (80012c4 <main+0x30c>)
 800104e:	49a0      	ldr	r1, [pc, #640]	; (80012d0 <main+0x318>)
 8001050:	48a0      	ldr	r0, [pc, #640]	; (80012d4 <main+0x31c>)
 8001052:	f007 f851 	bl	80080f8 <siprintf>
	  sprintf(combinedDate, "%s\n", date);
 8001056:	4a9d      	ldr	r2, [pc, #628]	; (80012cc <main+0x314>)
 8001058:	499d      	ldr	r1, [pc, #628]	; (80012d0 <main+0x318>)
 800105a:	489f      	ldr	r0, [pc, #636]	; (80012d8 <main+0x320>)
 800105c:	f007 f84c 	bl	80080f8 <siprintf>
	  send_uart(combinedDate);
 8001060:	489d      	ldr	r0, [pc, #628]	; (80012d8 <main+0x320>)
 8001062:	f7ff ff8b 	bl	8000f7c <send_uart>
	  HAL_Delay(1000);
 8001066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106a:	f000 fef5 	bl	8001e58 <HAL_Delay>
	  send_uart(combinedTime);
 800106e:	4899      	ldr	r0, [pc, #612]	; (80012d4 <main+0x31c>)
 8001070:	f7ff ff84 	bl	8000f7c <send_uart>
	  HAL_Delay(1000);
 8001074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001078:	f000 feee 	bl	8001e58 <HAL_Delay>
	  if(flag){
 800107c:	4b97      	ldr	r3, [pc, #604]	; (80012dc <main+0x324>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0bb      	beq.n	8000ffc <main+0x44>
		  if(strcmp(UART_BUFFER, "green_on\r\n") == 0){
 8001084:	4996      	ldr	r1, [pc, #600]	; (80012e0 <main+0x328>)
 8001086:	4897      	ldr	r0, [pc, #604]	; (80012e4 <main+0x32c>)
 8001088:	f7ff f8a2 	bl	80001d0 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d138      	bne.n	8001104 <main+0x14c>
			  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)){
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	4894      	ldr	r0, [pc, #592]	; (80012e8 <main+0x330>)
 8001098:	f001 fa42 	bl	8002520 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d016      	beq.n	80010d0 <main+0x118>
			  send_uart("yesil led zaten aktif\n");
 80010a2:	4892      	ldr	r0, [pc, #584]	; (80012ec <main+0x334>)
 80010a4:	f7ff ff6a 	bl	8000f7c <send_uart>
			  send_uart(date);
 80010a8:	4888      	ldr	r0, [pc, #544]	; (80012cc <main+0x314>)
 80010aa:	f7ff ff67 	bl	8000f7c <send_uart>
			  strcpy(a,"yesil led zaten aktif\n") ;
 80010ae:	4a90      	ldr	r2, [pc, #576]	; (80012f0 <main+0x338>)
 80010b0:	4b8e      	ldr	r3, [pc, #568]	; (80012ec <main+0x334>)
 80010b2:	4614      	mov	r4, r2
 80010b4:	461d      	mov	r5, r3
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010be:	6020      	str	r0, [r4, #0]
 80010c0:	3404      	adds	r4, #4
 80010c2:	8021      	strh	r1, [r4, #0]
 80010c4:	3402      	adds	r4, #2
 80010c6:	0c0b      	lsrs	r3, r1, #16
 80010c8:	7023      	strb	r3, [r4, #0]
			  process_SD_card();
 80010ca:	f000 fbff 	bl	80018cc <process_SD_card>
 80010ce:	e014      	b.n	80010fa <main+0x142>

			  }else{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d6:	4884      	ldr	r0, [pc, #528]	; (80012e8 <main+0x330>)
 80010d8:	f001 fa3a 	bl	8002550 <HAL_GPIO_WritePin>
			  send_uart("yesil led aktif edildi\n");
 80010dc:	4885      	ldr	r0, [pc, #532]	; (80012f4 <main+0x33c>)
 80010de:	f7ff ff4d 	bl	8000f7c <send_uart>
			  strcpy(a,"yesil led aktif edildi\n") ;
 80010e2:	4a83      	ldr	r2, [pc, #524]	; (80012f0 <main+0x338>)
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <main+0x33c>)
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f2:	e884 0003 	stmia.w	r4, {r0, r1}
			  process_SD_card();
 80010f6:	f000 fbe9 	bl	80018cc <process_SD_card>
			  }
			  UartBufferReset();
 80010fa:	f7ff ff1d 	bl	8000f38 <UartBufferReset>
			  flag=0;
 80010fe:	4b77      	ldr	r3, [pc, #476]	; (80012dc <main+0x324>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]

		  }
		  if(strcmp(UART_BUFFER, "green_off\r\n") == 0){
 8001104:	497c      	ldr	r1, [pc, #496]	; (80012f8 <main+0x340>)
 8001106:	4877      	ldr	r0, [pc, #476]	; (80012e4 <main+0x32c>)
 8001108:	f7ff f862 	bl	80001d0 <strcmp>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d132      	bne.n	8001178 <main+0x1c0>
			 if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == 0){
 8001112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001116:	4874      	ldr	r0, [pc, #464]	; (80012e8 <main+0x330>)
 8001118:	f001 fa02 	bl	8002520 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <main+0x18a>
			 send_uart("yesil led zaten kapali\n");
 8001122:	4876      	ldr	r0, [pc, #472]	; (80012fc <main+0x344>)
 8001124:	f7ff ff2a 	bl	8000f7c <send_uart>
			 strcpy(a,"yesil led zaten kapali\n") ;
 8001128:	4a71      	ldr	r2, [pc, #452]	; (80012f0 <main+0x338>)
 800112a:	4b74      	ldr	r3, [pc, #464]	; (80012fc <main+0x344>)
 800112c:	4614      	mov	r4, r2
 800112e:	461d      	mov	r5, r3
 8001130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001134:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001138:	e884 0003 	stmia.w	r4, {r0, r1}
			 process_SD_card();
 800113c:	f000 fbc6 	bl	80018cc <process_SD_card>
 8001140:	e015      	b.n	800116e <main+0x1b6>
			 }
			 else{
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4867      	ldr	r0, [pc, #412]	; (80012e8 <main+0x330>)
 800114a:	f001 fa01 	bl	8002550 <HAL_GPIO_WritePin>
			 send_uart("yesil led kapatildi\n");
 800114e:	486c      	ldr	r0, [pc, #432]	; (8001300 <main+0x348>)
 8001150:	f7ff ff14 	bl	8000f7c <send_uart>
			 strcpy(a,"yesil led kapatildi\n") ;
 8001154:	4a66      	ldr	r2, [pc, #408]	; (80012f0 <main+0x338>)
 8001156:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <main+0x348>)
 8001158:	4614      	mov	r4, r2
 800115a:	461d      	mov	r5, r3
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001164:	6020      	str	r0, [r4, #0]
 8001166:	3404      	adds	r4, #4
 8001168:	7021      	strb	r1, [r4, #0]
			 process_SD_card();
 800116a:	f000 fbaf 	bl	80018cc <process_SD_card>
			 }
			 UartBufferReset();
 800116e:	f7ff fee3 	bl	8000f38 <UartBufferReset>
			 flag=0;
 8001172:	4b5a      	ldr	r3, [pc, #360]	; (80012dc <main+0x324>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
		  }
		  if(strcmp(UART_BUFFER, "red_on\r\n") == 0){
 8001178:	4962      	ldr	r1, [pc, #392]	; (8001304 <main+0x34c>)
 800117a:	485a      	ldr	r0, [pc, #360]	; (80012e4 <main+0x32c>)
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d131      	bne.n	80011ea <main+0x232>
		  	 if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14)){
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4857      	ldr	r0, [pc, #348]	; (80012e8 <main+0x330>)
 800118c:	f001 f9c8 	bl	8002520 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00f      	beq.n	80011b6 <main+0x1fe>
		  	 send_uart("kirmizi led zaten aktif\n");
 8001196:	485c      	ldr	r0, [pc, #368]	; (8001308 <main+0x350>)
 8001198:	f7ff fef0 	bl	8000f7c <send_uart>
		  	 strcpy(a,"kirmizi led zaten aktif\n") ;
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <main+0x338>)
 800119e:	4b5a      	ldr	r3, [pc, #360]	; (8001308 <main+0x350>)
 80011a0:	4614      	mov	r4, r2
 80011a2:	461d      	mov	r5, r3
 80011a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ac:	c403      	stmia	r4!, {r0, r1}
 80011ae:	7022      	strb	r2, [r4, #0]
		  	 process_SD_card();
 80011b0:	f000 fb8c 	bl	80018cc <process_SD_card>
 80011b4:	e014      	b.n	80011e0 <main+0x228>
   		     }else{
		  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011bc:	484a      	ldr	r0, [pc, #296]	; (80012e8 <main+0x330>)
 80011be:	f001 f9c7 	bl	8002550 <HAL_GPIO_WritePin>
		  	 send_uart("kirmizi led aktif edildi\n");
 80011c2:	4852      	ldr	r0, [pc, #328]	; (800130c <main+0x354>)
 80011c4:	f7ff feda 	bl	8000f7c <send_uart>
		  	 strcpy(a,"kirmizi led aktif edildi\n") ;
 80011c8:	4a49      	ldr	r2, [pc, #292]	; (80012f0 <main+0x338>)
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <main+0x354>)
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d8:	c403      	stmia	r4!, {r0, r1}
 80011da:	8022      	strh	r2, [r4, #0]
		  	 process_SD_card();
 80011dc:	f000 fb76 	bl	80018cc <process_SD_card>
   		     }
		  	 UartBufferReset();
 80011e0:	f7ff feaa 	bl	8000f38 <UartBufferReset>
		  	 flag=0;
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <main+0x324>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
		     }
		     if(strcmp(UART_BUFFER, "red_off\r\n") == 0){
 80011ea:	4949      	ldr	r1, [pc, #292]	; (8001310 <main+0x358>)
 80011ec:	483d      	ldr	r0, [pc, #244]	; (80012e4 <main+0x32c>)
 80011ee:	f7fe ffef 	bl	80001d0 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d135      	bne.n	8001264 <main+0x2ac>
		     if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == 0){
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	483a      	ldr	r0, [pc, #232]	; (80012e8 <main+0x330>)
 80011fe:	f001 f98f 	bl	8002520 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <main+0x270>
     		 send_uart("kirmizi led zaten kapali\n");
 8001208:	4842      	ldr	r0, [pc, #264]	; (8001314 <main+0x35c>)
 800120a:	f7ff feb7 	bl	8000f7c <send_uart>
		  	 strcpy(a,"kirmizi led zaten kapali\n") ;
 800120e:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <main+0x338>)
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <main+0x35c>)
 8001212:	4614      	mov	r4, r2
 8001214:	461d      	mov	r5, r3
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121e:	c403      	stmia	r4!, {r0, r1}
 8001220:	8022      	strh	r2, [r4, #0]
		  	 process_SD_card();
 8001222:	f000 fb53 	bl	80018cc <process_SD_card>
 8001226:	e018      	b.n	800125a <main+0x2a2>
		  	 }
    		 else{
		  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122e:	482e      	ldr	r0, [pc, #184]	; (80012e8 <main+0x330>)
 8001230:	f001 f98e 	bl	8002550 <HAL_GPIO_WritePin>
	  		 send_uart("kirmizi led kapatildi\n");
 8001234:	4838      	ldr	r0, [pc, #224]	; (8001318 <main+0x360>)
 8001236:	f7ff fea1 	bl	8000f7c <send_uart>
		  	 strcpy(a,"kirmizi led kapatildi\n") ;
 800123a:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <main+0x338>)
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <main+0x360>)
 800123e:	4614      	mov	r4, r2
 8001240:	461d      	mov	r5, r3
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001246:	e895 0003 	ldmia.w	r5, {r0, r1}
 800124a:	6020      	str	r0, [r4, #0]
 800124c:	3404      	adds	r4, #4
 800124e:	8021      	strh	r1, [r4, #0]
 8001250:	3402      	adds	r4, #2
 8001252:	0c0b      	lsrs	r3, r1, #16
 8001254:	7023      	strb	r3, [r4, #0]
		  	 process_SD_card();
 8001256:	f000 fb39 	bl	80018cc <process_SD_card>
  			 }
		  	 UartBufferReset();
 800125a:	f7ff fe6d 	bl	8000f38 <UartBufferReset>
		  	 flag=0;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <main+0x324>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
		  	 }
		  	 if(strcmp(UART_BUFFER, "blue_on\r\n") == 0){
 8001264:	492d      	ldr	r1, [pc, #180]	; (800131c <main+0x364>)
 8001266:	481f      	ldr	r0, [pc, #124]	; (80012e4 <main+0x32c>)
 8001268:	f7fe ffb2 	bl	80001d0 <strcmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d176      	bne.n	8001360 <main+0x3a8>
		  	 if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)){
 8001272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001276:	481c      	ldr	r0, [pc, #112]	; (80012e8 <main+0x330>)
 8001278:	f001 f952 	bl	8002520 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d050      	beq.n	8001324 <main+0x36c>
		  	 send_uart("mavi led zaten aktif\n");
 8001282:	4827      	ldr	r0, [pc, #156]	; (8001320 <main+0x368>)
 8001284:	f7ff fe7a 	bl	8000f7c <send_uart>
		  	 strcpy(a,"mavi led zaten aktif\n") ;
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <main+0x338>)
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <main+0x368>)
 800128c:	4614      	mov	r4, r2
 800128e:	461d      	mov	r5, r3
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001298:	6020      	str	r0, [r4, #0]
 800129a:	3404      	adds	r4, #4
 800129c:	8021      	strh	r1, [r4, #0]
		  	 process_SD_card();
 800129e:	f000 fb15 	bl	80018cc <process_SD_card>
 80012a2:	e058      	b.n	8001356 <main+0x39e>
 80012a4:	08008a84 	.word	0x08008a84
 80012a8:	20000150 	.word	0x20000150
 80012ac:	08008a8c 	.word	0x08008a8c
 80012b0:	20000214 	.word	0x20000214
 80012b4:	200001a8 	.word	0x200001a8
 80012b8:	200000d8 	.word	0x200000d8
 80012bc:	20000194 	.word	0x20000194
 80012c0:	08008a90 	.word	0x08008a90
 80012c4:	20000098 	.word	0x20000098
 80012c8:	08008aa0 	.word	0x08008aa0
 80012cc:	200000b8 	.word	0x200000b8
 80012d0:	08008ab0 	.word	0x08008ab0
 80012d4:	200001ac 	.word	0x200001ac
 80012d8:	200001e0 	.word	0x200001e0
 80012dc:	20000618 	.word	0x20000618
 80012e0:	08008ab4 	.word	0x08008ab4
 80012e4:	20000218 	.word	0x20000218
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	08008ac0 	.word	0x08008ac0
 80012f0:	20000418 	.word	0x20000418
 80012f4:	08008ad8 	.word	0x08008ad8
 80012f8:	08008af0 	.word	0x08008af0
 80012fc:	08008afc 	.word	0x08008afc
 8001300:	08008b14 	.word	0x08008b14
 8001304:	08008b2c 	.word	0x08008b2c
 8001308:	08008b38 	.word	0x08008b38
 800130c:	08008b54 	.word	0x08008b54
 8001310:	08008b70 	.word	0x08008b70
 8001314:	08008b7c 	.word	0x08008b7c
 8001318:	08008b98 	.word	0x08008b98
 800131c:	08008bb0 	.word	0x08008bb0
 8001320:	08008bbc 	.word	0x08008bbc
		  	 }else{
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132a:	4869      	ldr	r0, [pc, #420]	; (80014d0 <main+0x518>)
 800132c:	f001 f910 	bl	8002550 <HAL_GPIO_WritePin>
    		 send_uart("mavi led aktif edildi\n");
 8001330:	4868      	ldr	r0, [pc, #416]	; (80014d4 <main+0x51c>)
 8001332:	f7ff fe23 	bl	8000f7c <send_uart>
		  	 strcpy(a,"mavi led aktif edildi\n") ;
 8001336:	4a68      	ldr	r2, [pc, #416]	; (80014d8 <main+0x520>)
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <main+0x51c>)
 800133a:	4614      	mov	r4, r2
 800133c:	461d      	mov	r5, r3
 800133e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001342:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001346:	6020      	str	r0, [r4, #0]
 8001348:	3404      	adds	r4, #4
 800134a:	8021      	strh	r1, [r4, #0]
 800134c:	3402      	adds	r4, #2
 800134e:	0c0b      	lsrs	r3, r1, #16
 8001350:	7023      	strb	r3, [r4, #0]
		  	 process_SD_card();
 8001352:	f000 fabb 	bl	80018cc <process_SD_card>
		  	 }
        	 UartBufferReset();
 8001356:	f7ff fdef 	bl	8000f38 <UartBufferReset>
		  	 flag=0;
 800135a:	4b60      	ldr	r3, [pc, #384]	; (80014dc <main+0x524>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
		  	 }
		     if(strcmp(UART_BUFFER, "blue_off\r\n") == 0){
 8001360:	495f      	ldr	r1, [pc, #380]	; (80014e0 <main+0x528>)
 8001362:	4860      	ldr	r0, [pc, #384]	; (80014e4 <main+0x52c>)
 8001364:	f7fe ff34 	bl	80001d0 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d133      	bne.n	80013d6 <main+0x41e>
		     if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == 0){
 800136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001372:	4857      	ldr	r0, [pc, #348]	; (80014d0 <main+0x518>)
 8001374:	f001 f8d4 	bl	8002520 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d113      	bne.n	80013a6 <main+0x3ee>
			 send_uart("mavi led zaten kapali\n");
 800137e:	485a      	ldr	r0, [pc, #360]	; (80014e8 <main+0x530>)
 8001380:	f7ff fdfc 	bl	8000f7c <send_uart>
		  	 strcpy(a,"mavi led zaten kapali\n") ;
 8001384:	4a54      	ldr	r2, [pc, #336]	; (80014d8 <main+0x520>)
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <main+0x530>)
 8001388:	4614      	mov	r4, r2
 800138a:	461d      	mov	r5, r3
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001394:	6020      	str	r0, [r4, #0]
 8001396:	3404      	adds	r4, #4
 8001398:	8021      	strh	r1, [r4, #0]
 800139a:	3402      	adds	r4, #2
 800139c:	0c0b      	lsrs	r3, r1, #16
 800139e:	7023      	strb	r3, [r4, #0]
		  	 process_SD_card();
 80013a0:	f000 fa94 	bl	80018cc <process_SD_card>
 80013a4:	e012      	b.n	80013cc <main+0x414>
		 	 }
			 else{
		  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ac:	4848      	ldr	r0, [pc, #288]	; (80014d0 <main+0x518>)
 80013ae:	f001 f8cf 	bl	8002550 <HAL_GPIO_WritePin>
		  	 send_uart("mavi led kapatildi\n");
 80013b2:	484e      	ldr	r0, [pc, #312]	; (80014ec <main+0x534>)
 80013b4:	f7ff fde2 	bl	8000f7c <send_uart>
		  	 strcpy(a,"mavi led kapatildi\n") ;
 80013b8:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <main+0x520>)
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <main+0x534>)
 80013bc:	4614      	mov	r4, r2
 80013be:	461d      	mov	r5, r3
 80013c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	6023      	str	r3, [r4, #0]
		  	 process_SD_card();
 80013c8:	f000 fa80 	bl	80018cc <process_SD_card>
	     	 }
		     UartBufferReset();
 80013cc:	f7ff fdb4 	bl	8000f38 <UartBufferReset>
		  	 flag=0;
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <main+0x524>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
		     }
		  	 if(strcmp(UART_BUFFER, "orange_on\r\n") == 0){
 80013d6:	4946      	ldr	r1, [pc, #280]	; (80014f0 <main+0x538>)
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <main+0x52c>)
 80013da:	f7fe fef9 	bl	80001d0 <strcmp>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d131      	bne.n	8001448 <main+0x490>
		     if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13)){
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	4839      	ldr	r0, [pc, #228]	; (80014d0 <main+0x518>)
 80013ea:	f001 f899 	bl	8002520 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00f      	beq.n	8001414 <main+0x45c>
		 	 send_uart("turuncu led zaten aktif\n");
 80013f4:	483f      	ldr	r0, [pc, #252]	; (80014f4 <main+0x53c>)
 80013f6:	f7ff fdc1 	bl	8000f7c <send_uart>
		  	 strcpy(a,"turuncu led zaten aktif\n") ;
 80013fa:	4a37      	ldr	r2, [pc, #220]	; (80014d8 <main+0x520>)
 80013fc:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <main+0x53c>)
 80013fe:	4614      	mov	r4, r2
 8001400:	461d      	mov	r5, r3
 8001402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001406:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800140a:	c403      	stmia	r4!, {r0, r1}
 800140c:	7022      	strb	r2, [r4, #0]
		  	 process_SD_card();
 800140e:	f000 fa5d 	bl	80018cc <process_SD_card>
 8001412:	e014      	b.n	800143e <main+0x486>
		     }else{
		     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	482d      	ldr	r0, [pc, #180]	; (80014d0 <main+0x518>)
 800141c:	f001 f898 	bl	8002550 <HAL_GPIO_WritePin>
		     send_uart("turuncu led aktif edildi\n");
 8001420:	4835      	ldr	r0, [pc, #212]	; (80014f8 <main+0x540>)
 8001422:	f7ff fdab 	bl	8000f7c <send_uart>
		  	 strcpy(a,"turuncu led aktif edildi\n") ;
 8001426:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <main+0x520>)
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <main+0x540>)
 800142a:	4614      	mov	r4, r2
 800142c:	461d      	mov	r5, r3
 800142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001436:	c403      	stmia	r4!, {r0, r1}
 8001438:	8022      	strh	r2, [r4, #0]
		  	 process_SD_card();
 800143a:	f000 fa47 	bl	80018cc <process_SD_card>
			 }
		 	 UartBufferReset();
 800143e:	f7ff fd7b 	bl	8000f38 <UartBufferReset>
		     flag=0;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <main+0x524>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	         }
		  	 if(strcmp(UART_BUFFER, "orange_off\r\n") == 0){
 8001448:	492c      	ldr	r1, [pc, #176]	; (80014fc <main+0x544>)
 800144a:	4826      	ldr	r0, [pc, #152]	; (80014e4 <main+0x52c>)
 800144c:	f7fe fec0 	bl	80001d0 <strcmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d136      	bne.n	80014c4 <main+0x50c>
		  	 if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == 0){
 8001456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145a:	481d      	ldr	r0, [pc, #116]	; (80014d0 <main+0x518>)
 800145c:	f001 f860 	bl	8002520 <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <main+0x4ce>
		  	 send_uart("turuncu led zaten kapali\n");
 8001466:	4826      	ldr	r0, [pc, #152]	; (8001500 <main+0x548>)
 8001468:	f7ff fd88 	bl	8000f7c <send_uart>
		  	 strcpy(a,"turuncu led zaten kapali\n") ;
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <main+0x520>)
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <main+0x548>)
 8001470:	4614      	mov	r4, r2
 8001472:	461d      	mov	r5, r3
 8001474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001478:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800147c:	c403      	stmia	r4!, {r0, r1}
 800147e:	8022      	strh	r2, [r4, #0]
		  	 process_SD_card();
 8001480:	f000 fa24 	bl	80018cc <process_SD_card>
 8001484:	e018      	b.n	80014b8 <main+0x500>
		  	 }
		  	 else{
		  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <main+0x518>)
 800148e:	f001 f85f 	bl	8002550 <HAL_GPIO_WritePin>
		  	 send_uart("turuncu led kapatildi\n");
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <main+0x54c>)
 8001494:	f7ff fd72 	bl	8000f7c <send_uart>
		  	 strcpy(a,"turuncu led kapatildi\n") ;
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <main+0x520>)
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <main+0x54c>)
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014a8:	6020      	str	r0, [r4, #0]
 80014aa:	3404      	adds	r4, #4
 80014ac:	8021      	strh	r1, [r4, #0]
 80014ae:	3402      	adds	r4, #2
 80014b0:	0c0b      	lsrs	r3, r1, #16
 80014b2:	7023      	strb	r3, [r4, #0]
		  	 process_SD_card();
 80014b4:	f000 fa0a 	bl	80018cc <process_SD_card>
		     }
		  	 UartBufferReset();
 80014b8:	f7ff fd3e 	bl	8000f38 <UartBufferReset>
		  	 flag=0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <main+0x524>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e59b      	b.n	8000ffc <main+0x44>
		     }
		  	 else{
		  		UartBufferReset();
 80014c4:	f7ff fd38 	bl	8000f38 <UartBufferReset>
		  		flag=0;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <main+0x524>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014ce:	e595      	b.n	8000ffc <main+0x44>
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	08008bd4 	.word	0x08008bd4
 80014d8:	20000418 	.word	0x20000418
 80014dc:	20000618 	.word	0x20000618
 80014e0:	08008bec 	.word	0x08008bec
 80014e4:	20000218 	.word	0x20000218
 80014e8:	08008bf8 	.word	0x08008bf8
 80014ec:	08008c10 	.word	0x08008c10
 80014f0:	08008c24 	.word	0x08008c24
 80014f4:	08008c30 	.word	0x08008c30
 80014f8:	08008c4c 	.word	0x08008c4c
 80014fc:	08008c68 	.word	0x08008c68
 8001500:	08008c78 	.word	0x08008c78
 8001504:	08008c94 	.word	0x08008c94

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fe0e 	bl	8008138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <SystemClock_Config+0xd0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <SystemClock_Config+0xd0>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <SystemClock_Config+0xd0>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <SystemClock_Config+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <SystemClock_Config+0xd4>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <SystemClock_Config+0xd4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001564:	2305      	movs	r3, #5
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800157c:	2304      	movs	r3, #4
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001580:	23a8      	movs	r3, #168	; 0xa8
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001584:	2302      	movs	r3, #2
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001588:	2304      	movs	r3, #4
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fff7 	bl	8002584 <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800159c:	f000 f9fc 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	230f      	movs	r3, #15
 80015a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2105      	movs	r1, #5
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fa58 	bl	8002a74 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015ca:	f000 f9e5 	bl	8001998 <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3750      	adds	r7, #80	; 0x50
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <MX_RTC_Init+0xac>)
 80015fa:	4a25      	ldr	r2, [pc, #148]	; (8001690 <MX_RTC_Init+0xb0>)
 80015fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <MX_RTC_Init+0xac>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_RTC_Init+0xac>)
 8001606:	227f      	movs	r2, #127	; 0x7f
 8001608:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_RTC_Init+0xac>)
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_RTC_Init+0xac>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_RTC_Init+0xac>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_RTC_Init+0xac>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001622:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_RTC_Init+0xac>)
 8001624:	f001 fd28 	bl	8003078 <HAL_RTC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 f9b3 	bl	8001998 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001632:	2309      	movs	r3, #9
 8001634:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x54;
 8001636:	2354      	movs	r3, #84	; 0x54
 8001638:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800163a:	2300      	movs	r3, #0
 800163c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2201      	movs	r2, #1
 800164a:	4619      	mov	r1, r3
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_RTC_Init+0xac>)
 800164e:	f001 fd89 	bl	8003164 <HAL_RTC_SetTime>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 f99e 	bl	8001998 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800165c:	2304      	movs	r3, #4
 800165e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8001660:	2308      	movs	r3, #8
 8001662:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 8001664:	2317      	movs	r3, #23
 8001666:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001668:	2323      	movs	r3, #35	; 0x23
 800166a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <MX_RTC_Init+0xac>)
 8001674:	f001 fe6e 	bl	8003354 <HAL_RTC_SetDate>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800167e:	f000 f98b 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000d8 	.word	0x200000d8
 8001690:	40002800 	.word	0x40002800

08001694 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI2_Init+0x64>)
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <MX_SPI2_Init+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016c8:	2210      	movs	r2, #16
 80016ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016e6:	f001 ffc5 	bl	8003674 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016f0:	f000 f952 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200000f8 	.word	0x200000f8
 80016fc:	40003800 	.word	0x40003800

08001700 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_UART5_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_UART5_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_UART5_Init+0x4c>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_UART5_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_UART5_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_UART5_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_UART5_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_UART5_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_UART5_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_UART5_Init+0x4c>)
 8001738:	f002 fbce 	bl	8003ed8 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f929 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000150 	.word	0x20000150
 8001750:	40005000 	.word	0x40005000

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <MX_GPIO_Init+0x100>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a38      	ldr	r2, [pc, #224]	; (8001854 <MX_GPIO_Init+0x100>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <MX_GPIO_Init+0x100>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <MX_GPIO_Init+0x100>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a31      	ldr	r2, [pc, #196]	; (8001854 <MX_GPIO_Init+0x100>)
 8001790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MX_GPIO_Init+0x100>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <MX_GPIO_Init+0x100>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <MX_GPIO_Init+0x100>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MX_GPIO_Init+0x100>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MX_GPIO_Init+0x100>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <MX_GPIO_Init+0x100>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_GPIO_Init+0x100>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_GPIO_Init+0x100>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <MX_GPIO_Init+0x100>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_GPIO_Init+0x100>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fc:	4816      	ldr	r0, [pc, #88]	; (8001858 <MX_GPIO_Init+0x104>)
 80017fe:	f000 fea7 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001808:	4814      	ldr	r0, [pc, #80]	; (800185c <MX_GPIO_Init+0x108>)
 800180a:	f000 fea1 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <MX_GPIO_Init+0x104>)
 8001828:	f000 fcde 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800182c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_GPIO_Init+0x108>)
 8001846:	f000 fccf 	bl	80021e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400
 800185c:	40020c00 	.word	0x40020c00

08001860 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == UART5)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_UART_RxCpltCallback+0x54>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11b      	bne.n	80018aa <HAL_UART_RxCpltCallback+0x4a>
	{
		UART_BUFFER[strlen(UART_BUFFER)] = rx_data[0];
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <HAL_UART_RxCpltCallback+0x58>)
 8001874:	f7fe fcb6 	bl	80001e4 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_UART_RxCpltCallback+0x5c>)
 800187c:	7811      	ldrb	r1, [r2, #0]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_UART_RxCpltCallback+0x58>)
 8001880:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart5, rx_data, 1);
 8001882:	2201      	movs	r2, #1
 8001884:	490d      	ldr	r1, [pc, #52]	; (80018bc <HAL_UART_RxCpltCallback+0x5c>)
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <HAL_UART_RxCpltCallback+0x60>)
 8001888:	f002 fc4a 	bl	8004120 <HAL_UART_Receive_IT>
		if(strstr((char*)UART_BUFFER, "\r\n") !=NULL){
 800188c:	490d      	ldr	r1, [pc, #52]	; (80018c4 <HAL_UART_RxCpltCallback+0x64>)
 800188e:	480a      	ldr	r0, [pc, #40]	; (80018b8 <HAL_UART_RxCpltCallback+0x58>)
 8001890:	f006 fc5a 	bl	8008148 <strstr>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_UART_RxCpltCallback+0x40>
			flag = 1;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_UART_RxCpltCallback+0x68>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart5, "Error", 5, 100);
		HAL_UART_Transmit(&huart5, "\n", 1, 100);
		index = 0;
	}
	*/
	HAL_UART_Receive_IT(&huart5, rx_data,1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	4906      	ldr	r1, [pc, #24]	; (80018bc <HAL_UART_RxCpltCallback+0x5c>)
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_UART_RxCpltCallback+0x60>)
 80018a6:	f002 fc3b 	bl	8004120 <HAL_UART_Receive_IT>
	}
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40005000 	.word	0x40005000
 80018b8:	20000218 	.word	0x20000218
 80018bc:	20000214 	.word	0x20000214
 80018c0:	20000150 	.word	0x20000150
 80018c4:	08008cac 	.word	0x08008cac
 80018c8:	20000618 	.word	0x20000618

080018cc <process_SD_card>:
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void process_SD_card(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  FATFS       FatFs;                //Fatfs handle
  FIL         fil;                  //File handle
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  int x = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80018dc:	f102 0214 	add.w	r2, r2, #20
 80018e0:	6013      	str	r3, [r2, #0]
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80018e2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80018e6:	f103 0318 	add.w	r3, r3, #24
 80018ea:	2201      	movs	r2, #1
 80018ec:	4925      	ldr	r1, [pc, #148]	; (8001984 <process_SD_card+0xb8>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f005 fdf6 	bl	80074e0 <f_mount>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80018fa:	f102 0213 	add.w	r2, r2, #19
 80018fe:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001900:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001904:	f103 0313 	add.w	r3, r3, #19
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d130      	bne.n	8001970 <process_SD_card+0xa4>
      break;
    }


    //Open the file
    fres = f_open(&fil, "log.txt", FA_WRITE | FA_READ | FA_OPEN_APPEND );
 800190e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001912:	3b30      	subs	r3, #48	; 0x30
 8001914:	2233      	movs	r2, #51	; 0x33
 8001916:	491c      	ldr	r1, [pc, #112]	; (8001988 <process_SD_card+0xbc>)
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fe27 	bl	800756c <f_open>
 800191e:	4603      	mov	r3, r0
 8001920:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001924:	f102 0213 	add.w	r2, r2, #19
 8001928:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 800192a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800192e:	f103 0313 	add.w	r3, r3, #19
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11d      	bne.n	8001974 <process_SD_card+0xa8>
      break;
    }

    //printf("Writing data!!!\r\n");
    //write the data
    f_puts(a, &fil);
 8001938:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800193c:	3b30      	subs	r3, #48	; 0x30
 800193e:	4619      	mov	r1, r3
 8001940:	4812      	ldr	r0, [pc, #72]	; (800198c <process_SD_card+0xc0>)
 8001942:	f006 fa92 	bl	8007e6a <f_puts>
    f_puts(date, &fil);
 8001946:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800194a:	3b30      	subs	r3, #48	; 0x30
 800194c:	4619      	mov	r1, r3
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <process_SD_card+0xc4>)
 8001950:	f006 fa8b 	bl	8007e6a <f_puts>
    f_puts(time, &fil);
 8001954:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001958:	3b30      	subs	r3, #48	; 0x30
 800195a:	4619      	mov	r1, r3
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <process_SD_card+0xc8>)
 800195e:	f006 fa84 	bl	8007e6a <f_puts>
    //close your file
    f_close(&fil);
 8001962:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001966:	3b30      	subs	r3, #48	; 0x30
 8001968:	4618      	mov	r0, r3
 800196a:	f006 f9dd 	bl	8007d28 <f_close>
  } while( false );

  //We're done, so de-mount the drive
  //f_mount(NULL, "", 0);
  //printf("SD Card Unmounted Successfully!!!\r\n");
}
 800196e:	e002      	b.n	8001976 <process_SD_card+0xaa>
      break;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <process_SD_card+0xaa>
      break;
 8001974:	bf00      	nop
}
 8001976:	bf00      	nop
 8001978:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	08008cb0 	.word	0x08008cb0
 8001988:	08008cb4 	.word	0x08008cb4
 800198c:	20000418 	.word	0x20000418
 8001990:	200000b8 	.word	0x200000b8
 8001994:	20000098 	.word	0x20000098

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_RTC_MspInit+0x4c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d111      	bne.n	8001a38 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a14:	2302      	movs	r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fa46 	bl	8002eb4 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a2e:	f7ff ffb3 	bl	8001998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RTC_MspInit+0x50>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40002800 	.word	0x40002800
 8001a44:	42470e3c 	.word	0x42470e3c

08001a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <HAL_SPI_MspInit+0xc0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d14a      	bne.n	8001b00 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_SPI_MspInit+0xc4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <HAL_SPI_MspInit+0xc8>)
 8001ada:	f000 fb85 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af0:	2305      	movs	r3, #5
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <HAL_SPI_MspInit+0xcc>)
 8001afc:	f000 fb74 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40003800 	.word	0x40003800
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2c      	ldr	r2, [pc, #176]	; (8001be8 <HAL_UART_MspInit+0xd0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d152      	bne.n	8001be0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_UART_MspInit+0xd4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <HAL_UART_MspInit+0xd8>)
 8001bac:	f000 fb1c 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480a      	ldr	r0, [pc, #40]	; (8001bf4 <HAL_UART_MspInit+0xdc>)
 8001bcc:	f000 fb0c 	bl	80021e8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2035      	movs	r0, #53	; 0x35
 8001bd6:	f000 fa3e 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001bda:	2035      	movs	r0, #53	; 0x35
 8001bdc:	f000 fa57 	bl	800208e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40005000 	.word	0x40005000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020c00 	.word	0x40020c00

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler+0x4>

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <SysTick_Handler+0x34>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <SysTick_Handler+0x18>
		  Timer1--;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <SysTick_Handler+0x34>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <SysTick_Handler+0x34>)
 8001c56:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <SysTick_Handler+0x38>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <SysTick_Handler+0x2c>
		  Timer2--;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Handler+0x38>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <SysTick_Handler+0x38>)
 8001c6a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 f8d4 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000090 	.word	0x20000090
 8001c78:	20000092 	.word	0x20000092

08001c7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <UART5_IRQHandler+0x10>)
 8001c82:	f002 fa7d 	bl	8004180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000150 	.word	0x20000150

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f006 fa58 	bl	8008174 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20020000 	.word	0x20020000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	2000061c 	.word	0x2000061c
 8001cf8:	200009a8 	.word	0x200009a8

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d24:	480d      	ldr	r0, [pc, #52]	; (8001d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d26:	490e      	ldr	r1, [pc, #56]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d3c:	4c0b      	ldr	r4, [pc, #44]	; (8001d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffd7 	bl	8001cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f006 fa17 	bl	8008180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff f931 	bl	8000fb8 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d64:	080091a0 	.word	0x080091a0
  ldr r2, =_sbss
 8001d68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d6c:	200009a8 	.word	0x200009a8

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f94f 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fdfc 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f967 	bl	80020aa <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f92f 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	20000008 	.word	0x20000008

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20000620 	.word	0x20000620

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000620 	.word	0x20000620

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff feb6 	bl	8001e40 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d008      	beq.n	80020f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e052      	b.n	800219a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0216 	bic.w	r2, r2, #22
 8002102:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002112:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <HAL_DMA_Abort+0x62>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0208 	bic.w	r2, r2, #8
 8002132:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002144:	e013      	b.n	800216e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002146:	f7ff fe7b 	bl	8001e40 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b05      	cmp	r3, #5
 8002152:	d90c      	bls.n	800216e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e015      	b.n	800219a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e4      	bne.n	8002146 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	223f      	movs	r2, #63	; 0x3f
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e00c      	b.n	80021da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2205      	movs	r2, #5
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e16b      	b.n	80024dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 815a 	bne.w	80024d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d005      	beq.n	800223a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	2b02      	cmp	r3, #2
 8002238:	d130      	bne.n	800229c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0201 	and.w	r2, r3, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d017      	beq.n	80022d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80b4 	beq.w	80024d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <HAL_GPIO_Init+0x30c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a5f      	ldr	r2, [pc, #380]	; (80024f4 <HAL_GPIO_Init+0x30c>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <HAL_GPIO_Init+0x30c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_GPIO_Init+0x310>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_GPIO_Init+0x314>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02b      	beq.n	800240e <HAL_GPIO_Init+0x226>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_GPIO_Init+0x318>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d025      	beq.n	800240a <HAL_GPIO_Init+0x222>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a50      	ldr	r2, [pc, #320]	; (8002504 <HAL_GPIO_Init+0x31c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_GPIO_Init+0x21e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <HAL_GPIO_Init+0x320>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d019      	beq.n	8002402 <HAL_GPIO_Init+0x21a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_GPIO_Init+0x324>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_GPIO_Init+0x216>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_GPIO_Init+0x328>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_GPIO_Init+0x212>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_GPIO_Init+0x32c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <HAL_GPIO_Init+0x20e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <HAL_GPIO_Init+0x330>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_Init+0x20a>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00e      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x228>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x228>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x228>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x228>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x228>
 800240e:	2300      	movs	r3, #0
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <HAL_GPIO_Init+0x310>)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_GPIO_Init+0x334>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002452:	4a32      	ldr	r2, [pc, #200]	; (800251c <HAL_GPIO_Init+0x334>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_GPIO_Init+0x334>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <HAL_GPIO_Init+0x334>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_GPIO_Init+0x334>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_GPIO_Init+0x334>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_GPIO_Init+0x334>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_GPIO_Init+0x334>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f67f ae90 	bls.w	8002204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021000 	.word	0x40021000
 8002510:	40021400 	.word	0x40021400
 8002514:	40021800 	.word	0x40021800
 8002518:	40021c00 	.word	0x40021c00
 800251c:	40013c00 	.word	0x40013c00

08002520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e001      	b.n	8002542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e267      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d075      	beq.n	800268e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a2:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d00c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d112      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d05b      	beq.n	800268c <HAL_RCC_OscConfig+0x108>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d157      	bne.n	800268c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e242      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d106      	bne.n	80025f8 <HAL_RCC_OscConfig+0x74>
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a75      	ldr	r2, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0xb0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x98>
 8002602:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a6f      	ldr	r2, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b6d      	ldr	r3, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6c      	ldr	r2, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0xb0>
 800261c:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a68      	ldr	r2, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fc00 	bl	8001e40 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff fbfc 	bl	8001e40 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e207      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0xc0>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff fbec 	bl	8001e40 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff fbe8 	bl	8001e40 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1f3      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0xe8>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d063      	beq.n	8002762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x152>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1c7      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e03a      	b.n	8002762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x244>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff fba1 	bl	8001e40 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002702:	f7ff fb9d 	bl	8001e40 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1a8      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4925      	ldr	r1, [pc, #148]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e015      	b.n	8002762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x244>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff fb80 	bl	8001e40 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002744:	f7ff fb7c 	bl	8001e40 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e187      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d036      	beq.n	80027dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCC_OscConfig+0x248>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff fb60 	bl	8001e40 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff fb5c 	bl	8001e40 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e167      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x240>)
 8002798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x200>
 80027a2:	e01b      	b.n	80027dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x248>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fb49 	bl	8001e40 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	e00e      	b.n	80027d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b2:	f7ff fb45 	bl	8001e40 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d907      	bls.n	80027d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e150      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	42470000 	.word	0x42470000
 80027cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b88      	ldr	r3, [pc, #544]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ea      	bne.n	80027b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8097 	beq.w	8002918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b81      	ldr	r3, [pc, #516]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	4b7d      	ldr	r3, [pc, #500]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a7c      	ldr	r2, [pc, #496]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b7a      	ldr	r3, [pc, #488]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b77      	ldr	r3, [pc, #476]	; (80029f8 <HAL_RCC_OscConfig+0x474>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b74      	ldr	r3, [pc, #464]	; (80029f8 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a73      	ldr	r2, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x474>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7ff fb05 	bl	8001e40 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7ff fb01 	bl	8001e40 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e10c      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_OscConfig+0x474>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x2ea>
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a63      	ldr	r2, [pc, #396]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x324>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x30c>
 8002876:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5b      	ldr	r2, [pc, #364]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0x324>
 8002890:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4a57      	ldr	r2, [pc, #348]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
 800289c:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a54      	ldr	r2, [pc, #336]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff fac6 	bl	8001e40 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7ff fac2 	bl	8001e40 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0cb      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ee      	beq.n	80028b8 <HAL_RCC_OscConfig+0x334>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7ff fab0 	bl	8001e40 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7ff faac 	bl	8001e40 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0b5      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ee      	bne.n	80028e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a38      	ldr	r2, [pc, #224]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a1 	beq.w	8002a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	d05c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d141      	bne.n	80029ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_RCC_OscConfig+0x478>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff fa80 	bl	8001e40 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7ff fa7c 	bl	8001e40 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e087      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	491b      	ldr	r1, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x478>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7ff fa55 	bl	8001e40 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299a:	f7ff fa51 	bl	8001e40 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e05c      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x416>
 80029b8:	e054      	b.n	8002a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fa3e 	bl	8001e40 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7ff fa3a 	bl	8001e40 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e045      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x444>
 80029e6:	e03d      	b.n	8002a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e038      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40007000 	.word	0x40007000
 80029fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x4ec>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d121      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d11a      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d111      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0cc      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a88:	4b68      	ldr	r3, [pc, #416]	; (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d90c      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0b8      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac8:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	494d      	ldr	r1, [pc, #308]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d044      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d119      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e07f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b42:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e067      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4934      	ldr	r1, [pc, #208]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b64:	f7ff f96c 	bl	8001e40 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7ff f968 	bl	8001e40 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04f      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 020c 	and.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1eb      	bne.n	8002b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d20c      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e032      	b.n	8002c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4916      	ldr	r1, [pc, #88]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	490e      	ldr	r1, [pc, #56]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bfa:	f000 f821 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	490a      	ldr	r1, [pc, #40]	; (8002c34 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	5ccb      	ldrb	r3, [r1, r3]
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f8cc 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023c00 	.word	0x40023c00
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08008d04 	.word	0x08008d04
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	20000008 	.word	0x20000008

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b094      	sub	sp, #80	; 0x50
 8002c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c50:	2300      	movs	r3, #0
 8002c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c58:	4b79      	ldr	r3, [pc, #484]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d00d      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x40>
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	f200 80e1 	bhi.w	8002e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c72:	e0db      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c78:	e0db      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c7e:	e0d8      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c80:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8002caa:	2300      	movs	r3, #0
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
 8002cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	0159      	lsls	r1, r3, #5
 8002cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc4:	0150      	lsls	r0, r2, #5
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4621      	mov	r1, r4
 8002ccc:	1a51      	subs	r1, r2, r1
 8002cce:	6139      	str	r1, [r7, #16]
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	018b      	lsls	r3, r1, #6
 8002ce8:	4651      	mov	r1, sl
 8002cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cee:	4651      	mov	r1, sl
 8002cf0:	018a      	lsls	r2, r1, #6
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d12:	4690      	mov	r8, r2
 8002d14:	4699      	mov	r9, r3
 8002d16:	4623      	mov	r3, r4
 8002d18:	eb18 0303 	adds.w	r3, r8, r3
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	462b      	mov	r3, r5
 8002d20:	eb49 0303 	adc.w	r3, r9, r3
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d32:	4629      	mov	r1, r5
 8002d34:	024b      	lsls	r3, r1, #9
 8002d36:	4621      	mov	r1, r4
 8002d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	024a      	lsls	r2, r1, #9
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d46:	2200      	movs	r2, #0
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d50:	f7fd faa6 	bl	80002a0 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	e058      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5e:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	2200      	movs	r2, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	4611      	mov	r1, r2
 8002d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d78:	4642      	mov	r2, r8
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	0159      	lsls	r1, r3, #5
 8002d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d8a:	0150      	lsls	r0, r2, #5
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4641      	mov	r1, r8
 8002d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d96:	4649      	mov	r1, r9
 8002d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002db0:	ebb2 040a 	subs.w	r4, r2, sl
 8002db4:	eb63 050b 	sbc.w	r5, r3, fp
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	00eb      	lsls	r3, r5, #3
 8002dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc6:	00e2      	lsls	r2, r4, #3
 8002dc8:	4614      	mov	r4, r2
 8002dca:	461d      	mov	r5, r3
 8002dcc:	4643      	mov	r3, r8
 8002dce:	18e3      	adds	r3, r4, r3
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	eb45 0303 	adc.w	r3, r5, r3
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de6:	4629      	mov	r1, r5
 8002de8:	028b      	lsls	r3, r1, #10
 8002dea:	4621      	mov	r1, r4
 8002dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df0:	4621      	mov	r1, r4
 8002df2:	028a      	lsls	r2, r1, #10
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	61fa      	str	r2, [r7, #28]
 8002e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e04:	f7fd fa4c 	bl	80002a0 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3750      	adds	r7, #80	; 0x50
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	007a1200 	.word	0x007a1200

08002e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e68:	f7ff fff0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0a9b      	lsrs	r3, r3, #10
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08008d14 	.word	0x08008d14

08002e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e90:	f7ff ffdc 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0b5b      	lsrs	r3, r3, #13
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4903      	ldr	r1, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08008d14 	.word	0x08008d14

08002eb4 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d035      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8002edc:	4b62      	ldr	r3, [pc, #392]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8002ee2:	f7fe ffad 	bl	8001e40 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8002ee8:	e008      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8002eea:	f7fe ffa9 	bl	8001e40 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0b0      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8002efc:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	019a      	lsls	r2, r3, #6
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	071b      	lsls	r3, r3, #28
 8002f14:	4955      	ldr	r1, [pc, #340]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8002f1c:	4b52      	ldr	r3, [pc, #328]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8002f22:	f7fe ff8d 	bl	8001e40 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8002f2a:	f7fe ff89 	bl	8001e40 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e090      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8083 	beq.w	800305c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b44      	ldr	r3, [pc, #272]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a43      	ldr	r2, [pc, #268]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3e      	ldr	r2, [pc, #248]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8002f7e:	f7fe ff5f 	bl	8001e40 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8002f84:	e008      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002f86:	f7fe ff5b 	bl	8001e40 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e062      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa4:	4b31      	ldr	r3, [pc, #196]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fac:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
				&& ((tmpreg1)
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d028      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fca:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d114      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8002fea:	f7fe ff29 	bl	8001e40 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002ff0:	e00a      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002ff2:	f7fe ff25 	bl	8001e40 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e02a      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003020:	d10d      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003036:	490d      	ldr	r1, [pc, #52]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
 800303c:	e005      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003044:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003048:	6093      	str	r3, [r2, #8]
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	4905      	ldr	r1, [pc, #20]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	42470068 	.word	0x42470068
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	42470e40 	.word	0x42470e40

08003078 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e066      	b.n	800315c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7f5b      	ldrb	r3, [r3, #29]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe fca8 	bl	80019f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	22ca      	movs	r2, #202	; 0xca
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2253      	movs	r2, #83	; 0x53
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa45 	bl	800354a <RTC_EnterInitMode>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d12c      	bne.n	8003124 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030dc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68d2      	ldr	r2, [r2, #12]
 8003104:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6919      	ldr	r1, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa4c 	bl	80035b8 <RTC_ExitInitMode>
 8003120:	4603      	mov	r3, r0
 8003122:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d113      	bne.n	8003152 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	7f1b      	ldrb	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_RTC_SetTime+0x1c>
 800317c:	2302      	movs	r3, #2
 800317e:	e087      	b.n	8003290 <HAL_RTC_SetTime+0x12c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d126      	bne.n	80031e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa29 	bl	8003602 <RTC_ByteToBcd2>
 80031b0:	4603      	mov	r3, r0
 80031b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa22 	bl	8003602 <RTC_ByteToBcd2>
 80031be:	4603      	mov	r3, r0
 80031c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	789b      	ldrb	r3, [r3, #2]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fa1a 	bl	8003602 <RTC_ByteToBcd2>
 80031ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	78db      	ldrb	r3, [r3, #3]
 80031d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e018      	b.n	8003212 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003200:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003206:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	22ca      	movs	r2, #202	; 0xca
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2253      	movs	r2, #83	; 0x53
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f991 	bl	800354a <RTC_EnterInitMode>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d120      	bne.n	8003274 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800323c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003240:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003250:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6899      	ldr	r1, [r3, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	431a      	orrs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f9a4 	bl	80035b8 <RTC_ExitInitMode>
 8003270:	4603      	mov	r3, r0
 8003272:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	771a      	strb	r2, [r3, #28]

  return status;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}

08003298 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	0d9b      	lsrs	r3, r3, #22
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f98f 	bl	800363c <RTC_Bcd2ToByte>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f986 	bl	800363c <RTC_Bcd2ToByte>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	789b      	ldrb	r3, [r3, #2]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 f97d 	bl	800363c <RTC_Bcd2ToByte>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	7f1b      	ldrb	r3, [r3, #28]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_RTC_SetDate+0x1c>
 800336c:	2302      	movs	r3, #2
 800336e:	e071      	b.n	8003454 <HAL_RTC_SetDate+0x100>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2202      	movs	r2, #2
 800337a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10e      	bne.n	80033a0 <HAL_RTC_SetDate+0x4c>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	f023 0310 	bic.w	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
 8003398:	330a      	adds	r3, #10
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11c      	bne.n	80033e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	78db      	ldrb	r3, [r3, #3]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f929 	bl	8003602 <RTC_ByteToBcd2>
 80033b0:	4603      	mov	r3, r0
 80033b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f922 	bl	8003602 <RTC_ByteToBcd2>
 80033be:	4603      	mov	r3, r0
 80033c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	789b      	ldrb	r3, [r3, #2]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f91a 	bl	8003602 <RTC_ByteToBcd2>
 80033ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e00e      	b.n	80033fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	78db      	ldrb	r3, [r3, #3]
 80033e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	785b      	ldrb	r3, [r3, #1]
 80033ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033ec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80033f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	22ca      	movs	r2, #202	; 0xca
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2253      	movs	r2, #83	; 0x53
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f89b 	bl	800354a <RTC_EnterInitMode>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003428:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800342c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8c2 	bl	80035b8 <RTC_ExitInitMode>
 8003434:	4603      	mov	r3, r0
 8003436:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	771a      	strb	r2, [r3, #28]

  return status;
 8003452:	7cfb      	ldrb	r3, [r7, #19]
}
 8003454:	4618      	mov	r0, r3
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd90      	pop	{r4, r7, pc}

0800345c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800347a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	0c1b      	lsrs	r3, r3, #16
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11a      	bne.n	80034f0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f8bc 	bl	800363c <RTC_Bcd2ToByte>
 80034c4:	4603      	mov	r3, r0
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f8b3 	bl	800363c <RTC_Bcd2ToByte>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	789b      	ldrb	r3, [r3, #2]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f8aa 	bl	800363c <RTC_Bcd2ToByte>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003514:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003516:	f7fe fc93 	bl	8001e40 <HAL_GetTick>
 800351a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800351c:	e009      	b.n	8003532 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800351e:	f7fe fc8f 	bl	8001e40 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352c:	d901      	bls.n	8003532 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e007      	b.n	8003542 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d122      	bne.n	80035ae <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003576:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe fc62 	bl	8001e40 <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800357e:	e00c      	b.n	800359a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003580:	f7fe fc5e 	bl	8001e40 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800358e:	d904      	bls.n	800359a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2204      	movs	r2, #4
 8003594:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <RTC_EnterInitMode+0x64>
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d1e8      	bne.n	8003580 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff89 	bl	80034fa <HAL_RTC_WaitForSynchro>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003610:	e005      	b.n	800361e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	3301      	adds	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	3b0a      	subs	r3, #10
 800361c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d8f6      	bhi.n	8003612 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	b2da      	uxtb	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	4313      	orrs	r3, r2
 800362e:	b2db      	uxtb	r3, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4413      	add	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	b2da      	uxtb	r2, r3
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	4413      	add	r3, r2
 8003666:	b2db      	uxtb	r3, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07b      	b.n	800377e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003696:	d009      	beq.n	80036ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	61da      	str	r2, [r3, #28]
 800369e:	e005      	b.n	80036ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe f9be 	bl	8001a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	ea42 0103 	orr.w	r1, r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0104 	and.w	r1, r3, #4
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	f003 0210 	and.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_SPI_Transmit+0x22>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e126      	b.n	80039f6 <HAL_SPI_Transmit+0x270>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b0:	f7fe fb46 	bl	8001e40 <HAL_GetTick>
 80037b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ca:	e10b      	b.n	80039e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_SPI_Transmit+0x52>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037dc:	e102      	b.n	80039e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	88fa      	ldrh	r2, [r7, #6]
 80037f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	d10f      	bne.n	8003846 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d007      	beq.n	8003864 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386c:	d14b      	bne.n	8003906 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_Transmit+0xf6>
 8003876:	8afb      	ldrh	r3, [r7, #22]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d13e      	bne.n	80038fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038a0:	e02b      	b.n	80038fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d112      	bne.n	80038d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038d4:	e011      	b.n	80038fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d6:	f7fe fab3 	bl	8001e40 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d803      	bhi.n	80038ee <HAL_SPI_Transmit+0x168>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_Transmit+0x16e>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038f8:	e074      	b.n	80039e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ce      	bne.n	80038a2 <HAL_SPI_Transmit+0x11c>
 8003904:	e04c      	b.n	80039a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Transmit+0x18e>
 800390e:	8afb      	ldrh	r3, [r7, #22]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d140      	bne.n	8003996 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800393a:	e02c      	b.n	8003996 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d113      	bne.n	8003972 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003970:	e011      	b.n	8003996 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003972:	f7fe fa65 	bl	8001e40 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d803      	bhi.n	800398a <HAL_SPI_Transmit+0x204>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d102      	bne.n	8003990 <HAL_SPI_Transmit+0x20a>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003994:	e026      	b.n	80039e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1cd      	bne.n	800393c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	6839      	ldr	r1, [r7, #0]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fa55 	bl	8003e54 <SPI_EndRxTxTransaction>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e000      	b.n	80039e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80039e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b08c      	sub	sp, #48	; 0x30
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x26>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e18a      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x33c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2c:	f7fe fa08 	bl	8001e40 <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d00f      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x70>
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a54:	d107      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x68>
 8003a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
 8003a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a6c:	e15b      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x82>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x82>
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a86:	e14e      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d003      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2205      	movs	r2, #5
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	887a      	ldrh	r2, [r7, #2]
 8003abe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d007      	beq.n	8003af0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af8:	d178      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x10a>
 8003b02:	8b7b      	ldrh	r3, [r7, #26]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d166      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2c:	e053      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11b      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x176>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0x176>
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d113      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d119      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x1b8>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d014      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	b292      	uxth	r2, r2
 8003b98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bb6:	f7fe f943 	bl	8001e40 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d807      	bhi.n	8003bd6 <HAL_SPI_TransmitReceive+0x1d8>
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d003      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bd4:	e0a7      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1a6      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x130>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1a1      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x130>
 8003bea:	e07c      	b.n	8003ce6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x1fc>
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d16b      	bne.n	8003cd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c20:	e057      	b.n	8003cd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d11c      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x26c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <HAL_SPI_TransmitReceive+0x26c>
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d114      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d119      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x2ae>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d014      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cac:	f7fe f8c8 	bl	8001e40 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d803      	bhi.n	8003cc4 <HAL_SPI_TransmitReceive+0x2c6>
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x2cc>
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd0:	e029      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1a2      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x224>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d19d      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8b2 	bl	8003e54 <SPI_EndRxTxTransaction>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d02:	e010      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	e000      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3730      	adds	r7, #48	; 0x30
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d54:	f7fe f874 	bl	8001e40 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d64:	f7fe f86c 	bl	8001e40 <HAL_GetTick>
 8003d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	015b      	lsls	r3, r3, #5
 8003d70:	0d1b      	lsrs	r3, r3, #20
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7a:	e054      	b.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d050      	beq.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d84:	f7fe f85c 	bl	8001e40 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13d      	bne.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db2:	d111      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d004      	beq.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc6:	d107      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d10f      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e017      	b.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d19b      	bne.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000004 	.word	0x20000004

08003e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <SPI_EndRxTxTransaction+0x7c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <SPI_EndRxTxTransaction+0x80>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0d5b      	lsrs	r3, r3, #21
 8003e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7e:	d112      	bne.n	8003ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff5a 	bl	8003d44 <SPI_WaitFlagStateUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e00f      	b.n	8003ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d0f2      	beq.n	8003ea6 <SPI_EndRxTxTransaction+0x52>
 8003ec0:	e000      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ec2:	bf00      	nop
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000004 	.word	0x20000004
 8003ed4:	165e9f81 	.word	0x165e9f81

08003ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e03f      	b.n	8003f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fe0a 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fe23 	bl	8004b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b08a      	sub	sp, #40	; 0x28
 8003f76:	af02      	add	r7, sp, #8
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d17c      	bne.n	800408c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_Transmit+0x2c>
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e075      	b.n	800408e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Transmit+0x3e>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e06e      	b.n	800408e <HAL_UART_Transmit+0x11c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2221      	movs	r2, #33	; 0x21
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc6:	f7fd ff3b 	bl	8001e40 <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d108      	bne.n	8003ff4 <HAL_UART_Transmit+0x82>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e003      	b.n	8003ffc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004004:	e02a      	b.n	800405c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fb63 	bl	80046dc <UART_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e036      	b.n	800408e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	3302      	adds	r3, #2
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e007      	b.n	800404e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3301      	adds	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1cf      	bne.n	8004006 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	2140      	movs	r1, #64	; 0x40
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fb33 	bl	80046dc <UART_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d130      	bne.n	8004112 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Transmit_IT+0x26>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e029      	b.n	8004114 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Transmit_IT+0x38>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e022      	b.n	8004114 <HAL_UART_Transmit_IT+0x7e>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2221      	movs	r2, #33	; 0x21
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800410c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b20      	cmp	r3, #32
 8004138:	d11d      	bne.n	8004176 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_UART_Receive_IT+0x26>
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e016      	b.n	8004178 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_UART_Receive_IT+0x38>
 8004154:	2302      	movs	r3, #2
 8004156:	e00f      	b.n	8004178 <HAL_UART_Receive_IT+0x58>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	461a      	mov	r2, r3
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fb23 	bl	80047b8 <UART_Start_Receive_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	e000      	b.n	8004178 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b0ba      	sub	sp, #232	; 0xe8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_UART_IRQHandler+0x66>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fc07 	bl	80049f2 <UART_Receive_IT>
      return;
 80041e4:	e256      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80de 	beq.w	80043ac <HAL_UART_IRQHandler+0x22c>
 80041f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80d1 	beq.w	80043ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_UART_IRQHandler+0xae>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_UART_IRQHandler+0xd2>
 800423a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_UART_IRQHandler+0xf6>
 800425e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d011      	beq.n	80042a6 <HAL_UART_IRQHandler+0x126>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800428e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 81ed 	beq.w	800468a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_UART_IRQHandler+0x14e>
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fb92 	bl	80049f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <HAL_UART_IRQHandler+0x17a>
 80042f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04f      	beq.n	800439a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa9a 	bl	8004834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d141      	bne.n	8004392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800433a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1d9      	bne.n	800430e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d013      	beq.n	800438a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	4a7d      	ldr	r2, [pc, #500]	; (800455c <HAL_UART_IRQHandler+0x3dc>)
 8004368:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	4618      	mov	r0, r3
 8004370:	f7fd ff17 	bl	80021a2 <HAL_DMA_Abort_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004384:	4610      	mov	r0, r2
 8004386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	e00e      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f990 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e00a      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f98c 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e006      	b.n	80043a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f988 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043a6:	e170      	b.n	800468a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	bf00      	nop
    return;
 80043aa:	e16e      	b.n	800468a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 814a 	bne.w	800464a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8143 	beq.w	800464a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 813c 	beq.w	800464a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	f040 80b4 	bne.w	8004560 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8140 	beq.w	800468e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004416:	429a      	cmp	r2, r3
 8004418:	f080 8139 	bcs.w	800468e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004422:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	f000 8088 	beq.w	8004542 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800444c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800445e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800446a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1d9      	bne.n	8004432 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800448e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e1      	bne.n	800447e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004512:	f023 0310 	bic.w	r3, r3, #16
 8004516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004524:	65ba      	str	r2, [r7, #88]	; 0x58
 8004526:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800452a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e3      	bne.n	8004500 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd fdc0 	bl	80020c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800454a:	b29b      	uxth	r3, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8b6 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004558:	e099      	b.n	800468e <HAL_UART_IRQHandler+0x50e>
 800455a:	bf00      	nop
 800455c:	080048fb 	.word	0x080048fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004568:	b29b      	uxth	r3, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 808b 	beq.w	8004692 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800457c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8086 	beq.w	8004692 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045aa:	647a      	str	r2, [r7, #68]	; 0x44
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e3      	bne.n	8004586 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3314      	adds	r3, #20
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	623b      	str	r3, [r7, #32]
   return(result);
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045e2:	633a      	str	r2, [r7, #48]	; 0x30
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e3      	bne.n	80045be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60fb      	str	r3, [r7, #12]
   return(result);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	330c      	adds	r3, #12
 8004624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004628:	61fa      	str	r2, [r7, #28]
 800462a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	617b      	str	r3, [r7, #20]
   return(result);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e3      	bne.n	8004604 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800463c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004640:	4619      	mov	r1, r3
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f83e 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004648:	e023      	b.n	8004692 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_UART_IRQHandler+0x4ea>
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f95d 	bl	8004922 <UART_Transmit_IT>
    return;
 8004668:	e014      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <HAL_UART_IRQHandler+0x514>
 8004676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f99d 	bl	80049c2 <UART_EndTransmit_IT>
    return;
 8004688:	e004      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
    return;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
      return;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_UART_IRQHandler+0x514>
      return;
 8004692:	bf00      	nop
  }
}
 8004694:	37e8      	adds	r7, #232	; 0xe8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop

0800469c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b090      	sub	sp, #64	; 0x40
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ec:	e050      	b.n	8004790 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d04c      	beq.n	8004790 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <UART_WaitOnFlagUntilTimeout+0x30>
 80046fc:	f7fd fba0 	bl	8001e40 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004708:	429a      	cmp	r2, r3
 800470a:	d241      	bcs.n	8004790 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472c:	637a      	str	r2, [r7, #52]	; 0x34
 800472e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	613b      	str	r3, [r7, #16]
   return(result);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	63bb      	str	r3, [r7, #56]	; 0x38
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004760:	623a      	str	r2, [r7, #32]
 8004762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	69f9      	ldr	r1, [r7, #28]
 8004766:	6a3a      	ldr	r2, [r7, #32]
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	61bb      	str	r3, [r7, #24]
   return(result);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e00f      	b.n	80047b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4013      	ands	r3, r2
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d09f      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3740      	adds	r7, #64	; 0x40
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2222      	movs	r2, #34	; 0x22
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004804:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0220 	orr.w	r2, r2, #32
 8004824:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b095      	sub	sp, #84	; 0x54
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485c:	643a      	str	r2, [r7, #64]	; 0x40
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	64bb      	str	r3, [r7, #72]	; 0x48
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3314      	adds	r3, #20
 800488e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d119      	bne.n	80048e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048cc:	61ba      	str	r2, [r7, #24]
 80048ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6979      	ldr	r1, [r7, #20]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	613b      	str	r3, [r7, #16]
   return(result);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048ee:	bf00      	nop
 80048f0:	3754      	adds	r7, #84	; 0x54
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fecb 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b21      	cmp	r3, #33	; 0x21
 8004934:	d13e      	bne.n	80049b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493e:	d114      	bne.n	800496a <UART_Transmit_IT+0x48>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d110      	bne.n	800496a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	1c9a      	adds	r2, r3, #2
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	621a      	str	r2, [r3, #32]
 8004968:	e008      	b.n	800497c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	1c59      	adds	r1, r3, #1
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6211      	str	r1, [r2, #32]
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29b      	uxth	r3, r3
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	4619      	mov	r1, r3
 800498a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800499e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe5a 	bl	800469c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b08c      	sub	sp, #48	; 0x30
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b22      	cmp	r3, #34	; 0x22
 8004a04:	f040 80ab 	bne.w	8004b5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a10:	d117      	bne.n	8004a42 <UART_Receive_IT+0x50>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d113      	bne.n	8004a42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a40:	e026      	b.n	8004a90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d007      	beq.n	8004a66 <UART_Receive_IT+0x74>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <UART_Receive_IT+0x82>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e008      	b.n	8004a86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d15a      	bne.n	8004b5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0220 	bic.w	r2, r2, #32
 8004ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d135      	bne.n	8004b50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f023 0310 	bic.w	r3, r3, #16
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	623a      	str	r2, [r7, #32]
 8004b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	69f9      	ldr	r1, [r7, #28]
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d10a      	bne.n	8004b42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fdbb 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
 8004b4e:	e002      	b.n	8004b56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fc fe85 	bl	8001860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e002      	b.n	8004b60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
  }
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3730      	adds	r7, #48	; 0x30
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b0c0      	sub	sp, #256	; 0x100
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	ea40 0301 	orr.w	r3, r0, r1
 8004b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc0:	f021 010c 	bic.w	r1, r1, #12
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	6999      	ldr	r1, [r3, #24]
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	ea40 0301 	orr.w	r3, r0, r1
 8004bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <UART_SetConfig+0x2cc>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d005      	beq.n	8004c08 <UART_SetConfig+0xa0>
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <UART_SetConfig+0x2d0>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d104      	bne.n	8004c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe f940 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
 8004c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fe f927 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8004c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	f040 810c 	bne.w	8004e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c42:	415b      	adcs	r3, r3
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	eb12 0801 	adds.w	r8, r2, r1
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb43 0901 	adc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb49 0303 	adc.w	r3, r9, r3
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c96:	460b      	mov	r3, r1
 8004c98:	18db      	adds	r3, r3, r3
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cac:	f7fb faf8 	bl	80002a0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d00:	4692      	mov	sl, r2
 8004d02:	469b      	mov	fp, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	eb1a 0303 	adds.w	r3, sl, r3
 8004d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb4b 0303 	adc.w	r3, fp, r3
 8004d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d42:	f7fb faad 	bl	80002a0 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2264      	movs	r2, #100	; 0x64
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d64:	fba3 2302 	umull	r2, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d70:	441c      	add	r4, r3
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6339      	str	r1, [r7, #48]	; 0x30
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc8:	464b      	mov	r3, r9
 8004dca:	460a      	mov	r2, r1
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de8:	460b      	mov	r3, r1
 8004dea:	18db      	adds	r3, r3, r3
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	4613      	mov	r3, r2
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dfe:	f7fb fa4f 	bl	80002a0 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e08:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2164      	movs	r1, #100	; 0x64
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	3332      	adds	r3, #50	; 0x32
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	f003 0207 	and.w	r2, r3, #7
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4422      	add	r2, r4
 8004e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e30:	e106      	b.n	8005040 <UART_SetConfig+0x4d8>
 8004e32:	bf00      	nop
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	6239      	str	r1, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	4641      	mov	r1, r8
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0501 	adc.w	r5, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	00eb      	lsls	r3, r5, #3
 8004e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7a:	00e2      	lsls	r2, r4, #3
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	4643      	mov	r3, r8
 8004e82:	18e3      	adds	r3, r4, r3
 8004e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e88:	464b      	mov	r3, r9
 8004e8a:	eb45 0303 	adc.w	r3, r5, r3
 8004e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eae:	4629      	mov	r1, r5
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb8:	4621      	mov	r1, r4
 8004eba:	008a      	lsls	r2, r1, #2
 8004ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ec0:	f7fb f9ee 	bl	80002a0 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4b60      	ldr	r3, [pc, #384]	; (800504c <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	011c      	lsls	r4, r3, #4
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	61b9      	str	r1, [r7, #24]
 8004eec:	415b      	adcs	r3, r3
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6139      	str	r1, [r7, #16]
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	008b      	lsls	r3, r1, #2
 8004f50:	4641      	mov	r1, r8
 8004f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f56:	4641      	mov	r1, r8
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f5e:	f7fb f99f 	bl	80002a0 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <UART_SetConfig+0x4e4>)
 8004f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2264      	movs	r2, #100	; 0x64
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	1acb      	subs	r3, r1, r3
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	3332      	adds	r3, #50	; 0x32
 8004f7c:	4a33      	ldr	r2, [pc, #204]	; (800504c <UART_SetConfig+0x4e4>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f88:	441c      	add	r4, r3
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	673b      	str	r3, [r7, #112]	; 0x70
 8004f92:	677a      	str	r2, [r7, #116]	; 0x74
 8004f94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f98:	4642      	mov	r2, r8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa8:	4641      	mov	r1, r8
 8004faa:	1851      	adds	r1, r2, r1
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	4649      	mov	r1, r9
 8004fb0:	414b      	adcs	r3, r1
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	00cb      	lsls	r3, r1, #3
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fca:	4651      	mov	r1, sl
 8004fcc:	00ca      	lsls	r2, r1, #3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fda:	464b      	mov	r3, r9
 8004fdc:	460a      	mov	r2, r1
 8004fde:	eb42 0303 	adc.w	r3, r2, r3
 8004fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	663b      	str	r3, [r7, #96]	; 0x60
 8004fee:	667a      	str	r2, [r7, #100]	; 0x64
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	008b      	lsls	r3, r1, #2
 8005000:	4641      	mov	r1, r8
 8005002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005006:	4641      	mov	r1, r8
 8005008:	008a      	lsls	r2, r1, #2
 800500a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800500e:	f7fb f947 	bl	80002a0 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <UART_SetConfig+0x4e4>)
 8005018:	fba3 1302 	umull	r1, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	2164      	movs	r1, #100	; 0x64
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	3332      	adds	r3, #50	; 0x32
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <UART_SetConfig+0x4e4>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4422      	add	r2, r4
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504c:	51eb851f 	.word	0x51eb851f

08005050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <MX_FATFS_Init+0x18>)
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <MX_FATFS_Init+0x1c>)
 8005058:	f002 ff78 	bl	8007f4c <FATFS_LinkDriver>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <MX_FATFS_Init+0x20>)
 8005062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000628 	.word	0x20000628
 800506c:	20000010 	.word	0x20000010
 8005070:	20000624 	.word	0x20000624

08005074 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005078:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fb fc3b 	bl	800090c <SD_disk_initialize>
 8005096:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fb fd13 	bl	8000ad8 <SD_disk_status>
 80050b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80050cc:	7bf8      	ldrb	r0, [r7, #15]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	f7fb fd16 	bl	8000b04 <SD_disk_read>
 80050d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80050f2:	7bf8      	ldrb	r0, [r7, #15]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	f7fb fd6d 	bl	8000bd8 <SD_disk_write>
 80050fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	603a      	str	r2, [r7, #0]
 8005112:	71fb      	strb	r3, [r7, #7]
 8005114:	460b      	mov	r3, r1
 8005116:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	  return SD_disk_ioctl(pdrv, cmd, buff);
 8005118:	79b9      	ldrb	r1, [r7, #6]
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fdde 	bl	8000ce0 <SD_disk_ioctl>
 8005124:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <disk_status+0x30>)
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	79fa      	ldrb	r2, [r7, #7]
 8005148:	4905      	ldr	r1, [pc, #20]	; (8005160 <disk_status+0x30>)
 800514a:	440a      	add	r2, r1
 800514c:	7a12      	ldrb	r2, [r2, #8]
 800514e:	4610      	mov	r0, r2
 8005150:	4798      	blx	r3
 8005152:	4603      	mov	r3, r0
 8005154:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000854 	.word	0x20000854

08005164 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <disk_initialize+0x48>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d111      	bne.n	80051a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <disk_initialize+0x48>)
 8005180:	2101      	movs	r1, #1
 8005182:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <disk_initialize+0x48>)
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	79fa      	ldrb	r2, [r7, #7]
 8005192:	4906      	ldr	r1, [pc, #24]	; (80051ac <disk_initialize+0x48>)
 8005194:	440a      	add	r2, r1
 8005196:	7a12      	ldrb	r2, [r2, #8]
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000854 	.word	0x20000854

080051b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <disk_read+0x3c>)
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	689c      	ldr	r4, [r3, #8]
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	4a07      	ldr	r2, [pc, #28]	; (80051ec <disk_read+0x3c>)
 80051d0:	4413      	add	r3, r2
 80051d2:	7a18      	ldrb	r0, [r3, #8]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	47a0      	blx	r4
 80051dc:	4603      	mov	r3, r0
 80051de:	75fb      	strb	r3, [r7, #23]
  return res;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd90      	pop	{r4, r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000854 	.word	0x20000854

080051f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <disk_write+0x3c>)
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68dc      	ldr	r4, [r3, #12]
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	4a07      	ldr	r2, [pc, #28]	; (800522c <disk_write+0x3c>)
 8005210:	4413      	add	r3, r2
 8005212:	7a18      	ldrb	r0, [r3, #8]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	47a0      	blx	r4
 800521c:	4603      	mov	r3, r0
 800521e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
}
 8005222:	4618      	mov	r0, r3
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bd90      	pop	{r4, r7, pc}
 800522a:	bf00      	nop
 800522c:	20000854 	.word	0x20000854

08005230 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	603a      	str	r2, [r7, #0]
 800523a:	71fb      	strb	r3, [r7, #7]
 800523c:	460b      	mov	r3, r1
 800523e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <disk_ioctl+0x38>)
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	79fa      	ldrb	r2, [r7, #7]
 800524e:	4906      	ldr	r1, [pc, #24]	; (8005268 <disk_ioctl+0x38>)
 8005250:	440a      	add	r2, r1
 8005252:	7a10      	ldrb	r0, [r2, #8]
 8005254:	79b9      	ldrb	r1, [r7, #6]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4798      	blx	r3
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
  return res;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000854 	.word	0x20000854

0800526c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3301      	adds	r3, #1
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	b21a      	sxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	b21b      	sxth	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	b21b      	sxth	r3, r3
 800528c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800528e:	89fb      	ldrh	r3, [r7, #14]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3303      	adds	r3, #3
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	3202      	adds	r2, #2
 80052b4:	7812      	ldrb	r2, [r2, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	3201      	adds	r2, #1
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	887a      	ldrh	r2, [r7, #2]
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	1c53      	adds	r3, r2, #1
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	6179      	str	r1, [r7, #20]
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3b01      	subs	r3, #1
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f1      	bne.n	800538a <mem_cpy+0x1a>
	}
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80053b2:	b480      	push	{r7}
 80053b4:	b087      	sub	sp, #28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	617a      	str	r2, [r7, #20]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f3      	bne.n	80053c2 <mem_set+0x10>
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	61fa      	str	r2, [r7, #28]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4619      	mov	r1, r3
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	61ba      	str	r2, [r7, #24]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	1acb      	subs	r3, r1, r3
 8005414:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3b01      	subs	r3, #1
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <mem_cmp+0x40>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0eb      	beq.n	8005400 <mem_cmp+0x18>

	return r;
 8005428:	697b      	ldr	r3, [r7, #20]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3724      	adds	r7, #36	; 0x24
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005440:	e002      	b.n	8005448 <chk_chr+0x12>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3301      	adds	r3, #1
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <chk_chr+0x26>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4293      	cmp	r3, r2
 800545a:	d1f2      	bne.n	8005442 <chk_chr+0xc>
	return *str;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	781b      	ldrb	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e029      	b.n	80054d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005480:	4a27      	ldr	r2, [pc, #156]	; (8005520 <chk_lock+0xb4>)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	4413      	add	r3, r2
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01d      	beq.n	80054ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800548e:	4a24      	ldr	r2, [pc, #144]	; (8005520 <chk_lock+0xb4>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	4413      	add	r3, r2
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d116      	bne.n	80054ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054a0:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <chk_lock+0xb4>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d10c      	bne.n	80054ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <chk_lock+0xb4>)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	4413      	add	r3, r2
 80054bc:	3308      	adds	r3, #8
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d102      	bne.n	80054ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054c8:	e007      	b.n	80054da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d9d2      	bls.n	8005480 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d109      	bne.n	80054f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <chk_lock+0x80>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d101      	bne.n	80054f0 <chk_lock+0x84>
 80054ec:	2300      	movs	r3, #0
 80054ee:	e010      	b.n	8005512 <chk_lock+0xa6>
 80054f0:	2312      	movs	r3, #18
 80054f2:	e00e      	b.n	8005512 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <chk_lock+0xa0>
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <chk_lock+0xb4>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4413      	add	r3, r2
 8005502:	330c      	adds	r3, #12
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550a:	d101      	bne.n	8005510 <chk_lock+0xa4>
 800550c:	2310      	movs	r3, #16
 800550e:	e000      	b.n	8005512 <chk_lock+0xa6>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000634 	.word	0x20000634

08005524 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800552a:	2300      	movs	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	e002      	b.n	8005536 <enq_lock+0x12>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3301      	adds	r3, #1
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d806      	bhi.n	800554a <enq_lock+0x26>
 800553c:	4a09      	ldr	r2, [pc, #36]	; (8005564 <enq_lock+0x40>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	4413      	add	r3, r2
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f2      	bne.n	8005530 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b02      	cmp	r3, #2
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000634 	.word	0x20000634

08005568 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e01f      	b.n	80055b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005578:	4a41      	ldr	r2, [pc, #260]	; (8005680 <inc_lock+0x118>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d113      	bne.n	80055b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800558a:	4a3d      	ldr	r2, [pc, #244]	; (8005680 <inc_lock+0x118>)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800559a:	429a      	cmp	r2, r3
 800559c:	d109      	bne.n	80055b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800559e:	4a38      	ldr	r2, [pc, #224]	; (8005680 <inc_lock+0x118>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	4413      	add	r3, r2
 80055a6:	3308      	adds	r3, #8
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d006      	beq.n	80055c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d9dc      	bls.n	8005578 <inc_lock+0x10>
 80055be:	e000      	b.n	80055c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80055c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d132      	bne.n	800562e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e002      	b.n	80055d4 <inc_lock+0x6c>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d806      	bhi.n	80055e8 <inc_lock+0x80>
 80055da:	4a29      	ldr	r2, [pc, #164]	; (8005680 <inc_lock+0x118>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	4413      	add	r3, r2
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f2      	bne.n	80055ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d101      	bne.n	80055f2 <inc_lock+0x8a>
 80055ee:	2300      	movs	r3, #0
 80055f0:	e040      	b.n	8005674 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4922      	ldr	r1, [pc, #136]	; (8005680 <inc_lock+0x118>)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	440b      	add	r3, r1
 80055fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	491e      	ldr	r1, [pc, #120]	; (8005680 <inc_lock+0x118>)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	440b      	add	r3, r1
 800560c:	3304      	adds	r3, #4
 800560e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	491a      	ldr	r1, [pc, #104]	; (8005680 <inc_lock+0x118>)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	440b      	add	r3, r1
 800561c:	3308      	adds	r3, #8
 800561e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <inc_lock+0x118>)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	4413      	add	r3, r2
 8005628:	330c      	adds	r3, #12
 800562a:	2200      	movs	r2, #0
 800562c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <inc_lock+0xe0>
 8005634:	4a12      	ldr	r2, [pc, #72]	; (8005680 <inc_lock+0x118>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4413      	add	r3, r2
 800563c:	330c      	adds	r3, #12
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <inc_lock+0xe0>
 8005644:	2300      	movs	r3, #0
 8005646:	e015      	b.n	8005674 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d108      	bne.n	8005660 <inc_lock+0xf8>
 800564e:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <inc_lock+0x118>)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	4413      	add	r3, r2
 8005656:	330c      	adds	r3, #12
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	e001      	b.n	8005664 <inc_lock+0xfc>
 8005660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005664:	4906      	ldr	r1, [pc, #24]	; (8005680 <inc_lock+0x118>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	440b      	add	r3, r1
 800566c:	330c      	adds	r3, #12
 800566e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000634 	.word	0x20000634

08005684 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d825      	bhi.n	80056e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <dec_lock+0x74>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	4413      	add	r3, r2
 80056a0:	330c      	adds	r3, #12
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ac:	d101      	bne.n	80056b2 <dec_lock+0x2e>
 80056ae:	2300      	movs	r3, #0
 80056b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80056b2:	89fb      	ldrh	r3, [r7, #14]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <dec_lock+0x3a>
 80056b8:	89fb      	ldrh	r3, [r7, #14]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80056be:	4a0e      	ldr	r2, [pc, #56]	; (80056f8 <dec_lock+0x74>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	4413      	add	r3, r2
 80056c6:	330c      	adds	r3, #12
 80056c8:	89fa      	ldrh	r2, [r7, #14]
 80056ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056cc:	89fb      	ldrh	r3, [r7, #14]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <dec_lock+0x5a>
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <dec_lock+0x74>)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	4413      	add	r3, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	737b      	strb	r3, [r7, #13]
 80056e2:	e001      	b.n	80056e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80056e4:	2302      	movs	r3, #2
 80056e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80056e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000634 	.word	0x20000634

080056fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e010      	b.n	800572c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800570a:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <clear_lock+0x44>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	4413      	add	r3, r2
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d105      	bne.n	8005726 <clear_lock+0x2a>
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <clear_lock+0x44>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d9eb      	bls.n	800570a <clear_lock+0xe>
	}
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000634 	.word	0x20000634

08005744 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d034      	beq.n	80057c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7858      	ldrb	r0, [r3, #1]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005768:	2301      	movs	r3, #1
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	f7ff fd40 	bl	80051f0 <disk_write>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e022      	b.n	80057c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	429a      	cmp	r2, r3
 8005790:	d217      	bcs.n	80057c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	789b      	ldrb	r3, [r3, #2]
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	e010      	b.n	80057bc <sync_window+0x78>
					wsect += fs->fsize;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7858      	ldrb	r0, [r3, #1]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057ae:	2301      	movs	r3, #1
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	f7ff fd1d 	bl	80051f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d8eb      	bhi.n	800579a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d01b      	beq.n	800581c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ffad 	bl	8005744 <sync_window>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d113      	bne.n	800581c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	7858      	ldrb	r0, [r3, #1]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057fe:	2301      	movs	r3, #1
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	f7ff fcd5 	bl	80051b0 <disk_read>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff87 	bl	8005744 <sync_window>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d159      	bne.n	80058f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d149      	bne.n	80058dc <sync_fs+0xb4>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	791b      	ldrb	r3, [r3, #4]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d145      	bne.n	80058dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	899b      	ldrh	r3, [r3, #12]
 800585a:	461a      	mov	r2, r3
 800585c:	2100      	movs	r1, #0
 800585e:	f7ff fda8 	bl	80053b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3338      	adds	r3, #56	; 0x38
 8005866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800586a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fd37 	bl	80052e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3338      	adds	r3, #56	; 0x38
 8005878:	4921      	ldr	r1, [pc, #132]	; (8005900 <sync_fs+0xd8>)
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fd4c 	bl	8005318 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3338      	adds	r3, #56	; 0x38
 8005884:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005888:	491e      	ldr	r1, [pc, #120]	; (8005904 <sync_fs+0xdc>)
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fd44 	bl	8005318 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3338      	adds	r3, #56	; 0x38
 8005894:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7ff fd3a 	bl	8005318 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3338      	adds	r3, #56	; 0x38
 80058a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7ff fd30 	bl	8005318 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	7858      	ldrb	r0, [r3, #1]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d0:	2301      	movs	r3, #1
 80058d2:	f7ff fc8d 	bl	80051f0 <disk_write>
			fs->fsi_flag = 0;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fca3 	bl	8005230 <disk_ioctl>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <sync_fs+0xcc>
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	41615252 	.word	0x41615252
 8005904:	61417272 	.word	0x61417272

08005908 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3b02      	subs	r3, #2
 8005916:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	3b02      	subs	r3, #2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d301      	bcc.n	8005928 <clust2sect+0x20>
 8005924:	2300      	movs	r3, #0
 8005926:	e008      	b.n	800593a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	895b      	ldrh	r3, [r3, #10]
 800592c:	461a      	mov	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	fb03 f202 	mul.w	r2, r3, r2
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	4413      	add	r3, r2
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d904      	bls.n	8005966 <get_fat+0x20>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d302      	bcc.n	800596c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e0bb      	b.n	8005ae4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800596c:	f04f 33ff 	mov.w	r3, #4294967295
 8005970:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b03      	cmp	r3, #3
 8005978:	f000 8083 	beq.w	8005a82 <get_fat+0x13c>
 800597c:	2b03      	cmp	r3, #3
 800597e:	f300 80a7 	bgt.w	8005ad0 <get_fat+0x18a>
 8005982:	2b01      	cmp	r3, #1
 8005984:	d002      	beq.n	800598c <get_fat+0x46>
 8005986:	2b02      	cmp	r3, #2
 8005988:	d056      	beq.n	8005a38 <get_fat+0xf2>
 800598a:	e0a1      	b.n	8005ad0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	899b      	ldrh	r3, [r3, #12]
 80059a2:	4619      	mov	r1, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059aa:	4413      	add	r3, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	6938      	ldr	r0, [r7, #16]
 80059b0:	f7ff ff0c 	bl	80057cc <move_window>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 808d 	bne.w	8005ad6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	60fa      	str	r2, [r7, #12]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	8992      	ldrh	r2, [r2, #12]
 80059c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80059ca:	fb01 f202 	mul.w	r2, r1, r2
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4413      	add	r3, r2
 80059d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	899b      	ldrh	r3, [r3, #12]
 80059e2:	4619      	mov	r1, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ea:	4413      	add	r3, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	6938      	ldr	r0, [r7, #16]
 80059f0:	f7ff feec 	bl	80057cc <move_window>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d16f      	bne.n	8005ada <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	899b      	ldrh	r3, [r3, #12]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a06:	fb01 f202 	mul.w	r2, r1, r2
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <get_fat+0xe8>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	e002      	b.n	8005a34 <get_fat+0xee>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	617b      	str	r3, [r7, #20]
			break;
 8005a36:	e055      	b.n	8005ae4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	899b      	ldrh	r3, [r3, #12]
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4619      	mov	r1, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6938      	ldr	r0, [r7, #16]
 8005a52:	f7ff febb 	bl	80057cc <move_window>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d140      	bne.n	8005ade <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	8992      	ldrh	r2, [r2, #12]
 8005a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a6e:	fb00 f202 	mul.w	r2, r0, r2
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	440b      	add	r3, r1
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fbf8 	bl	800526c <ld_word>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	617b      	str	r3, [r7, #20]
			break;
 8005a80:	e030      	b.n	8005ae4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	899b      	ldrh	r3, [r3, #12]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a96:	4413      	add	r3, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6938      	ldr	r0, [r7, #16]
 8005a9c:	f7ff fe96 	bl	80057cc <move_window>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11d      	bne.n	8005ae2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	8992      	ldrh	r2, [r2, #12]
 8005ab4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ab8:	fb00 f202 	mul.w	r2, r0, r2
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	440b      	add	r3, r1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fbeb 	bl	800529c <ld_dword>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005acc:	617b      	str	r3, [r7, #20]
			break;
 8005ace:	e009      	b.n	8005ae4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e006      	b.n	8005ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ae2:	bf00      	nop
		}
	}

	return val;
 8005ae4:	697b      	ldr	r3, [r7, #20]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005aee:	b590      	push	{r4, r7, lr}
 8005af0:	b089      	sub	sp, #36	; 0x24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005afa:	2302      	movs	r3, #2
 8005afc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f240 8109 	bls.w	8005d18 <put_fat+0x22a>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	f080 8103 	bcs.w	8005d18 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	f000 80b6 	beq.w	8005c88 <put_fat+0x19a>
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	f300 80fb 	bgt.w	8005d18 <put_fat+0x22a>
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d003      	beq.n	8005b2e <put_fat+0x40>
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	f000 8083 	beq.w	8005c32 <put_fat+0x144>
 8005b2c:	e0f4      	b.n	8005d18 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4413      	add	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	899b      	ldrh	r3, [r3, #12]
 8005b44:	4619      	mov	r1, r3
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff fe3b 	bl	80057cc <move_window>
 8005b56:	4603      	mov	r3, r0
 8005b58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b5a:	7ffb      	ldrb	r3, [r7, #31]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 80d4 	bne.w	8005d0a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	61ba      	str	r2, [r7, #24]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	8992      	ldrh	r2, [r2, #12]
 8005b72:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b76:	fb00 f202 	mul.w	r2, r0, r2
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <put_fat+0xb8>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	b25a      	sxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b25b      	sxtb	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	e001      	b.n	8005baa <put_fat+0xbc>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	899b      	ldrh	r3, [r3, #12]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fdff 	bl	80057cc <move_window>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 809a 	bne.w	8005d0e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	899b      	ldrh	r3, [r3, #12]
 8005be4:	461a      	mov	r2, r3
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bec:	fb00 f202 	mul.w	r2, r0, r2
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <put_fat+0x11a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e00e      	b.n	8005c26 <put_fat+0x138>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	f023 030f 	bic.w	r3, r3, #15
 8005c12:	b25a      	sxtb	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	4313      	orrs	r3, r2
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	70da      	strb	r2, [r3, #3]
			break;
 8005c30:	e072      	b.n	8005d18 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	899b      	ldrh	r3, [r3, #12]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c46:	4413      	add	r3, r2
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff fdbe 	bl	80057cc <move_window>
 8005c50:	4603      	mov	r3, r0
 8005c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c54:	7ffb      	ldrb	r3, [r7, #31]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d15b      	bne.n	8005d12 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	8992      	ldrh	r2, [r2, #12]
 8005c68:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c6c:	fb00 f202 	mul.w	r2, r0, r2
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	440b      	add	r3, r1
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	b292      	uxth	r2, r2
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fb31 	bl	80052e2 <st_word>
			fs->wflag = 1;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	70da      	strb	r2, [r3, #3]
			break;
 8005c86:	e047      	b.n	8005d18 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	899b      	ldrh	r3, [r3, #12]
 8005c90:	089b      	lsrs	r3, r3, #2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c9c:	4413      	add	r3, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff fd93 	bl	80057cc <move_window>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d132      	bne.n	8005d16 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	8992      	ldrh	r2, [r2, #12]
 8005cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc8:	fb00 f202 	mul.w	r2, r0, r2
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	440b      	add	r3, r1
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fae3 	bl	800529c <ld_dword>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cdc:	4323      	orrs	r3, r4
 8005cde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	8992      	ldrh	r2, [r2, #12]
 8005cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cf2:	fb00 f202 	mul.w	r2, r0, r2
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fb0b 	bl	8005318 <st_dword>
			fs->wflag = 1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	70da      	strb	r2, [r3, #3]
			break;
 8005d08:	e006      	b.n	8005d18 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d0a:	bf00      	nop
 8005d0c:	e004      	b.n	8005d18 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d0e:	bf00      	nop
 8005d10:	e002      	b.n	8005d18 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d16:	bf00      	nop
		}
	}
	return res;
 8005d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd90      	pop	{r4, r7, pc}

08005d22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b088      	sub	sp, #32
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d904      	bls.n	8005d48 <remove_chain+0x26>
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d301      	bcc.n	8005d4c <remove_chain+0x2a>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e04b      	b.n	8005de4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	69b8      	ldr	r0, [r7, #24]
 8005d5a:	f7ff fec8 	bl	8005aee <put_fat>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <remove_chain+0x4a>
 8005d68:	7ffb      	ldrb	r3, [r7, #31]
 8005d6a:	e03b      	b.n	8005de4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff fde9 	bl	8005946 <get_fat>
 8005d74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d031      	beq.n	8005de0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <remove_chain+0x64>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e02e      	b.n	8005de4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d101      	bne.n	8005d92 <remove_chain+0x70>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e028      	b.n	8005de4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d92:	2200      	movs	r2, #0
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	69b8      	ldr	r0, [r7, #24]
 8005d98:	f7ff fea9 	bl	8005aee <put_fat>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005da0:	7ffb      	ldrb	r3, [r7, #31]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <remove_chain+0x88>
 8005da6:	7ffb      	ldrb	r3, [r7, #31]
 8005da8:	e01c      	b.n	8005de4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	3b02      	subs	r3, #2
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d20b      	bcs.n	8005dd0 <remove_chain+0xae>
			fs->free_clst++;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	791b      	ldrb	r3, [r3, #4]
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3c6      	bcc.n	8005d6c <remove_chain+0x4a>
 8005dde:	e000      	b.n	8005de2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005de0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <create_chain+0x2c>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d31b      	bcc.n	8005e50 <create_chain+0x64>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	e018      	b.n	8005e50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fd90 	bl	8005946 <get_fat>
 8005e26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d801      	bhi.n	8005e32 <create_chain+0x46>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e070      	b.n	8005f14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d101      	bne.n	8005e3e <create_chain+0x52>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	e06a      	b.n	8005f14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d201      	bcs.n	8005e4c <create_chain+0x60>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	e063      	b.n	8005f14 <create_chain+0x128>
		scl = clst;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	3301      	adds	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d307      	bcc.n	8005e74 <create_chain+0x88>
				ncl = 2;
 8005e64:	2302      	movs	r3, #2
 8005e66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d901      	bls.n	8005e74 <create_chain+0x88>
 8005e70:	2300      	movs	r3, #0
 8005e72:	e04f      	b.n	8005f14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fd65 	bl	8005946 <get_fat>
 8005e7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00e      	beq.n	8005ea2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d003      	beq.n	8005e92 <create_chain+0xa6>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d101      	bne.n	8005e96 <create_chain+0xaa>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	e03e      	b.n	8005f14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d1da      	bne.n	8005e54 <create_chain+0x68>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e038      	b.n	8005f14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005ea2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea8:	69f9      	ldr	r1, [r7, #28]
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f7ff fe1f 	bl	8005aee <put_fat>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <create_chain+0xe2>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d006      	beq.n	8005ece <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6938      	ldr	r0, [r7, #16]
 8005ec6:	f7ff fe12 	bl	8005aee <put_fat>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d116      	bne.n	8005f02 <create_chain+0x116>
		fs->last_clst = ncl;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	3b02      	subs	r3, #2
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d804      	bhi.n	8005ef2 <create_chain+0x106>
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	791b      	ldrb	r3, [r3, #4]
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	711a      	strb	r2, [r3, #4]
 8005f00:	e007      	b.n	8005f12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d102      	bne.n	8005f0e <create_chain+0x122>
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0c:	e000      	b.n	8005f10 <create_chain+0x124>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005f12:	69fb      	ldr	r3, [r7, #28]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	3304      	adds	r3, #4
 8005f32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	899b      	ldrh	r3, [r3, #12]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	8952      	ldrh	r2, [r2, #10]
 8005f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1d1a      	adds	r2, r3, #4
 8005f4e:	613a      	str	r2, [r7, #16]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <clmt_clust+0x42>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e010      	b.n	8005f80 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d307      	bcc.n	8005f76 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3304      	adds	r3, #4
 8005f72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f74:	e7e9      	b.n	8005f4a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005f76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fa2:	d204      	bcs.n	8005fae <dir_sdi+0x22>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e071      	b.n	8006096 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <dir_sdi+0x46>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d902      	bls.n	8005fd2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10c      	bne.n	8005ff2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	8912      	ldrh	r2, [r2, #8]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d301      	bcc.n	8005fe8 <dir_sdi+0x5c>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e056      	b.n	8006096 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	61da      	str	r2, [r3, #28]
 8005ff0:	e02d      	b.n	800604e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	895b      	ldrh	r3, [r3, #10]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	899b      	ldrh	r3, [r3, #12]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
 8006000:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006002:	e019      	b.n	8006038 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6979      	ldr	r1, [r7, #20]
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fc9c 	bl	8005946 <get_fat>
 800600e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d101      	bne.n	800601c <dir_sdi+0x90>
 8006018:	2301      	movs	r3, #1
 800601a:	e03c      	b.n	8006096 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d904      	bls.n	800602c <dir_sdi+0xa0>
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	429a      	cmp	r2, r3
 800602a:	d301      	bcc.n	8006030 <dir_sdi+0xa4>
 800602c:	2302      	movs	r3, #2
 800602e:	e032      	b.n	8006096 <dir_sdi+0x10a>
			ofs -= csz;
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d2e1      	bcs.n	8006004 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7ff fc60 	bl	8005908 <clust2sect>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <dir_sdi+0xd4>
 800605c:	2302      	movs	r3, #2
 800605e:	e01a      	b.n	8006096 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	899b      	ldrh	r3, [r3, #12]
 8006068:	4619      	mov	r1, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006070:	441a      	add	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	899b      	ldrh	r3, [r3, #12]
 8006080:	461a      	mov	r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	fbb3 f0f2 	udiv	r0, r3, r2
 8006088:	fb00 f202 	mul.w	r2, r0, r2
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	18ca      	adds	r2, r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	3320      	adds	r3, #32
 80060b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <dir_next+0x28>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060c4:	d301      	bcc.n	80060ca <dir_next+0x2c>
 80060c6:	2304      	movs	r3, #4
 80060c8:	e0bb      	b.n	8006242 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	899b      	ldrh	r3, [r3, #12]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80060d6:	fb01 f202 	mul.w	r2, r1, r2
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 809d 	bne.w	800621c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	8912      	ldrh	r2, [r2, #8]
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f0c0 808d 	bcc.w	800621c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	61da      	str	r2, [r3, #28]
 8006108:	2304      	movs	r3, #4
 800610a:	e09a      	b.n	8006242 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	899b      	ldrh	r3, [r3, #12]
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	fbb3 f3f2 	udiv	r3, r3, r2
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	8952      	ldrh	r2, [r2, #10]
 800611c:	3a01      	subs	r2, #1
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d17b      	bne.n	800621c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7ff fc0a 	bl	8005946 <get_fat>
 8006132:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d801      	bhi.n	800613e <dir_next+0xa0>
 800613a:	2302      	movs	r3, #2
 800613c:	e081      	b.n	8006242 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d101      	bne.n	800614a <dir_next+0xac>
 8006146:	2301      	movs	r3, #1
 8006148:	e07b      	b.n	8006242 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	429a      	cmp	r2, r3
 8006152:	d359      	bcc.n	8006208 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	61da      	str	r2, [r3, #28]
 8006160:	2304      	movs	r3, #4
 8006162:	e06e      	b.n	8006242 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f7ff fe3d 	bl	8005dec <create_chain>
 8006172:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <dir_next+0xe0>
 800617a:	2307      	movs	r3, #7
 800617c:	e061      	b.n	8006242 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <dir_next+0xea>
 8006184:	2302      	movs	r3, #2
 8006186:	e05c      	b.n	8006242 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d101      	bne.n	8006194 <dir_next+0xf6>
 8006190:	2301      	movs	r3, #1
 8006192:	e056      	b.n	8006242 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff fad5 	bl	8005744 <sync_window>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <dir_next+0x106>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e04e      	b.n	8006242 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	899b      	ldrh	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	2100      	movs	r1, #0
 80061b2:	f7ff f8fe 	bl	80053b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fba3 	bl	8005908 <clust2sect>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	635a      	str	r2, [r3, #52]	; 0x34
 80061c8:	e012      	b.n	80061f0 <dir_next+0x152>
						fs->wflag = 1;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff fab7 	bl	8005744 <sync_window>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <dir_next+0x142>
 80061dc:	2301      	movs	r3, #1
 80061de:	e030      	b.n	8006242 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	3301      	adds	r3, #1
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	635a      	str	r2, [r3, #52]	; 0x34
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	895b      	ldrh	r3, [r3, #10]
 80061f4:	461a      	mov	r2, r3
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d3e6      	bcc.n	80061ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff fb79 	bl	8005908 <clust2sect>
 8006216:	4602      	mov	r2, r0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	899b      	ldrh	r3, [r3, #12]
 800622c:	461a      	mov	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	fbb3 f0f2 	udiv	r0, r3, r2
 8006234:	fb00 f202 	mul.w	r2, r0, r2
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	18ca      	adds	r2, r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800625a:	2100      	movs	r1, #0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe95 	bl	8005f8c <dir_sdi>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d12b      	bne.n	80062c4 <dir_alloc+0x7a>
		n = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	4619      	mov	r1, r3
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff faa8 	bl	80057cc <move_window>
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d11d      	bne.n	80062c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2be5      	cmp	r3, #229	; 0xe5
 800628e:	d004      	beq.n	800629a <dir_alloc+0x50>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d107      	bne.n	80062aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3301      	adds	r3, #1
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d102      	bne.n	80062ae <dir_alloc+0x64>
 80062a8:	e00c      	b.n	80062c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80062ae:	2101      	movs	r1, #1
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fef4 	bl	800609e <dir_next>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0d7      	beq.n	8006270 <dir_alloc+0x26>
 80062c0:	e000      	b.n	80062c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80062c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d101      	bne.n	80062ce <dir_alloc+0x84>
 80062ca:	2307      	movs	r3, #7
 80062cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	331a      	adds	r3, #26
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe ffc0 	bl	800526c <ld_word>
 80062ec:	4603      	mov	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d109      	bne.n	800630c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3314      	adds	r3, #20
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe ffb5 	bl	800526c <ld_word>
 8006302:	4603      	mov	r3, r0
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800630c:	68fb      	ldr	r3, [r7, #12]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	331a      	adds	r3, #26
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	b292      	uxth	r2, r2
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe ffd8 	bl	80052e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b03      	cmp	r3, #3
 8006338:	d109      	bne.n	800634e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f103 0214 	add.w	r2, r3, #20
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	b29b      	uxth	r3, r3
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f7fe ffca 	bl	80052e2 <st_word>
	}
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	331a      	adds	r3, #26
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe ff80 	bl	800526c <ld_word>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <cmp_lfn+0x1e>
 8006372:	2300      	movs	r3, #0
 8006374:	e059      	b.n	800642a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800637e:	1e5a      	subs	r2, r3, #1
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800638c:	2301      	movs	r3, #1
 800638e:	81fb      	strh	r3, [r7, #14]
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e033      	b.n	80063fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006396:	4a27      	ldr	r2, [pc, #156]	; (8006434 <cmp_lfn+0xdc>)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	4413      	add	r3, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe ff61 	bl	800526c <ld_word>
 80063aa:	4603      	mov	r3, r0
 80063ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80063ae:	89fb      	ldrh	r3, [r7, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01a      	beq.n	80063ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2bfe      	cmp	r3, #254	; 0xfe
 80063b8:	d812      	bhi.n	80063e0 <cmp_lfn+0x88>
 80063ba:	89bb      	ldrh	r3, [r7, #12]
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 fe11 	bl	8007fe4 <ff_wtoupper>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461c      	mov	r4, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	617a      	str	r2, [r7, #20]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fe05 	bl	8007fe4 <ff_wtoupper>
 80063da:	4603      	mov	r3, r0
 80063dc:	429c      	cmp	r4, r3
 80063de:	d001      	beq.n	80063e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80063e0:	2300      	movs	r3, #0
 80063e2:	e022      	b.n	800642a <cmp_lfn+0xd2>
			}
			wc = uc;
 80063e4:	89bb      	ldrh	r3, [r7, #12]
 80063e6:	81fb      	strh	r3, [r7, #14]
 80063e8:	e006      	b.n	80063f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80063ea:	89bb      	ldrh	r3, [r7, #12]
 80063ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d001      	beq.n	80063f8 <cmp_lfn+0xa0>
 80063f4:	2300      	movs	r3, #0
 80063f6:	e018      	b.n	800642a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3301      	adds	r3, #1
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d9c8      	bls.n	8006396 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <cmp_lfn+0xd0>
 8006410:	89fb      	ldrh	r3, [r7, #14]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <cmp_lfn+0xd0>
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <cmp_lfn+0xd0>
 8006424:	2300      	movs	r3, #0
 8006426:	e000      	b.n	800642a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006428:	2301      	movs	r3, #1
}
 800642a:	4618      	mov	r0, r3
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	bd90      	pop	{r4, r7, pc}
 8006432:	bf00      	nop
 8006434:	08008d9c 	.word	0x08008d9c

08006438 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4611      	mov	r1, r2
 8006444:	461a      	mov	r2, r3
 8006446:	460b      	mov	r3, r1
 8006448:	71fb      	strb	r3, [r7, #7]
 800644a:	4613      	mov	r3, r2
 800644c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	330d      	adds	r3, #13
 8006452:	79ba      	ldrb	r2, [r7, #6]
 8006454:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	330b      	adds	r3, #11
 800645a:	220f      	movs	r2, #15
 800645c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	330c      	adds	r3, #12
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	331a      	adds	r3, #26
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe ff38 	bl	80052e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	4613      	mov	r3, r2
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	82fb      	strh	r3, [r7, #22]
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800648a:	8afb      	ldrh	r3, [r7, #22]
 800648c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <put_lfn+0x6c>
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	61fa      	str	r2, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80064a4:	4a17      	ldr	r2, [pc, #92]	; (8006504 <put_lfn+0xcc>)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	4413      	add	r3, r2
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	8afa      	ldrh	r2, [r7, #22]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe ff13 	bl	80052e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80064bc:	8afb      	ldrh	r3, [r7, #22]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <put_lfn+0x90>
 80064c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b0c      	cmp	r3, #12
 80064d2:	d9da      	bls.n	800648a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80064d4:	8afb      	ldrh	r3, [r7, #22]
 80064d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064da:	4293      	cmp	r3, r2
 80064dc:	d006      	beq.n	80064ec <put_lfn+0xb4>
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <put_lfn+0xbc>
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	79fa      	ldrb	r2, [r7, #7]
 80064f8:	701a      	strb	r2, [r3, #0]
}
 80064fa:	bf00      	nop
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08008d9c 	.word	0x08008d9c

08006508 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	; 0x30
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006516:	220b      	movs	r2, #11
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7fe ff28 	bl	8005370 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b05      	cmp	r3, #5
 8006524:	d92b      	bls.n	800657e <gen_numname+0x76>
		sr = seq;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800652a:	e022      	b.n	8006572 <gen_numname+0x6a>
			wc = *lfn++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006536:	2300      	movs	r3, #0
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
 800653a:	e017      	b.n	800656c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	005a      	lsls	r2, r3, #1
 8006540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	4413      	add	r3, r2
 8006548:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800654a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <gen_numname+0x5e>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006560:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006564:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	3301      	adds	r3, #1
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	2b0f      	cmp	r3, #15
 8006570:	d9e4      	bls.n	800653c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1d8      	bne.n	800652c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800657e:	2307      	movs	r3, #7
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3330      	adds	r3, #48	; 0x30
 800658e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006596:	2b39      	cmp	r3, #57	; 0x39
 8006598:	d904      	bls.n	80065a4 <gen_numname+0x9c>
 800659a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800659e:	3307      	adds	r3, #7
 80065a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80065aa:	3330      	adds	r3, #48	; 0x30
 80065ac:	443b      	add	r3, r7
 80065ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80065b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	603b      	str	r3, [r7, #0]
	} while (seq);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1df      	bne.n	8006582 <gen_numname+0x7a>
	ns[i] = '~';
 80065c2:	f107 0214 	add.w	r2, r7, #20
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	4413      	add	r3, r2
 80065ca:	227e      	movs	r2, #126	; 0x7e
 80065cc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80065ce:	2300      	movs	r3, #0
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	e002      	b.n	80065da <gen_numname+0xd2>
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	3301      	adds	r3, #1
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	429a      	cmp	r2, r3
 80065e0:	d205      	bcs.n	80065ee <gen_numname+0xe6>
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	4413      	add	r3, r2
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d1f2      	bne.n	80065d4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	2b07      	cmp	r3, #7
 80065f2:	d807      	bhi.n	8006604 <gen_numname+0xfc>
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80065fa:	3330      	adds	r3, #48	; 0x30
 80065fc:	443b      	add	r3, r7
 80065fe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006602:	e000      	b.n	8006606 <gen_numname+0xfe>
 8006604:	2120      	movs	r1, #32
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	627a      	str	r2, [r7, #36]	; 0x24
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	460a      	mov	r2, r1
 8006612:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	2b07      	cmp	r3, #7
 8006618:	d9e9      	bls.n	80065ee <gen_numname+0xe6>
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3730      	adds	r7, #48	; 0x30
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006630:	230b      	movs	r3, #11
 8006632:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	0852      	lsrs	r2, r2, #1
 800663a:	01db      	lsls	r3, r3, #7
 800663c:	4313      	orrs	r3, r2
 800663e:	b2da      	uxtb	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	6079      	str	r1, [r7, #4]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	4413      	add	r3, r2
 800664a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	3b01      	subs	r3, #1
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ed      	bne.n	8006634 <sum_sfn+0x10>
	return sum;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7ff fc88 	bl	8005f8c <dir_sdi>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <dir_find+0x24>
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	e0a9      	b.n	80067de <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800668a:	23ff      	movs	r3, #255	; 0xff
 800668c:	753b      	strb	r3, [r7, #20]
 800668e:	7d3b      	ldrb	r3, [r7, #20]
 8006690:	757b      	strb	r3, [r7, #21]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	4619      	mov	r1, r3
 80066a0:	6938      	ldr	r0, [r7, #16]
 80066a2:	f7ff f893 	bl	80057cc <move_window>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8090 	bne.w	80067d2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066ba:	7dbb      	ldrb	r3, [r7, #22]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <dir_find+0x60>
 80066c0:	2304      	movs	r3, #4
 80066c2:	75fb      	strb	r3, [r7, #23]
 80066c4:	e08a      	b.n	80067dc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	330b      	adds	r3, #11
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80066da:	7dbb      	ldrb	r3, [r7, #22]
 80066dc:	2be5      	cmp	r3, #229	; 0xe5
 80066de:	d007      	beq.n	80066f0 <dir_find+0x8a>
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <dir_find+0x98>
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b0f      	cmp	r3, #15
 80066ee:	d006      	beq.n	80066fe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80066f0:	23ff      	movs	r3, #255	; 0xff
 80066f2:	757b      	strb	r3, [r7, #21]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
 80066fc:	e05e      	b.n	80067bc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d136      	bne.n	8006772 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d154      	bne.n	80067bc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00d      	beq.n	8006738 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	7b5b      	ldrb	r3, [r3, #13]
 8006722:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672a:	75bb      	strb	r3, [r7, #22]
 800672c:	7dbb      	ldrb	r3, [r7, #22]
 800672e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695a      	ldr	r2, [r3, #20]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006738:	7dba      	ldrb	r2, [r7, #22]
 800673a:	7d7b      	ldrb	r3, [r7, #21]
 800673c:	429a      	cmp	r2, r3
 800673e:	d115      	bne.n	800676c <dir_find+0x106>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	330d      	adds	r3, #13
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	7d3a      	ldrb	r2, [r7, #20]
 800674a:	429a      	cmp	r2, r3
 800674c:	d10e      	bne.n	800676c <dir_find+0x106>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f7ff fdfd 	bl	8006358 <cmp_lfn>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <dir_find+0x106>
 8006764:	7d7b      	ldrb	r3, [r7, #21]
 8006766:	3b01      	subs	r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e000      	b.n	800676e <dir_find+0x108>
 800676c:	23ff      	movs	r3, #255	; 0xff
 800676e:	757b      	strb	r3, [r7, #21]
 8006770:	e024      	b.n	80067bc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006772:	7d7b      	ldrb	r3, [r7, #21]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <dir_find+0x126>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ff51 	bl	8006624 <sum_sfn>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	7d3b      	ldrb	r3, [r7, #20]
 8006788:	4293      	cmp	r3, r2
 800678a:	d024      	beq.n	80067d6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <dir_find+0x14a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a18      	ldr	r0, [r3, #32]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	220b      	movs	r2, #11
 80067a4:	4619      	mov	r1, r3
 80067a6:	f7fe fe1f 	bl	80053e8 <mem_cmp>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d014      	beq.n	80067da <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80067b0:	23ff      	movs	r3, #255	; 0xff
 80067b2:	757b      	strb	r3, [r7, #21]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80067bc:	2100      	movs	r1, #0
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fc6d 	bl	800609e <dir_next>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f43f af65 	beq.w	800669a <dir_find+0x34>
 80067d0:	e004      	b.n	80067dc <dir_find+0x176>
		if (res != FR_OK) break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80067da:	bf00      	nop

	return res;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08c      	sub	sp, #48	; 0x30
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <dir_register+0x20>
 8006804:	2306      	movs	r3, #6
 8006806:	e0e0      	b.n	80069ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006808:	2300      	movs	r3, #0
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
 800680c:	e002      	b.n	8006814 <dir_register+0x2c>
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	3301      	adds	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f4      	bne.n	800680e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800682a:	f107 030c 	add.w	r3, r7, #12
 800682e:	220c      	movs	r2, #12
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe fd9d 	bl	8005370 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d032      	beq.n	80068a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2240      	movs	r2, #64	; 0x40
 8006844:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006848:	2301      	movs	r3, #1
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
 800684c:	e016      	b.n	800687c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	f107 010c 	add.w	r1, r7, #12
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	f7ff fe53 	bl	8006508 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff feff 	bl	8006666 <dir_find>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800686e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	3301      	adds	r3, #1
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	2b63      	cmp	r3, #99	; 0x63
 8006880:	d9e5      	bls.n	800684e <dir_register+0x66>
 8006882:	e000      	b.n	8006886 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006884:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	2b64      	cmp	r3, #100	; 0x64
 800688a:	d101      	bne.n	8006890 <dir_register+0xa8>
 800688c:	2307      	movs	r3, #7
 800688e:	e09c      	b.n	80069ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006894:	2b04      	cmp	r3, #4
 8006896:	d002      	beq.n	800689e <dir_register+0xb6>
 8006898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800689c:	e095      	b.n	80069ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800689e:	7dfa      	ldrb	r2, [r7, #23]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <dir_register+0xd8>
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	330c      	adds	r3, #12
 80068b4:	4a47      	ldr	r2, [pc, #284]	; (80069d4 <dir_register+0x1ec>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	089b      	lsrs	r3, r3, #2
 80068bc:	3301      	adds	r3, #1
 80068be:	e000      	b.n	80068c2 <dir_register+0xda>
 80068c0:	2301      	movs	r3, #1
 80068c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80068c4:	6a39      	ldr	r1, [r7, #32]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fcbf 	bl	800624a <dir_alloc>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80068d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d148      	bne.n	800696c <dir_register+0x184>
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	3b01      	subs	r3, #1
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d042      	beq.n	800696c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	015b      	lsls	r3, r3, #5
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fb4a 	bl	8005f8c <dir_sdi>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80068fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d132      	bne.n	800696c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fe8a 	bl	8006624 <sum_sfn>
 8006910:	4603      	mov	r3, r0
 8006912:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4619      	mov	r1, r3
 800691a:	69f8      	ldr	r0, [r7, #28]
 800691c:	f7fe ff56 	bl	80057cc <move_window>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800692a:	2b00      	cmp	r3, #0
 800692c:	d11d      	bne.n	800696a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	6918      	ldr	r0, [r3, #16]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a19      	ldr	r1, [r3, #32]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	7efb      	ldrb	r3, [r7, #27]
 800693c:	f7ff fd7c 	bl	8006438 <put_lfn>
				fs->wflag = 1;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	2201      	movs	r2, #1
 8006944:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006946:	2100      	movs	r1, #0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fba8 	bl	800609e <dir_next>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <dir_register+0x184>
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	3b01      	subs	r3, #1
 8006960:	623b      	str	r3, [r7, #32]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1d5      	bne.n	8006914 <dir_register+0x12c>
 8006968:	e000      	b.n	800696c <dir_register+0x184>
				if (res != FR_OK) break;
 800696a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800696c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d128      	bne.n	80069c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	4619      	mov	r1, r3
 800697a:	69f8      	ldr	r0, [r7, #28]
 800697c:	f7fe ff26 	bl	80057cc <move_window>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800698a:	2b00      	cmp	r3, #0
 800698c:	d11b      	bne.n	80069c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	2220      	movs	r2, #32
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fd0b 	bl	80053b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a18      	ldr	r0, [r3, #32]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3324      	adds	r3, #36	; 0x24
 80069a4:	220b      	movs	r2, #11
 80069a6:	4619      	mov	r1, r3
 80069a8:	f7fe fce2 	bl	8005370 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	330c      	adds	r3, #12
 80069b8:	f002 0218 	and.w	r2, r2, #24
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2201      	movs	r2, #1
 80069c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80069c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3730      	adds	r7, #48	; 0x30
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	4ec4ec4f 	.word	0x4ec4ec4f

080069d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61ba      	str	r2, [r7, #24]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4413      	add	r3, r2
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a08:	2b1f      	cmp	r3, #31
 8006a0a:	d940      	bls.n	8006a8e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a0e:	2b2f      	cmp	r3, #47	; 0x2f
 8006a10:	d006      	beq.n	8006a20 <create_name+0x48>
 8006a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a14:	2b5c      	cmp	r3, #92	; 0x5c
 8006a16:	d110      	bne.n	8006a3a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006a18:	e002      	b.n	8006a20 <create_name+0x48>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b2f      	cmp	r3, #47	; 0x2f
 8006a2a:	d0f6      	beq.n	8006a1a <create_name+0x42>
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	4413      	add	r3, r2
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b5c      	cmp	r3, #92	; 0x5c
 8006a36:	d0f0      	beq.n	8006a1a <create_name+0x42>
			break;
 8006a38:	e02a      	b.n	8006a90 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8006a3e:	d901      	bls.n	8006a44 <create_name+0x6c>
 8006a40:	2306      	movs	r3, #6
 8006a42:	e17d      	b.n	8006d40 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f001 fa8c 	bl	8007f6c <ff_convert>
 8006a54:	4603      	mov	r3, r0
 8006a56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <create_name+0x8a>
 8006a5e:	2306      	movs	r3, #6
 8006a60:	e16e      	b.n	8006d40 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a64:	2b7f      	cmp	r3, #127	; 0x7f
 8006a66:	d809      	bhi.n	8006a7c <create_name+0xa4>
 8006a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	488d      	ldr	r0, [pc, #564]	; (8006ca4 <create_name+0x2cc>)
 8006a6e:	f7fe fce2 	bl	8005436 <chk_chr>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <create_name+0xa4>
 8006a78:	2306      	movs	r3, #6
 8006a7a:	e161      	b.n	8006d40 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	617a      	str	r2, [r7, #20]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006a8c:	e7b4      	b.n	80069f8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006a8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	441a      	add	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9c:	2b1f      	cmp	r3, #31
 8006a9e:	d801      	bhi.n	8006aa4 <create_name+0xcc>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	e000      	b.n	8006aa6 <create_name+0xce>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006aaa:	e011      	b.n	8006ad0 <create_name+0xf8>
		w = lfn[di - 1];
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d002      	beq.n	8006aca <create_name+0xf2>
 8006ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ac8:	d106      	bne.n	8006ad8 <create_name+0x100>
		di--;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ea      	bne.n	8006aac <create_name+0xd4>
 8006ad6:	e000      	b.n	8006ada <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006ad8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <create_name+0x118>
 8006aec:	2306      	movs	r3, #6
 8006aee:	e127      	b.n	8006d40 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3324      	adds	r3, #36	; 0x24
 8006af4:	220b      	movs	r2, #11
 8006af6:	2120      	movs	r1, #32
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fc5a 	bl	80053b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006afe:	2300      	movs	r3, #0
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e002      	b.n	8006b0a <create_name+0x132>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	3301      	adds	r3, #1
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d0f5      	beq.n	8006b04 <create_name+0x12c>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	2b2e      	cmp	r3, #46	; 0x2e
 8006b24:	d0ee      	beq.n	8006b04 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <create_name+0x168>
 8006b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b30:	f043 0303 	orr.w	r3, r3, #3
 8006b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006b38:	e002      	b.n	8006b40 <create_name+0x168>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <create_name+0x182>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	2b2e      	cmp	r3, #46	; 0x2e
 8006b58:	d1ef      	bne.n	8006b3a <create_name+0x162>

	i = b = 0; ni = 8;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b60:	2300      	movs	r3, #0
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	2308      	movs	r3, #8
 8006b66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	61ba      	str	r2, [r7, #24]
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8090 	beq.w	8006ca0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d006      	beq.n	8006b94 <create_name+0x1bc>
 8006b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b88:	2b2e      	cmp	r3, #46	; 0x2e
 8006b8a:	d10a      	bne.n	8006ba2 <create_name+0x1ca>
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d006      	beq.n	8006ba2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b98:	f043 0303 	orr.w	r3, r3, #3
 8006b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ba0:	e07d      	b.n	8006c9e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d203      	bcs.n	8006bb2 <create_name+0x1da>
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d123      	bne.n	8006bfa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2b0b      	cmp	r3, #11
 8006bb6:	d106      	bne.n	8006bc6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bbc:	f043 0303 	orr.w	r3, r3, #3
 8006bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bc4:	e075      	b.n	8006cb2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d005      	beq.n	8006bda <create_name+0x202>
 8006bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd2:	f043 0303 	orr.w	r3, r3, #3
 8006bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d866      	bhi.n	8006cb0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	2308      	movs	r3, #8
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	230b      	movs	r3, #11
 8006bec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bf8:	e051      	b.n	8006c9e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfe:	d914      	bls.n	8006c2a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 f9b1 	bl	8007f6c <ff_convert>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <create_name+0x246>
 8006c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c16:	3b80      	subs	r3, #128	; 0x80
 8006c18:	4a23      	ldr	r2, [pc, #140]	; (8006ca8 <create_name+0x2d0>)
 8006c1a:	5cd3      	ldrb	r3, [r2, r3]
 8006c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c22:	f043 0302 	orr.w	r3, r3, #2
 8006c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <create_name+0x268>
 8006c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c32:	4619      	mov	r1, r3
 8006c34:	481d      	ldr	r0, [pc, #116]	; (8006cac <create_name+0x2d4>)
 8006c36:	f7fe fbfe 	bl	8005436 <chk_chr>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006c40:	235f      	movs	r3, #95	; 0x5f
 8006c42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c48:	f043 0303 	orr.w	r3, r3, #3
 8006c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c50:	e01b      	b.n	8006c8a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d909      	bls.n	8006c6c <create_name+0x294>
 8006c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c5a:	2b5a      	cmp	r3, #90	; 0x5a
 8006c5c:	d806      	bhi.n	8006c6c <create_name+0x294>
					b |= 2;
 8006c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c62:	f043 0302 	orr.w	r3, r3, #2
 8006c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c6a:	e00e      	b.n	8006c8a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6e:	2b60      	cmp	r3, #96	; 0x60
 8006c70:	d90b      	bls.n	8006c8a <create_name+0x2b2>
 8006c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c74:	2b7a      	cmp	r3, #122	; 0x7a
 8006c76:	d808      	bhi.n	8006c8a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c86:	3b20      	subs	r3, #32
 8006c88:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	623a      	str	r2, [r7, #32]
 8006c90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c92:	b2d1      	uxtb	r1, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	460a      	mov	r2, r1
 8006c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006c9e:	e763      	b.n	8006b68 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006ca0:	bf00      	nop
 8006ca2:	e006      	b.n	8006cb2 <create_name+0x2da>
 8006ca4:	08008cbc 	.word	0x08008cbc
 8006ca8:	08008d1c 	.word	0x08008d1c
 8006cac:	08008cc8 	.word	0x08008cc8
			if (si > di) break;			/* No extension */
 8006cb0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cb8:	2be5      	cmp	r3, #229	; 0xe5
 8006cba:	d103      	bne.n	8006cc4 <create_name+0x2ec>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d104      	bne.n	8006cd4 <create_name+0x2fc>
 8006cca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d005      	beq.n	8006cec <create_name+0x314>
 8006ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d105      	bne.n	8006cf8 <create_name+0x320>
 8006cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf0:	f043 0302 	orr.w	r3, r3, #2
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d117      	bne.n	8006d34 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006d04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d105      	bne.n	8006d1c <create_name+0x344>
 8006d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d14:	f043 0310 	orr.w	r3, r3, #16
 8006d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d20:	f003 030c 	and.w	r3, r3, #12
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d105      	bne.n	8006d34 <create_name+0x35c>
 8006d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d2c:	f043 0308 	orr.w	r3, r3, #8
 8006d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006d3e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3728      	adds	r7, #40	; 0x28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d5c:	e002      	b.n	8006d64 <follow_path+0x1c>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b2f      	cmp	r3, #47	; 0x2f
 8006d6a:	d0f8      	beq.n	8006d5e <follow_path+0x16>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b5c      	cmp	r3, #92	; 0x5c
 8006d72:	d0f4      	beq.n	8006d5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b1f      	cmp	r3, #31
 8006d80:	d80a      	bhi.n	8006d98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2280      	movs	r2, #128	; 0x80
 8006d86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff f8fd 	bl	8005f8c <dir_sdi>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
 8006d96:	e048      	b.n	8006e2a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d98:	463b      	mov	r3, r7
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff fe1b 	bl	80069d8 <create_name>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d139      	bne.n	8006e20 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fc5a 	bl	8006666 <dir_find>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dbc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d12c      	bne.n	8006e24 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d127      	bne.n	8006e24 <follow_path+0xdc>
 8006dd4:	2305      	movs	r3, #5
 8006dd6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006dd8:	e024      	b.n	8006e24 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d121      	bne.n	8006e28 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	799b      	ldrb	r3, [r3, #6]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006df0:	2305      	movs	r3, #5
 8006df2:	75fb      	strb	r3, [r7, #23]
 8006df4:	e019      	b.n	8006e2a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	8992      	ldrh	r2, [r2, #12]
 8006e04:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e08:	fb00 f202 	mul.w	r2, r0, r2
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	440b      	add	r3, r1
 8006e10:	4619      	mov	r1, r3
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff fa60 	bl	80062d8 <ld_clust>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e1e:	e7bb      	b.n	8006d98 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e20:	bf00      	nop
 8006e22:	e002      	b.n	8006e2a <follow_path+0xe2>
				break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e28:	bf00      	nop
			}
		}
	}

	return res;
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e40:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d031      	beq.n	8006eae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e002      	b.n	8006e58 <get_ldnumber+0x24>
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	3301      	adds	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b1f      	cmp	r3, #31
 8006e5e:	d903      	bls.n	8006e68 <get_ldnumber+0x34>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b3a      	cmp	r3, #58	; 0x3a
 8006e66:	d1f4      	bne.n	8006e52 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b3a      	cmp	r3, #58	; 0x3a
 8006e6e:	d11c      	bne.n	8006eaa <get_ldnumber+0x76>
			tp = *path;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	60fa      	str	r2, [r7, #12]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	3b30      	subs	r3, #48	; 0x30
 8006e80:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d80e      	bhi.n	8006ea6 <get_ldnumber+0x72>
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d10a      	bne.n	8006ea6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d107      	bne.n	8006ea6 <get_ldnumber+0x72>
					vol = (int)i;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	e002      	b.n	8006eb0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006eae:	693b      	ldr	r3, [r7, #16]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	70da      	strb	r2, [r3, #3]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fe fc78 	bl	80057cc <move_window>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <check_fs+0x2a>
 8006ee2:	2304      	movs	r3, #4
 8006ee4:	e038      	b.n	8006f58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3338      	adds	r3, #56	; 0x38
 8006eea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe f9bc 	bl	800526c <ld_word>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <check_fs+0x48>
 8006f00:	2303      	movs	r3, #3
 8006f02:	e029      	b.n	8006f58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f0a:	2be9      	cmp	r3, #233	; 0xe9
 8006f0c:	d009      	beq.n	8006f22 <check_fs+0x66>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f14:	2beb      	cmp	r3, #235	; 0xeb
 8006f16:	d11e      	bne.n	8006f56 <check_fs+0x9a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f1e:	2b90      	cmp	r3, #144	; 0x90
 8006f20:	d119      	bne.n	8006f56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3338      	adds	r3, #56	; 0x38
 8006f26:	3336      	adds	r3, #54	; 0x36
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe f9b7 	bl	800529c <ld_dword>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f34:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <check_fs+0xa4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d101      	bne.n	8006f3e <check_fs+0x82>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e00c      	b.n	8006f58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3338      	adds	r3, #56	; 0x38
 8006f42:	3352      	adds	r3, #82	; 0x52
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe f9a9 	bl	800529c <ld_dword>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <check_fs+0xa8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d101      	bne.n	8006f56 <check_fs+0x9a>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e000      	b.n	8006f58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f56:	2302      	movs	r3, #2
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	00544146 	.word	0x00544146
 8006f64:	33544146 	.word	0x33544146

08006f68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b096      	sub	sp, #88	; 0x58
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff ff59 	bl	8006e34 <get_ldnumber>
 8006f82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da01      	bge.n	8006f8e <find_volume+0x26>
 8006f8a:	230b      	movs	r3, #11
 8006f8c:	e265      	b.n	800745a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f8e:	4a9f      	ldr	r2, [pc, #636]	; (800720c <find_volume+0x2a4>)
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <find_volume+0x3a>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	e25b      	b.n	800745a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01a      	beq.n	8006fee <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe f8b7 	bl	8005130 <disk_status>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10c      	bne.n	8006fee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <find_volume+0x82>
 8006fda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	e237      	b.n	800745a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006fea:	2300      	movs	r3, #0
 8006fec:	e235      	b.n	800745a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe f8af 	bl	8005164 <disk_initialize>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800700c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007018:	2303      	movs	r3, #3
 800701a:	e21e      	b.n	800745a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <find_volume+0xca>
 8007022:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800702e:	230a      	movs	r3, #10
 8007030:	e213      	b.n	800745a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	7858      	ldrb	r0, [r3, #1]
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	330c      	adds	r3, #12
 800703a:	461a      	mov	r2, r3
 800703c:	2102      	movs	r1, #2
 800703e:	f7fe f8f7 	bl	8005230 <disk_ioctl>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <find_volume+0xe4>
 8007048:	2301      	movs	r3, #1
 800704a:	e206      	b.n	800745a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	899b      	ldrh	r3, [r3, #12]
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007054:	d80d      	bhi.n	8007072 <find_volume+0x10a>
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	899b      	ldrh	r3, [r3, #12]
 800705a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705e:	d308      	bcc.n	8007072 <find_volume+0x10a>
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	899b      	ldrh	r3, [r3, #12]
 8007064:	461a      	mov	r2, r3
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	899b      	ldrh	r3, [r3, #12]
 800706a:	3b01      	subs	r3, #1
 800706c:	4013      	ands	r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <find_volume+0x10e>
 8007072:	2301      	movs	r3, #1
 8007074:	e1f1      	b.n	800745a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800707a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800707c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800707e:	f7ff ff1d 	bl	8006ebc <check_fs>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800708c:	2b02      	cmp	r3, #2
 800708e:	d149      	bne.n	8007124 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007090:	2300      	movs	r3, #0
 8007092:	643b      	str	r3, [r7, #64]	; 0x40
 8007094:	e01e      	b.n	80070d4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800709c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80070a4:	4413      	add	r3, r2
 80070a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	3304      	adds	r3, #4
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d006      	beq.n	80070c0 <find_volume+0x158>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	3308      	adds	r3, #8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe f8f0 	bl	800529c <ld_dword>
 80070bc:	4602      	mov	r2, r0
 80070be:	e000      	b.n	80070c2 <find_volume+0x15a>
 80070c0:	2200      	movs	r2, #0
 80070c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	3358      	adds	r3, #88	; 0x58
 80070c8:	443b      	add	r3, r7
 80070ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d0:	3301      	adds	r3, #1
 80070d2:	643b      	str	r3, [r7, #64]	; 0x40
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d9dd      	bls.n	8007096 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070da:	2300      	movs	r3, #0
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80070de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <find_volume+0x182>
 80070e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e6:	3b01      	subs	r3, #1
 80070e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	3358      	adds	r3, #88	; 0x58
 80070f0:	443b      	add	r3, r7
 80070f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <find_volume+0x1a2>
 80070fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007102:	f7ff fedb 	bl	8006ebc <check_fs>
 8007106:	4603      	mov	r3, r0
 8007108:	e000      	b.n	800710c <find_volume+0x1a4>
 800710a:	2303      	movs	r3, #3
 800710c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007114:	2b01      	cmp	r3, #1
 8007116:	d905      	bls.n	8007124 <find_volume+0x1bc>
 8007118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711a:	3301      	adds	r3, #1
 800711c:	643b      	str	r3, [r7, #64]	; 0x40
 800711e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007120:	2b03      	cmp	r3, #3
 8007122:	d9e2      	bls.n	80070ea <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007128:	2b04      	cmp	r3, #4
 800712a:	d101      	bne.n	8007130 <find_volume+0x1c8>
 800712c:	2301      	movs	r3, #1
 800712e:	e194      	b.n	800745a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007134:	2b01      	cmp	r3, #1
 8007136:	d901      	bls.n	800713c <find_volume+0x1d4>
 8007138:	230d      	movs	r3, #13
 800713a:	e18e      	b.n	800745a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	3338      	adds	r3, #56	; 0x38
 8007140:	330b      	adds	r3, #11
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe f892 	bl	800526c <ld_word>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	899b      	ldrh	r3, [r3, #12]
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <find_volume+0x1f0>
 8007154:	230d      	movs	r3, #13
 8007156:	e180      	b.n	800745a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	3338      	adds	r3, #56	; 0x38
 800715c:	3316      	adds	r3, #22
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe f884 	bl	800526c <ld_word>
 8007164:	4603      	mov	r3, r0
 8007166:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <find_volume+0x214>
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	3338      	adds	r3, #56	; 0x38
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe f891 	bl	800529c <ld_dword>
 800717a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007180:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	789b      	ldrb	r3, [r3, #2]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d005      	beq.n	80071a0 <find_volume+0x238>
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	789b      	ldrb	r3, [r3, #2]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d001      	beq.n	80071a0 <find_volume+0x238>
 800719c:	230d      	movs	r3, #13
 800719e:	e15c      	b.n	800745a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	789b      	ldrb	r3, [r3, #2]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	fb02 f303 	mul.w	r3, r2, r3
 80071ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	895b      	ldrh	r3, [r3, #10]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d008      	beq.n	80071d4 <find_volume+0x26c>
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	895b      	ldrh	r3, [r3, #10]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	895b      	ldrh	r3, [r3, #10]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <find_volume+0x270>
 80071d4:	230d      	movs	r3, #13
 80071d6:	e140      	b.n	800745a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	3338      	adds	r3, #56	; 0x38
 80071dc:	3311      	adds	r3, #17
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe f844 	bl	800526c <ld_word>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	891b      	ldrh	r3, [r3, #8]
 80071f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f2:	8992      	ldrh	r2, [r2, #12]
 80071f4:	0952      	lsrs	r2, r2, #5
 80071f6:	b292      	uxth	r2, r2
 80071f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80071fc:	fb01 f202 	mul.w	r2, r1, r2
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <find_volume+0x2a8>
 8007208:	230d      	movs	r3, #13
 800720a:	e126      	b.n	800745a <find_volume+0x4f2>
 800720c:	2000062c 	.word	0x2000062c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	3338      	adds	r3, #56	; 0x38
 8007214:	3313      	adds	r3, #19
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe f828 	bl	800526c <ld_word>
 800721c:	4603      	mov	r3, r0
 800721e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <find_volume+0x2cc>
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	3338      	adds	r3, #56	; 0x38
 800722a:	3320      	adds	r3, #32
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe f835 	bl	800529c <ld_dword>
 8007232:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	3338      	adds	r3, #56	; 0x38
 8007238:	330e      	adds	r3, #14
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe f816 	bl	800526c <ld_word>
 8007240:	4603      	mov	r3, r0
 8007242:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007244:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <find_volume+0x2e6>
 800724a:	230d      	movs	r3, #13
 800724c:	e105      	b.n	800745a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800724e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007252:	4413      	add	r3, r2
 8007254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007256:	8911      	ldrh	r1, [r2, #8]
 8007258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800725a:	8992      	ldrh	r2, [r2, #12]
 800725c:	0952      	lsrs	r2, r2, #5
 800725e:	b292      	uxth	r2, r2
 8007260:	fbb1 f2f2 	udiv	r2, r1, r2
 8007264:	b292      	uxth	r2, r2
 8007266:	4413      	add	r3, r2
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800726a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	429a      	cmp	r2, r3
 8007270:	d201      	bcs.n	8007276 <find_volume+0x30e>
 8007272:	230d      	movs	r3, #13
 8007274:	e0f1      	b.n	800745a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800727e:	8952      	ldrh	r2, [r2, #10]
 8007280:	fbb3 f3f2 	udiv	r3, r3, r2
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <find_volume+0x328>
 800728c:	230d      	movs	r3, #13
 800728e:	e0e4      	b.n	800745a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007290:	2303      	movs	r3, #3
 8007292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800729c:	4293      	cmp	r3, r2
 800729e:	d802      	bhi.n	80072a6 <find_volume+0x33e>
 80072a0:	2302      	movs	r3, #2
 80072a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d802      	bhi.n	80072b6 <find_volume+0x34e>
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c8:	441a      	add	r2, r3
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80072ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	441a      	add	r2, r3
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80072d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d11e      	bne.n	800731e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	3338      	adds	r3, #56	; 0x38
 80072e4:	332a      	adds	r3, #42	; 0x2a
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd ffc0 	bl	800526c <ld_word>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <find_volume+0x38e>
 80072f2:	230d      	movs	r3, #13
 80072f4:	e0b1      	b.n	800745a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	891b      	ldrh	r3, [r3, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <find_volume+0x39a>
 80072fe:	230d      	movs	r3, #13
 8007300:	e0ab      	b.n	800745a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	3338      	adds	r3, #56	; 0x38
 8007306:	332c      	adds	r3, #44	; 0x2c
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd ffc7 	bl	800529c <ld_dword>
 800730e:	4602      	mov	r2, r0
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	647b      	str	r3, [r7, #68]	; 0x44
 800731c:	e01f      	b.n	800735e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	891b      	ldrh	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <find_volume+0x3c2>
 8007326:	230d      	movs	r3, #13
 8007328:	e097      	b.n	800745a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800732e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007330:	441a      	add	r2, r3
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800733a:	2b02      	cmp	r3, #2
 800733c:	d103      	bne.n	8007346 <find_volume+0x3de>
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	e00a      	b.n	800735c <find_volume+0x3f4>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	4613      	mov	r3, r2
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	4413      	add	r3, r2
 8007350:	085a      	lsrs	r2, r3, #1
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800735c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	6a1a      	ldr	r2, [r3, #32]
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	899b      	ldrh	r3, [r3, #12]
 8007366:	4619      	mov	r1, r3
 8007368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736a:	440b      	add	r3, r1
 800736c:	3b01      	subs	r3, #1
 800736e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007370:	8989      	ldrh	r1, [r1, #12]
 8007372:	fbb3 f3f1 	udiv	r3, r3, r1
 8007376:	429a      	cmp	r2, r3
 8007378:	d201      	bcs.n	800737e <find_volume+0x416>
 800737a:	230d      	movs	r3, #13
 800737c:	e06d      	b.n	800745a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	f04f 32ff 	mov.w	r2, #4294967295
 8007384:	619a      	str	r2, [r3, #24]
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	2280      	movs	r2, #128	; 0x80
 8007392:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007398:	2b03      	cmp	r3, #3
 800739a:	d149      	bne.n	8007430 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	3338      	adds	r3, #56	; 0x38
 80073a0:	3330      	adds	r3, #48	; 0x30
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fd ff62 	bl	800526c <ld_word>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d140      	bne.n	8007430 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	3301      	adds	r3, #1
 80073b2:	4619      	mov	r1, r3
 80073b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073b6:	f7fe fa09 	bl	80057cc <move_window>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d137      	bne.n	8007430 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2200      	movs	r2, #0
 80073c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	3338      	adds	r3, #56	; 0x38
 80073ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd ff4c 	bl	800526c <ld_word>
 80073d4:	4603      	mov	r3, r0
 80073d6:	461a      	mov	r2, r3
 80073d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073dc:	429a      	cmp	r2, r3
 80073de:	d127      	bne.n	8007430 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	3338      	adds	r3, #56	; 0x38
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fd ff59 	bl	800529c <ld_dword>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <find_volume+0x4fc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d11e      	bne.n	8007430 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	3338      	adds	r3, #56	; 0x38
 80073f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd ff4e 	bl	800529c <ld_dword>
 8007400:	4603      	mov	r3, r0
 8007402:	4a19      	ldr	r2, [pc, #100]	; (8007468 <find_volume+0x500>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d113      	bne.n	8007430 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	3338      	adds	r3, #56	; 0x38
 800740c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007410:	4618      	mov	r0, r3
 8007412:	f7fd ff43 	bl	800529c <ld_dword>
 8007416:	4602      	mov	r2, r0
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	3338      	adds	r3, #56	; 0x38
 8007420:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007424:	4618      	mov	r0, r3
 8007426:	f7fd ff39 	bl	800529c <ld_dword>
 800742a:	4602      	mov	r2, r0
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007436:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007438:	4b0c      	ldr	r3, [pc, #48]	; (800746c <find_volume+0x504>)
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <find_volume+0x504>)
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	4b09      	ldr	r3, [pc, #36]	; (800746c <find_volume+0x504>)
 8007446:	881a      	ldrh	r2, [r3, #0]
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	4a08      	ldr	r2, [pc, #32]	; (8007470 <find_volume+0x508>)
 8007450:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007452:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007454:	f7fe f952 	bl	80056fc <clear_lock>
#endif
	return FR_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3758      	adds	r7, #88	; 0x58
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	41615252 	.word	0x41615252
 8007468:	61417272 	.word	0x61417272
 800746c:	20000630 	.word	0x20000630
 8007470:	20000654 	.word	0x20000654

08007474 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800747e:	2309      	movs	r3, #9
 8007480:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01c      	beq.n	80074c2 <validate+0x4e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d018      	beq.n	80074c2 <validate+0x4e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d013      	beq.n	80074c2 <validate+0x4e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	889a      	ldrh	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	88db      	ldrh	r3, [r3, #6]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d10c      	bne.n	80074c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fe3e 	bl	8005130 <disk_status>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <validate+0x4e>
			res = FR_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <validate+0x5a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	e000      	b.n	80074d0 <validate+0x5c>
 80074ce:	2300      	movs	r3, #0
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	6013      	str	r3, [r2, #0]
	return res;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074f2:	f107 0310 	add.w	r3, r7, #16
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fc9c 	bl	8006e34 <get_ldnumber>
 80074fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	da01      	bge.n	8007508 <f_mount+0x28>
 8007504:	230b      	movs	r3, #11
 8007506:	e02b      	b.n	8007560 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007508:	4a17      	ldr	r2, [pc, #92]	; (8007568 <f_mount+0x88>)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007510:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007518:	69b8      	ldr	r0, [r7, #24]
 800751a:	f7fe f8ef 	bl	80056fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	490d      	ldr	r1, [pc, #52]	; (8007568 <f_mount+0x88>)
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <f_mount+0x66>
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d001      	beq.n	800754a <f_mount+0x6a>
 8007546:	2300      	movs	r3, #0
 8007548:	e00a      	b.n	8007560 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800754a:	f107 010c 	add.w	r1, r7, #12
 800754e:	f107 0308 	add.w	r3, r7, #8
 8007552:	2200      	movs	r2, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff fd07 	bl	8006f68 <find_volume>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800755e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	2000062c 	.word	0x2000062c

0800756c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b09a      	sub	sp, #104	; 0x68
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <f_open+0x18>
 8007580:	2309      	movs	r3, #9
 8007582:	e1bb      	b.n	80078fc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800758a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800758c:	79fa      	ldrb	r2, [r7, #7]
 800758e:	f107 0114 	add.w	r1, r7, #20
 8007592:	f107 0308 	add.w	r3, r7, #8
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fce6 	bl	8006f68 <find_volume>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80075a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 819f 	bne.w	80078ea <f_open+0x37e>
		dj.obj.fs = fs;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	f107 0318 	add.w	r3, r7, #24
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fbc5 	bl	8006d48 <follow_path>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d11a      	bne.n	8007602 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80075cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075d0:	b25b      	sxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	da03      	bge.n	80075de <f_open+0x72>
				res = FR_INVALID_NAME;
 80075d6:	2306      	movs	r3, #6
 80075d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075dc:	e011      	b.n	8007602 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	f023 0301 	bic.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	f107 0318 	add.w	r3, r7, #24
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fd ff38 	bl	800546c <chk_lock>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	f003 031c 	and.w	r3, r3, #28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d07f      	beq.n	800770c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800760c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007610:	2b00      	cmp	r3, #0
 8007612:	d017      	beq.n	8007644 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007618:	2b04      	cmp	r3, #4
 800761a:	d10e      	bne.n	800763a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800761c:	f7fd ff82 	bl	8005524 <enq_lock>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <f_open+0xc8>
 8007626:	f107 0318 	add.w	r3, r7, #24
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff f8dc 	bl	80067e8 <dir_register>
 8007630:	4603      	mov	r3, r0
 8007632:	e000      	b.n	8007636 <f_open+0xca>
 8007634:	2312      	movs	r3, #18
 8007636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	f043 0308 	orr.w	r3, r3, #8
 8007640:	71fb      	strb	r3, [r7, #7]
 8007642:	e010      	b.n	8007666 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007644:	7fbb      	ldrb	r3, [r7, #30]
 8007646:	f003 0311 	and.w	r3, r3, #17
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <f_open+0xea>
					res = FR_DENIED;
 800764e:	2307      	movs	r3, #7
 8007650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007654:	e007      	b.n	8007666 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <f_open+0xfa>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007666:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800766a:	2b00      	cmp	r3, #0
 800766c:	d168      	bne.n	8007740 <f_open+0x1d4>
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d063      	beq.n	8007740 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007678:	f7fd fcfc 	bl	8005074 <get_fattime>
 800767c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	330e      	adds	r3, #14
 8007682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007684:	4618      	mov	r0, r3
 8007686:	f7fd fe47 	bl	8005318 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	3316      	adds	r3, #22
 800768e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007690:	4618      	mov	r0, r3
 8007692:	f7fd fe41 	bl	8005318 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	330b      	adds	r3, #11
 800769a:	2220      	movs	r2, #32
 800769c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a2:	4611      	mov	r1, r2
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fe17 	bl	80062d8 <ld_clust>
 80076aa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076b0:	2200      	movs	r2, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fe2f 	bl	8006316 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	331c      	adds	r3, #28
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fd fe2a 	bl	8005318 <st_dword>
					fs->wflag = 1;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2201      	movs	r2, #1
 80076c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80076ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d037      	beq.n	8007740 <f_open+0x1d4>
						dw = fs->winsect;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80076d6:	f107 0318 	add.w	r3, r7, #24
 80076da:	2200      	movs	r2, #0
 80076dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fb1f 	bl	8005d22 <remove_chain>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80076ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d126      	bne.n	8007740 <f_open+0x1d4>
							res = move_window(fs, dw);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe f868 	bl	80057cc <move_window>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007706:	3a01      	subs	r2, #1
 8007708:	615a      	str	r2, [r3, #20]
 800770a:	e019      	b.n	8007740 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800770c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007710:	2b00      	cmp	r3, #0
 8007712:	d115      	bne.n	8007740 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007714:	7fbb      	ldrb	r3, [r7, #30]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <f_open+0x1ba>
					res = FR_NO_FILE;
 800771e:	2304      	movs	r3, #4
 8007720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007724:	e00c      	b.n	8007740 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d007      	beq.n	8007740 <f_open+0x1d4>
 8007730:	7fbb      	ldrb	r3, [r7, #30]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <f_open+0x1d4>
						res = FR_DENIED;
 800773a:	2307      	movs	r3, #7
 800773c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007740:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007744:	2b00      	cmp	r3, #0
 8007746:	d128      	bne.n	800779a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007758:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf14      	ite	ne
 8007772:	2301      	movne	r3, #1
 8007774:	2300      	moveq	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	f107 0318 	add.w	r3, r7, #24
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd fef1 	bl	8005568 <inc_lock>
 8007786:	4602      	mov	r2, r0
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <f_open+0x22e>
 8007794:	2302      	movs	r3, #2
 8007796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800779a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f040 80a3 	bne.w	80078ea <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fd94 	bl	80062d8 <ld_clust>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	331c      	adds	r3, #28
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fd6e 	bl	800529c <ld_dword>
 80077c0:	4602      	mov	r2, r0
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	88da      	ldrh	r2, [r3, #6]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	79fa      	ldrb	r2, [r7, #7]
 80077de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3330      	adds	r3, #48	; 0x30
 80077f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd fdd8 	bl	80053b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d06e      	beq.n	80078ea <f_open+0x37e>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d06a      	beq.n	80078ea <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	895b      	ldrh	r3, [r3, #10]
 8007820:	461a      	mov	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	899b      	ldrh	r3, [r3, #12]
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007838:	e016      	b.n	8007868 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe f881 	bl	8005946 <get_fat>
 8007844:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007848:	2b01      	cmp	r3, #1
 800784a:	d802      	bhi.n	8007852 <f_open+0x2e6>
 800784c:	2302      	movs	r3, #2
 800784e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d102      	bne.n	8007860 <f_open+0x2f4>
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800786c:	2b00      	cmp	r3, #0
 800786e:	d103      	bne.n	8007878 <f_open+0x30c>
 8007870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007874:	429a      	cmp	r2, r3
 8007876:	d8e0      	bhi.n	800783a <f_open+0x2ce>
				}
				fp->clust = clst;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800787c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800787e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007882:	2b00      	cmp	r3, #0
 8007884:	d131      	bne.n	80078ea <f_open+0x37e>
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	899b      	ldrh	r3, [r3, #12]
 800788a:	461a      	mov	r2, r3
 800788c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007892:	fb01 f202 	mul.w	r2, r1, r2
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d026      	beq.n	80078ea <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe f831 	bl	8005908 <clust2sect>
 80078a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80078a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <f_open+0x34a>
						res = FR_INT_ERR;
 80078ae:	2302      	movs	r3, #2
 80078b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80078b4:	e019      	b.n	80078ea <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	899b      	ldrh	r3, [r3, #12]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078be:	fbb3 f2f2 	udiv	r2, r3, r2
 80078c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	7858      	ldrb	r0, [r3, #1]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	2301      	movs	r3, #1
 80078da:	f7fd fc69 	bl	80051b0 <disk_read>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <f_open+0x37e>
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80078ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <f_open+0x38c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80078f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3768      	adds	r7, #104	; 0x68
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08c      	sub	sp, #48	; 0x30
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f107 0210 	add.w	r2, r7, #16
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fda5 	bl	8007474 <validate>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007934:	2b00      	cmp	r3, #0
 8007936:	d107      	bne.n	8007948 <f_write+0x44>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	7d5b      	ldrb	r3, [r3, #21]
 800793c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <f_write+0x4a>
 8007948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800794c:	e16a      	b.n	8007c24 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	7d1b      	ldrb	r3, [r3, #20]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <f_write+0x5a>
 800795a:	2307      	movs	r3, #7
 800795c:	e162      	b.n	8007c24 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	f080 814c 	bcs.w	8007c08 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	43db      	mvns	r3, r3
 8007976:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007978:	e146      	b.n	8007c08 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	8992      	ldrh	r2, [r2, #12]
 8007982:	fbb3 f1f2 	udiv	r1, r3, r2
 8007986:	fb01 f202 	mul.w	r2, r1, r2
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 80f1 	bne.w	8007b74 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	8992      	ldrh	r2, [r2, #12]
 800799a:	fbb3 f3f2 	udiv	r3, r3, r2
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	8952      	ldrh	r2, [r2, #10]
 80079a2:	3a01      	subs	r2, #1
 80079a4:	4013      	ands	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d143      	bne.n	8007a36 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10c      	bne.n	80079d0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d11a      	bne.n	80079f8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fa10 	bl	8005dec <create_chain>
 80079cc:	62b8      	str	r0, [r7, #40]	; 0x28
 80079ce:	e013      	b.n	80079f8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	4619      	mov	r1, r3
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7fe fa9c 	bl	8005f1c <clmt_clust>
 80079e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80079e6:	e007      	b.n	80079f8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fe f9fb 	bl	8005dec <create_chain>
 80079f6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8109 	beq.w	8007c12 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d104      	bne.n	8007a10 <f_write+0x10c>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	755a      	strb	r2, [r3, #21]
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e109      	b.n	8007c24 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d104      	bne.n	8007a22 <f_write+0x11e>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	755a      	strb	r2, [r3, #21]
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e100      	b.n	8007c24 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a26:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <f_write+0x132>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	7d1b      	ldrb	r3, [r3, #20]
 8007a3a:	b25b      	sxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da18      	bge.n	8007a72 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	7858      	ldrb	r0, [r3, #1]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1a      	ldr	r2, [r3, #32]
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f7fd fbce 	bl	80051f0 <disk_write>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <f_write+0x160>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	755a      	strb	r2, [r3, #21]
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0df      	b.n	8007c24 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	7d1b      	ldrb	r3, [r3, #20]
 8007a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fd ff44 	bl	8005908 <clust2sect>
 8007a80:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <f_write+0x18e>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	755a      	strb	r2, [r3, #21]
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e0c8      	b.n	8007c24 <f_write+0x320>
			sect += csect;
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	4413      	add	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	899b      	ldrh	r3, [r3, #12]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d043      	beq.n	8007b36 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	8952      	ldrh	r2, [r2, #10]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d905      	bls.n	8007ac8 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	895b      	ldrh	r3, [r3, #10]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	7858      	ldrb	r0, [r3, #1]
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	69f9      	ldr	r1, [r7, #28]
 8007ad2:	f7fd fb8d 	bl	80051f0 <disk_write>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d004      	beq.n	8007ae6 <f_write+0x1e2>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	755a      	strb	r2, [r3, #21]
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e09e      	b.n	8007c24 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1a      	ldr	r2, [r3, #32]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	6a3a      	ldr	r2, [r7, #32]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d918      	bls.n	8007b26 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	8992      	ldrh	r2, [r2, #12]
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	18d1      	adds	r1, r2, r3
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	899b      	ldrh	r3, [r3, #12]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f7fd fc2c 	bl	8005370 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	7d1b      	ldrb	r3, [r3, #20]
 8007b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	899b      	ldrh	r3, [r3, #12]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	fb02 f303 	mul.w	r3, r2, r3
 8007b32:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007b34:	e04b      	b.n	8007bce <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d016      	beq.n	8007b6e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d210      	bcs.n	8007b6e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	7858      	ldrb	r0, [r3, #1]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b56:	2301      	movs	r3, #1
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	f7fd fb29 	bl	80051b0 <disk_read>
 8007b5e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d004      	beq.n	8007b6e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	755a      	strb	r2, [r3, #21]
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e05a      	b.n	8007c24 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	899b      	ldrh	r3, [r3, #12]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	8992      	ldrh	r2, [r2, #12]
 8007b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b86:	fb01 f202 	mul.w	r2, r1, r2
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	1ac3      	subs	r3, r0, r3
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d901      	bls.n	8007b9c <f_write+0x298>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	8992      	ldrh	r2, [r2, #12]
 8007baa:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bae:	fb00 f202 	mul.w	r2, r0, r2
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb8:	69f9      	ldr	r1, [r7, #28]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd fbd8 	bl	8005370 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	7d1b      	ldrb	r3, [r3, #20]
 8007bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	4413      	add	r3, r2
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	441a      	add	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	619a      	str	r2, [r3, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	bf38      	it	cc
 8007bee:	461a      	movcc	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	60da      	str	r2, [r3, #12]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	441a      	add	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f47f aeb5 	bne.w	800797a <f_write+0x76>
 8007c10:	e000      	b.n	8007c14 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c12:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	7d1b      	ldrb	r3, [r3, #20]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3730      	adds	r7, #48	; 0x30
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f107 0208 	add.w	r2, r7, #8
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fc19 	bl	8007474 <validate>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d168      	bne.n	8007d1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7d1b      	ldrb	r3, [r3, #20]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d062      	beq.n	8007d1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	7d1b      	ldrb	r3, [r3, #20]
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da15      	bge.n	8007c8e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	7858      	ldrb	r0, [r3, #1]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1a      	ldr	r2, [r3, #32]
 8007c70:	2301      	movs	r3, #1
 8007c72:	f7fd fabd 	bl	80051f0 <disk_write>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <f_sync+0x54>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e04f      	b.n	8007d20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c8e:	f7fd f9f1 	bl	8005074 <get_fattime>
 8007c92:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7fd fd95 	bl	80057cc <move_window>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d138      	bne.n	8007d1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	330b      	adds	r3, #11
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	330b      	adds	r3, #11
 8007cbc:	f042 0220 	orr.w	r2, r2, #32
 8007cc0:	b2d2      	uxtb	r2, r2
 8007cc2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	f7fe fb21 	bl	8006316 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f103 021c 	add.w	r2, r3, #28
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7fd fb19 	bl	8005318 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3316      	adds	r3, #22
 8007cea:	6939      	ldr	r1, [r7, #16]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fd fb13 	bl	8005318 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3312      	adds	r3, #18
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fd faf2 	bl	80052e2 <st_word>
					fs->wflag = 1;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2201      	movs	r2, #1
 8007d02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fd fd8e 	bl	8005828 <sync_fs>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7d1b      	ldrb	r3, [r3, #20]
 8007d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff ff7b 	bl	8007c2c <f_sync>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d118      	bne.n	8007d72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f107 0208 	add.w	r2, r7, #8
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fb93 	bl	8007474 <validate>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10c      	bne.n	8007d72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fd fc91 	bl	8005684 <dec_lock>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b0a      	cmp	r3, #10
 8007d8c:	d103      	bne.n	8007d96 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007d8e:	210d      	movs	r1, #13
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fff3 	bl	8007d7c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	db25      	blt.n	8007dee <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	60fa      	str	r2, [r7, #12]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b3c      	cmp	r3, #60	; 0x3c
 8007db4:	dd12      	ble.n	8007ddc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f103 010c 	add.w	r1, r3, #12
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	f7ff fd9d 	bl	8007904 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d101      	bne.n	8007dd6 <putc_bfd+0x5a>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e001      	b.n	8007dda <putc_bfd+0x5e>
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	e000      	b.n	8007df0 <putc_bfd+0x74>
	if (i < 0) return;
 8007dee:	bf00      	nop
}
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	db16      	blt.n	8007e34 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f103 010c 	add.w	r1, r3, #12
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	461a      	mov	r2, r3
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	f7ff fd73 	bl	8007904 <f_write>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d107      	bne.n	8007e34 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d102      	bne.n	8007e34 <putc_flush+0x3e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	e001      	b.n	8007e38 <putc_flush+0x42>
	return EOF;
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	609a      	str	r2, [r3, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b096      	sub	sp, #88	; 0x58
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007e74:	f107 030c 	add.w	r3, r7, #12
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff ffe0 	bl	8007e40 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007e80:	e009      	b.n	8007e96 <f_puts+0x2c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	781a      	ldrb	r2, [r3, #0]
 8007e8a:	f107 030c 	add.w	r3, r7, #12
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff ff73 	bl	8007d7c <putc_bfd>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f1      	bne.n	8007e82 <f_puts+0x18>
	return putc_flush(&pb);
 8007e9e:	f107 030c 	add.w	r3, r7, #12
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ffa7 	bl	8007df6 <putc_flush>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3758      	adds	r7, #88	; 0x58
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007ecc:	7a5b      	ldrb	r3, [r3, #9]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d131      	bne.n	8007f38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ed4:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007ed6:	7a5b      	ldrb	r3, [r3, #9]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007ede:	2100      	movs	r1, #0
 8007ee0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ee2:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007ee4:	7a5b      	ldrb	r3, [r3, #9]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007ef4:	7a5b      	ldrb	r3, [r3, #9]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007efc:	4413      	add	r3, r2
 8007efe:	79fa      	ldrb	r2, [r7, #7]
 8007f00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f02:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007f04:	7a5b      	ldrb	r3, [r3, #9]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	b2d1      	uxtb	r1, r2
 8007f0c:	4a0e      	ldr	r2, [pc, #56]	; (8007f48 <FATFS_LinkDriverEx+0x94>)
 8007f0e:	7251      	strb	r1, [r2, #9]
 8007f10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f12:	7dbb      	ldrb	r3, [r7, #22]
 8007f14:	3330      	adds	r3, #48	; 0x30
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	223a      	movs	r2, #58	; 0x3a
 8007f22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3302      	adds	r3, #2
 8007f28:	222f      	movs	r2, #47	; 0x2f
 8007f2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	3303      	adds	r3, #3
 8007f30:	2200      	movs	r2, #0
 8007f32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	20000854 	.word	0x20000854

08007f4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f56:	2200      	movs	r2, #0
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff ffaa 	bl	8007eb4 <FATFS_LinkDriverEx>
 8007f60:	4603      	mov	r3, r0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f7c:	d802      	bhi.n	8007f84 <ff_convert+0x18>
		c = chr;
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	81fb      	strh	r3, [r7, #14]
 8007f82:	e025      	b.n	8007fd0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	2bff      	cmp	r3, #255	; 0xff
 8007f8e:	d805      	bhi.n	8007f9c <ff_convert+0x30>
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	3b80      	subs	r3, #128	; 0x80
 8007f94:	4a12      	ldr	r2, [pc, #72]	; (8007fe0 <ff_convert+0x74>)
 8007f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f9a:	e000      	b.n	8007f9e <ff_convert+0x32>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	81fb      	strh	r3, [r7, #14]
 8007fa0:	e016      	b.n	8007fd0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	81fb      	strh	r3, [r7, #14]
 8007fa6:	e009      	b.n	8007fbc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <ff_convert+0x74>)
 8007fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d006      	beq.n	8007fc4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007fb6:	89fb      	ldrh	r3, [r7, #14]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	81fb      	strh	r3, [r7, #14]
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007fc0:	d9f2      	bls.n	8007fa8 <ff_convert+0x3c>
 8007fc2:	e000      	b.n	8007fc6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007fc4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007fc6:	89fb      	ldrh	r3, [r7, #14]
 8007fc8:	3380      	adds	r3, #128	; 0x80
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	08008dac 	.word	0x08008dac

08007fe4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff4:	d201      	bcs.n	8007ffa <ff_wtoupper+0x16>
 8007ff6:	4b3e      	ldr	r3, [pc, #248]	; (80080f0 <ff_wtoupper+0x10c>)
 8007ff8:	e000      	b.n	8007ffc <ff_wtoupper+0x18>
 8007ffa:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <ff_wtoupper+0x110>)
 8007ffc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	1c9a      	adds	r2, r3, #2
 8008002:	617a      	str	r2, [r7, #20]
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008008:	8a7b      	ldrh	r3, [r7, #18]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d068      	beq.n	80080e0 <ff_wtoupper+0xfc>
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	8a7b      	ldrh	r3, [r7, #18]
 8008012:	429a      	cmp	r2, r3
 8008014:	d364      	bcc.n	80080e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	1c9a      	adds	r2, r3, #2
 800801a:	617a      	str	r2, [r7, #20]
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	823b      	strh	r3, [r7, #16]
 8008020:	8a3b      	ldrh	r3, [r7, #16]
 8008022:	0a1b      	lsrs	r3, r3, #8
 8008024:	81fb      	strh	r3, [r7, #14]
 8008026:	8a3b      	ldrh	r3, [r7, #16]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800802c:	88fa      	ldrh	r2, [r7, #6]
 800802e:	8a79      	ldrh	r1, [r7, #18]
 8008030:	8a3b      	ldrh	r3, [r7, #16]
 8008032:	440b      	add	r3, r1
 8008034:	429a      	cmp	r2, r3
 8008036:	da49      	bge.n	80080cc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008038:	89fb      	ldrh	r3, [r7, #14]
 800803a:	2b08      	cmp	r3, #8
 800803c:	d84f      	bhi.n	80080de <ff_wtoupper+0xfa>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <ff_wtoupper+0x60>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008069 	.word	0x08008069
 8008048:	0800807b 	.word	0x0800807b
 800804c:	08008091 	.word	0x08008091
 8008050:	08008099 	.word	0x08008099
 8008054:	080080a1 	.word	0x080080a1
 8008058:	080080a9 	.word	0x080080a9
 800805c:	080080b1 	.word	0x080080b1
 8008060:	080080b9 	.word	0x080080b9
 8008064:	080080c1 	.word	0x080080c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008068:	88fa      	ldrh	r2, [r7, #6]
 800806a:	8a7b      	ldrh	r3, [r7, #18]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	4413      	add	r3, r2
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	80fb      	strh	r3, [r7, #6]
 8008078:	e027      	b.n	80080ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800807a:	88fa      	ldrh	r2, [r7, #6]
 800807c:	8a7b      	ldrh	r3, [r7, #18]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	b29b      	uxth	r3, r3
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	b29b      	uxth	r3, r3
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	80fb      	strh	r3, [r7, #6]
 800808e:	e01c      	b.n	80080ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	3b10      	subs	r3, #16
 8008094:	80fb      	strh	r3, [r7, #6]
 8008096:	e018      	b.n	80080ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	3b20      	subs	r3, #32
 800809c:	80fb      	strh	r3, [r7, #6]
 800809e:	e014      	b.n	80080ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	3b30      	subs	r3, #48	; 0x30
 80080a4:	80fb      	strh	r3, [r7, #6]
 80080a6:	e010      	b.n	80080ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	3b1a      	subs	r3, #26
 80080ac:	80fb      	strh	r3, [r7, #6]
 80080ae:	e00c      	b.n	80080ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	3308      	adds	r3, #8
 80080b4:	80fb      	strh	r3, [r7, #6]
 80080b6:	e008      	b.n	80080ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80080b8:	88fb      	ldrh	r3, [r7, #6]
 80080ba:	3b50      	subs	r3, #80	; 0x50
 80080bc:	80fb      	strh	r3, [r7, #6]
 80080be:	e004      	b.n	80080ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80080c6:	80fb      	strh	r3, [r7, #6]
 80080c8:	bf00      	nop
			}
			break;
 80080ca:	e008      	b.n	80080de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80080cc:	89fb      	ldrh	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d195      	bne.n	8007ffe <ff_wtoupper+0x1a>
 80080d2:	8a3b      	ldrh	r3, [r7, #16]
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4413      	add	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80080dc:	e78f      	b.n	8007ffe <ff_wtoupper+0x1a>
			break;
 80080de:	bf00      	nop
	}

	return chr;
 80080e0:	88fb      	ldrh	r3, [r7, #6]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	08008eac 	.word	0x08008eac
 80080f4:	080090a0 	.word	0x080090a0

080080f8 <siprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	b500      	push	{lr}
 80080fc:	b09c      	sub	sp, #112	; 0x70
 80080fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008100:	9002      	str	r0, [sp, #8]
 8008102:	9006      	str	r0, [sp, #24]
 8008104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <siprintf+0x38>)
 800810a:	9107      	str	r1, [sp, #28]
 800810c:	9104      	str	r1, [sp, #16]
 800810e:	4909      	ldr	r1, [pc, #36]	; (8008134 <siprintf+0x3c>)
 8008110:	f853 2b04 	ldr.w	r2, [r3], #4
 8008114:	9105      	str	r1, [sp, #20]
 8008116:	6800      	ldr	r0, [r0, #0]
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	a902      	add	r1, sp, #8
 800811c:	f000 f9a8 	bl	8008470 <_svfiprintf_r>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	b01c      	add	sp, #112	; 0x70
 8008128:	f85d eb04 	ldr.w	lr, [sp], #4
 800812c:	b003      	add	sp, #12
 800812e:	4770      	bx	lr
 8008130:	20000070 	.word	0x20000070
 8008134:	ffff0208 	.word	0xffff0208

08008138 <memset>:
 8008138:	4402      	add	r2, r0
 800813a:	4603      	mov	r3, r0
 800813c:	4293      	cmp	r3, r2
 800813e:	d100      	bne.n	8008142 <memset+0xa>
 8008140:	4770      	bx	lr
 8008142:	f803 1b01 	strb.w	r1, [r3], #1
 8008146:	e7f9      	b.n	800813c <memset+0x4>

08008148 <strstr>:
 8008148:	780a      	ldrb	r2, [r1, #0]
 800814a:	b570      	push	{r4, r5, r6, lr}
 800814c:	b96a      	cbnz	r2, 800816a <strstr+0x22>
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	429a      	cmp	r2, r3
 8008152:	d109      	bne.n	8008168 <strstr+0x20>
 8008154:	460c      	mov	r4, r1
 8008156:	4605      	mov	r5, r0
 8008158:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0f6      	beq.n	800814e <strstr+0x6>
 8008160:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008164:	429e      	cmp	r6, r3
 8008166:	d0f7      	beq.n	8008158 <strstr+0x10>
 8008168:	3001      	adds	r0, #1
 800816a:	7803      	ldrb	r3, [r0, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ef      	bne.n	8008150 <strstr+0x8>
 8008170:	4618      	mov	r0, r3
 8008172:	e7ec      	b.n	800814e <strstr+0x6>

08008174 <__errno>:
 8008174:	4b01      	ldr	r3, [pc, #4]	; (800817c <__errno+0x8>)
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000070 	.word	0x20000070

08008180 <__libc_init_array>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	4d0d      	ldr	r5, [pc, #52]	; (80081b8 <__libc_init_array+0x38>)
 8008184:	4c0d      	ldr	r4, [pc, #52]	; (80081bc <__libc_init_array+0x3c>)
 8008186:	1b64      	subs	r4, r4, r5
 8008188:	10a4      	asrs	r4, r4, #2
 800818a:	2600      	movs	r6, #0
 800818c:	42a6      	cmp	r6, r4
 800818e:	d109      	bne.n	80081a4 <__libc_init_array+0x24>
 8008190:	4d0b      	ldr	r5, [pc, #44]	; (80081c0 <__libc_init_array+0x40>)
 8008192:	4c0c      	ldr	r4, [pc, #48]	; (80081c4 <__libc_init_array+0x44>)
 8008194:	f000 fc6a 	bl	8008a6c <_init>
 8008198:	1b64      	subs	r4, r4, r5
 800819a:	10a4      	asrs	r4, r4, #2
 800819c:	2600      	movs	r6, #0
 800819e:	42a6      	cmp	r6, r4
 80081a0:	d105      	bne.n	80081ae <__libc_init_array+0x2e>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a8:	4798      	blx	r3
 80081aa:	3601      	adds	r6, #1
 80081ac:	e7ee      	b.n	800818c <__libc_init_array+0xc>
 80081ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b2:	4798      	blx	r3
 80081b4:	3601      	adds	r6, #1
 80081b6:	e7f2      	b.n	800819e <__libc_init_array+0x1e>
 80081b8:	08009198 	.word	0x08009198
 80081bc:	08009198 	.word	0x08009198
 80081c0:	08009198 	.word	0x08009198
 80081c4:	0800919c 	.word	0x0800919c

080081c8 <__retarget_lock_acquire_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_release_recursive>:
 80081ca:	4770      	bx	lr

080081cc <_free_r>:
 80081cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d044      	beq.n	800825c <_free_r+0x90>
 80081d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f1a1 0404 	sub.w	r4, r1, #4
 80081de:	bfb8      	it	lt
 80081e0:	18e4      	addlt	r4, r4, r3
 80081e2:	f000 f8df 	bl	80083a4 <__malloc_lock>
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <_free_r+0x94>)
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	b933      	cbnz	r3, 80081fc <_free_r+0x30>
 80081ee:	6063      	str	r3, [r4, #4]
 80081f0:	6014      	str	r4, [r2, #0]
 80081f2:	b003      	add	sp, #12
 80081f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081f8:	f000 b8da 	b.w	80083b0 <__malloc_unlock>
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d908      	bls.n	8008212 <_free_r+0x46>
 8008200:	6825      	ldr	r5, [r4, #0]
 8008202:	1961      	adds	r1, r4, r5
 8008204:	428b      	cmp	r3, r1
 8008206:	bf01      	itttt	eq
 8008208:	6819      	ldreq	r1, [r3, #0]
 800820a:	685b      	ldreq	r3, [r3, #4]
 800820c:	1949      	addeq	r1, r1, r5
 800820e:	6021      	streq	r1, [r4, #0]
 8008210:	e7ed      	b.n	80081ee <_free_r+0x22>
 8008212:	461a      	mov	r2, r3
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	b10b      	cbz	r3, 800821c <_free_r+0x50>
 8008218:	42a3      	cmp	r3, r4
 800821a:	d9fa      	bls.n	8008212 <_free_r+0x46>
 800821c:	6811      	ldr	r1, [r2, #0]
 800821e:	1855      	adds	r5, r2, r1
 8008220:	42a5      	cmp	r5, r4
 8008222:	d10b      	bne.n	800823c <_free_r+0x70>
 8008224:	6824      	ldr	r4, [r4, #0]
 8008226:	4421      	add	r1, r4
 8008228:	1854      	adds	r4, r2, r1
 800822a:	42a3      	cmp	r3, r4
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	d1e0      	bne.n	80081f2 <_free_r+0x26>
 8008230:	681c      	ldr	r4, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	6053      	str	r3, [r2, #4]
 8008236:	440c      	add	r4, r1
 8008238:	6014      	str	r4, [r2, #0]
 800823a:	e7da      	b.n	80081f2 <_free_r+0x26>
 800823c:	d902      	bls.n	8008244 <_free_r+0x78>
 800823e:	230c      	movs	r3, #12
 8008240:	6003      	str	r3, [r0, #0]
 8008242:	e7d6      	b.n	80081f2 <_free_r+0x26>
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	1961      	adds	r1, r4, r5
 8008248:	428b      	cmp	r3, r1
 800824a:	bf04      	itt	eq
 800824c:	6819      	ldreq	r1, [r3, #0]
 800824e:	685b      	ldreq	r3, [r3, #4]
 8008250:	6063      	str	r3, [r4, #4]
 8008252:	bf04      	itt	eq
 8008254:	1949      	addeq	r1, r1, r5
 8008256:	6021      	streq	r1, [r4, #0]
 8008258:	6054      	str	r4, [r2, #4]
 800825a:	e7ca      	b.n	80081f2 <_free_r+0x26>
 800825c:	b003      	add	sp, #12
 800825e:	bd30      	pop	{r4, r5, pc}
 8008260:	200009a0 	.word	0x200009a0

08008264 <sbrk_aligned>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4e0e      	ldr	r6, [pc, #56]	; (80082a0 <sbrk_aligned+0x3c>)
 8008268:	460c      	mov	r4, r1
 800826a:	6831      	ldr	r1, [r6, #0]
 800826c:	4605      	mov	r5, r0
 800826e:	b911      	cbnz	r1, 8008276 <sbrk_aligned+0x12>
 8008270:	f000 fba6 	bl	80089c0 <_sbrk_r>
 8008274:	6030      	str	r0, [r6, #0]
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	f000 fba1 	bl	80089c0 <_sbrk_r>
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	d00a      	beq.n	8008298 <sbrk_aligned+0x34>
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d007      	beq.n	800829c <sbrk_aligned+0x38>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fb96 	bl	80089c0 <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d101      	bne.n	800829c <sbrk_aligned+0x38>
 8008298:	f04f 34ff 	mov.w	r4, #4294967295
 800829c:	4620      	mov	r0, r4
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	200009a4 	.word	0x200009a4

080082a4 <_malloc_r>:
 80082a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a8:	1ccd      	adds	r5, r1, #3
 80082aa:	f025 0503 	bic.w	r5, r5, #3
 80082ae:	3508      	adds	r5, #8
 80082b0:	2d0c      	cmp	r5, #12
 80082b2:	bf38      	it	cc
 80082b4:	250c      	movcc	r5, #12
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	4607      	mov	r7, r0
 80082ba:	db01      	blt.n	80082c0 <_malloc_r+0x1c>
 80082bc:	42a9      	cmp	r1, r5
 80082be:	d905      	bls.n	80082cc <_malloc_r+0x28>
 80082c0:	230c      	movs	r3, #12
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	2600      	movs	r6, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083a0 <_malloc_r+0xfc>
 80082d0:	f000 f868 	bl	80083a4 <__malloc_lock>
 80082d4:	f8d8 3000 	ldr.w	r3, [r8]
 80082d8:	461c      	mov	r4, r3
 80082da:	bb5c      	cbnz	r4, 8008334 <_malloc_r+0x90>
 80082dc:	4629      	mov	r1, r5
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff ffc0 	bl	8008264 <sbrk_aligned>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	4604      	mov	r4, r0
 80082e8:	d155      	bne.n	8008396 <_malloc_r+0xf2>
 80082ea:	f8d8 4000 	ldr.w	r4, [r8]
 80082ee:	4626      	mov	r6, r4
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	d145      	bne.n	8008380 <_malloc_r+0xdc>
 80082f4:	2c00      	cmp	r4, #0
 80082f6:	d048      	beq.n	800838a <_malloc_r+0xe6>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	4631      	mov	r1, r6
 80082fc:	4638      	mov	r0, r7
 80082fe:	eb04 0903 	add.w	r9, r4, r3
 8008302:	f000 fb5d 	bl	80089c0 <_sbrk_r>
 8008306:	4581      	cmp	r9, r0
 8008308:	d13f      	bne.n	800838a <_malloc_r+0xe6>
 800830a:	6821      	ldr	r1, [r4, #0]
 800830c:	1a6d      	subs	r5, r5, r1
 800830e:	4629      	mov	r1, r5
 8008310:	4638      	mov	r0, r7
 8008312:	f7ff ffa7 	bl	8008264 <sbrk_aligned>
 8008316:	3001      	adds	r0, #1
 8008318:	d037      	beq.n	800838a <_malloc_r+0xe6>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	442b      	add	r3, r5
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	f8d8 3000 	ldr.w	r3, [r8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d038      	beq.n	800839a <_malloc_r+0xf6>
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	42a2      	cmp	r2, r4
 800832c:	d12b      	bne.n	8008386 <_malloc_r+0xe2>
 800832e:	2200      	movs	r2, #0
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	e00f      	b.n	8008354 <_malloc_r+0xb0>
 8008334:	6822      	ldr	r2, [r4, #0]
 8008336:	1b52      	subs	r2, r2, r5
 8008338:	d41f      	bmi.n	800837a <_malloc_r+0xd6>
 800833a:	2a0b      	cmp	r2, #11
 800833c:	d917      	bls.n	800836e <_malloc_r+0xca>
 800833e:	1961      	adds	r1, r4, r5
 8008340:	42a3      	cmp	r3, r4
 8008342:	6025      	str	r5, [r4, #0]
 8008344:	bf18      	it	ne
 8008346:	6059      	strne	r1, [r3, #4]
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	bf08      	it	eq
 800834c:	f8c8 1000 	streq.w	r1, [r8]
 8008350:	5162      	str	r2, [r4, r5]
 8008352:	604b      	str	r3, [r1, #4]
 8008354:	4638      	mov	r0, r7
 8008356:	f104 060b 	add.w	r6, r4, #11
 800835a:	f000 f829 	bl	80083b0 <__malloc_unlock>
 800835e:	f026 0607 	bic.w	r6, r6, #7
 8008362:	1d23      	adds	r3, r4, #4
 8008364:	1af2      	subs	r2, r6, r3
 8008366:	d0ae      	beq.n	80082c6 <_malloc_r+0x22>
 8008368:	1b9b      	subs	r3, r3, r6
 800836a:	50a3      	str	r3, [r4, r2]
 800836c:	e7ab      	b.n	80082c6 <_malloc_r+0x22>
 800836e:	42a3      	cmp	r3, r4
 8008370:	6862      	ldr	r2, [r4, #4]
 8008372:	d1dd      	bne.n	8008330 <_malloc_r+0x8c>
 8008374:	f8c8 2000 	str.w	r2, [r8]
 8008378:	e7ec      	b.n	8008354 <_malloc_r+0xb0>
 800837a:	4623      	mov	r3, r4
 800837c:	6864      	ldr	r4, [r4, #4]
 800837e:	e7ac      	b.n	80082da <_malloc_r+0x36>
 8008380:	4634      	mov	r4, r6
 8008382:	6876      	ldr	r6, [r6, #4]
 8008384:	e7b4      	b.n	80082f0 <_malloc_r+0x4c>
 8008386:	4613      	mov	r3, r2
 8008388:	e7cc      	b.n	8008324 <_malloc_r+0x80>
 800838a:	230c      	movs	r3, #12
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	4638      	mov	r0, r7
 8008390:	f000 f80e 	bl	80083b0 <__malloc_unlock>
 8008394:	e797      	b.n	80082c6 <_malloc_r+0x22>
 8008396:	6025      	str	r5, [r4, #0]
 8008398:	e7dc      	b.n	8008354 <_malloc_r+0xb0>
 800839a:	605b      	str	r3, [r3, #4]
 800839c:	deff      	udf	#255	; 0xff
 800839e:	bf00      	nop
 80083a0:	200009a0 	.word	0x200009a0

080083a4 <__malloc_lock>:
 80083a4:	4801      	ldr	r0, [pc, #4]	; (80083ac <__malloc_lock+0x8>)
 80083a6:	f7ff bf0f 	b.w	80081c8 <__retarget_lock_acquire_recursive>
 80083aa:	bf00      	nop
 80083ac:	2000099c 	.word	0x2000099c

080083b0 <__malloc_unlock>:
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <__malloc_unlock+0x8>)
 80083b2:	f7ff bf0a 	b.w	80081ca <__retarget_lock_release_recursive>
 80083b6:	bf00      	nop
 80083b8:	2000099c 	.word	0x2000099c

080083bc <__ssputs_r>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	688e      	ldr	r6, [r1, #8]
 80083c2:	461f      	mov	r7, r3
 80083c4:	42be      	cmp	r6, r7
 80083c6:	680b      	ldr	r3, [r1, #0]
 80083c8:	4682      	mov	sl, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	4690      	mov	r8, r2
 80083ce:	d82c      	bhi.n	800842a <__ssputs_r+0x6e>
 80083d0:	898a      	ldrh	r2, [r1, #12]
 80083d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083d6:	d026      	beq.n	8008426 <__ssputs_r+0x6a>
 80083d8:	6965      	ldr	r5, [r4, #20]
 80083da:	6909      	ldr	r1, [r1, #16]
 80083dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083e0:	eba3 0901 	sub.w	r9, r3, r1
 80083e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083e8:	1c7b      	adds	r3, r7, #1
 80083ea:	444b      	add	r3, r9
 80083ec:	106d      	asrs	r5, r5, #1
 80083ee:	429d      	cmp	r5, r3
 80083f0:	bf38      	it	cc
 80083f2:	461d      	movcc	r5, r3
 80083f4:	0553      	lsls	r3, r2, #21
 80083f6:	d527      	bpl.n	8008448 <__ssputs_r+0x8c>
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7ff ff53 	bl	80082a4 <_malloc_r>
 80083fe:	4606      	mov	r6, r0
 8008400:	b360      	cbz	r0, 800845c <__ssputs_r+0xa0>
 8008402:	6921      	ldr	r1, [r4, #16]
 8008404:	464a      	mov	r2, r9
 8008406:	f000 faeb 	bl	80089e0 <memcpy>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	6126      	str	r6, [r4, #16]
 8008418:	6165      	str	r5, [r4, #20]
 800841a:	444e      	add	r6, r9
 800841c:	eba5 0509 	sub.w	r5, r5, r9
 8008420:	6026      	str	r6, [r4, #0]
 8008422:	60a5      	str	r5, [r4, #8]
 8008424:	463e      	mov	r6, r7
 8008426:	42be      	cmp	r6, r7
 8008428:	d900      	bls.n	800842c <__ssputs_r+0x70>
 800842a:	463e      	mov	r6, r7
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	4632      	mov	r2, r6
 8008430:	4641      	mov	r1, r8
 8008432:	f000 faab 	bl	800898c <memmove>
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	1b9b      	subs	r3, r3, r6
 800843a:	60a3      	str	r3, [r4, #8]
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	4433      	add	r3, r6
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	2000      	movs	r0, #0
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	462a      	mov	r2, r5
 800844a:	f000 fad7 	bl	80089fc <_realloc_r>
 800844e:	4606      	mov	r6, r0
 8008450:	2800      	cmp	r0, #0
 8008452:	d1e0      	bne.n	8008416 <__ssputs_r+0x5a>
 8008454:	6921      	ldr	r1, [r4, #16]
 8008456:	4650      	mov	r0, sl
 8008458:	f7ff feb8 	bl	80081cc <_free_r>
 800845c:	230c      	movs	r3, #12
 800845e:	f8ca 3000 	str.w	r3, [sl]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	f04f 30ff 	mov.w	r0, #4294967295
 800846e:	e7e9      	b.n	8008444 <__ssputs_r+0x88>

08008470 <_svfiprintf_r>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	4698      	mov	r8, r3
 8008476:	898b      	ldrh	r3, [r1, #12]
 8008478:	061b      	lsls	r3, r3, #24
 800847a:	b09d      	sub	sp, #116	; 0x74
 800847c:	4607      	mov	r7, r0
 800847e:	460d      	mov	r5, r1
 8008480:	4614      	mov	r4, r2
 8008482:	d50e      	bpl.n	80084a2 <_svfiprintf_r+0x32>
 8008484:	690b      	ldr	r3, [r1, #16]
 8008486:	b963      	cbnz	r3, 80084a2 <_svfiprintf_r+0x32>
 8008488:	2140      	movs	r1, #64	; 0x40
 800848a:	f7ff ff0b 	bl	80082a4 <_malloc_r>
 800848e:	6028      	str	r0, [r5, #0]
 8008490:	6128      	str	r0, [r5, #16]
 8008492:	b920      	cbnz	r0, 800849e <_svfiprintf_r+0x2e>
 8008494:	230c      	movs	r3, #12
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	e0d0      	b.n	8008640 <_svfiprintf_r+0x1d0>
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	616b      	str	r3, [r5, #20]
 80084a2:	2300      	movs	r3, #0
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	2320      	movs	r3, #32
 80084a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80084b0:	2330      	movs	r3, #48	; 0x30
 80084b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008658 <_svfiprintf_r+0x1e8>
 80084b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ba:	f04f 0901 	mov.w	r9, #1
 80084be:	4623      	mov	r3, r4
 80084c0:	469a      	mov	sl, r3
 80084c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c6:	b10a      	cbz	r2, 80084cc <_svfiprintf_r+0x5c>
 80084c8:	2a25      	cmp	r2, #37	; 0x25
 80084ca:	d1f9      	bne.n	80084c0 <_svfiprintf_r+0x50>
 80084cc:	ebba 0b04 	subs.w	fp, sl, r4
 80084d0:	d00b      	beq.n	80084ea <_svfiprintf_r+0x7a>
 80084d2:	465b      	mov	r3, fp
 80084d4:	4622      	mov	r2, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff ff6f 	bl	80083bc <__ssputs_r>
 80084de:	3001      	adds	r0, #1
 80084e0:	f000 80a9 	beq.w	8008636 <_svfiprintf_r+0x1c6>
 80084e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e6:	445a      	add	r2, fp
 80084e8:	9209      	str	r2, [sp, #36]	; 0x24
 80084ea:	f89a 3000 	ldrb.w	r3, [sl]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80a1 	beq.w	8008636 <_svfiprintf_r+0x1c6>
 80084f4:	2300      	movs	r3, #0
 80084f6:	f04f 32ff 	mov.w	r2, #4294967295
 80084fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084fe:	f10a 0a01 	add.w	sl, sl, #1
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	9307      	str	r3, [sp, #28]
 8008506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800850a:	931a      	str	r3, [sp, #104]	; 0x68
 800850c:	4654      	mov	r4, sl
 800850e:	2205      	movs	r2, #5
 8008510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008514:	4850      	ldr	r0, [pc, #320]	; (8008658 <_svfiprintf_r+0x1e8>)
 8008516:	f7f7 fe73 	bl	8000200 <memchr>
 800851a:	9a04      	ldr	r2, [sp, #16]
 800851c:	b9d8      	cbnz	r0, 8008556 <_svfiprintf_r+0xe6>
 800851e:	06d0      	lsls	r0, r2, #27
 8008520:	bf44      	itt	mi
 8008522:	2320      	movmi	r3, #32
 8008524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008528:	0711      	lsls	r1, r2, #28
 800852a:	bf44      	itt	mi
 800852c:	232b      	movmi	r3, #43	; 0x2b
 800852e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008532:	f89a 3000 	ldrb.w	r3, [sl]
 8008536:	2b2a      	cmp	r3, #42	; 0x2a
 8008538:	d015      	beq.n	8008566 <_svfiprintf_r+0xf6>
 800853a:	9a07      	ldr	r2, [sp, #28]
 800853c:	4654      	mov	r4, sl
 800853e:	2000      	movs	r0, #0
 8008540:	f04f 0c0a 	mov.w	ip, #10
 8008544:	4621      	mov	r1, r4
 8008546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800854a:	3b30      	subs	r3, #48	; 0x30
 800854c:	2b09      	cmp	r3, #9
 800854e:	d94d      	bls.n	80085ec <_svfiprintf_r+0x17c>
 8008550:	b1b0      	cbz	r0, 8008580 <_svfiprintf_r+0x110>
 8008552:	9207      	str	r2, [sp, #28]
 8008554:	e014      	b.n	8008580 <_svfiprintf_r+0x110>
 8008556:	eba0 0308 	sub.w	r3, r0, r8
 800855a:	fa09 f303 	lsl.w	r3, r9, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	46a2      	mov	sl, r4
 8008564:	e7d2      	b.n	800850c <_svfiprintf_r+0x9c>
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	1d19      	adds	r1, r3, #4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	9103      	str	r1, [sp, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfbb      	ittet	lt
 8008572:	425b      	neglt	r3, r3
 8008574:	f042 0202 	orrlt.w	r2, r2, #2
 8008578:	9307      	strge	r3, [sp, #28]
 800857a:	9307      	strlt	r3, [sp, #28]
 800857c:	bfb8      	it	lt
 800857e:	9204      	strlt	r2, [sp, #16]
 8008580:	7823      	ldrb	r3, [r4, #0]
 8008582:	2b2e      	cmp	r3, #46	; 0x2e
 8008584:	d10c      	bne.n	80085a0 <_svfiprintf_r+0x130>
 8008586:	7863      	ldrb	r3, [r4, #1]
 8008588:	2b2a      	cmp	r3, #42	; 0x2a
 800858a:	d134      	bne.n	80085f6 <_svfiprintf_r+0x186>
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	9203      	str	r2, [sp, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	bfb8      	it	lt
 8008598:	f04f 33ff 	movlt.w	r3, #4294967295
 800859c:	3402      	adds	r4, #2
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008668 <_svfiprintf_r+0x1f8>
 80085a4:	7821      	ldrb	r1, [r4, #0]
 80085a6:	2203      	movs	r2, #3
 80085a8:	4650      	mov	r0, sl
 80085aa:	f7f7 fe29 	bl	8000200 <memchr>
 80085ae:	b138      	cbz	r0, 80085c0 <_svfiprintf_r+0x150>
 80085b0:	9b04      	ldr	r3, [sp, #16]
 80085b2:	eba0 000a 	sub.w	r0, r0, sl
 80085b6:	2240      	movs	r2, #64	; 0x40
 80085b8:	4082      	lsls	r2, r0
 80085ba:	4313      	orrs	r3, r2
 80085bc:	3401      	adds	r4, #1
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c4:	4825      	ldr	r0, [pc, #148]	; (800865c <_svfiprintf_r+0x1ec>)
 80085c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ca:	2206      	movs	r2, #6
 80085cc:	f7f7 fe18 	bl	8000200 <memchr>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d038      	beq.n	8008646 <_svfiprintf_r+0x1d6>
 80085d4:	4b22      	ldr	r3, [pc, #136]	; (8008660 <_svfiprintf_r+0x1f0>)
 80085d6:	bb1b      	cbnz	r3, 8008620 <_svfiprintf_r+0x1b0>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	3307      	adds	r3, #7
 80085dc:	f023 0307 	bic.w	r3, r3, #7
 80085e0:	3308      	adds	r3, #8
 80085e2:	9303      	str	r3, [sp, #12]
 80085e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e6:	4433      	add	r3, r6
 80085e8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ea:	e768      	b.n	80084be <_svfiprintf_r+0x4e>
 80085ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80085f0:	460c      	mov	r4, r1
 80085f2:	2001      	movs	r0, #1
 80085f4:	e7a6      	b.n	8008544 <_svfiprintf_r+0xd4>
 80085f6:	2300      	movs	r3, #0
 80085f8:	3401      	adds	r4, #1
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f04f 0c0a 	mov.w	ip, #10
 8008602:	4620      	mov	r0, r4
 8008604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008608:	3a30      	subs	r2, #48	; 0x30
 800860a:	2a09      	cmp	r2, #9
 800860c:	d903      	bls.n	8008616 <_svfiprintf_r+0x1a6>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0c6      	beq.n	80085a0 <_svfiprintf_r+0x130>
 8008612:	9105      	str	r1, [sp, #20]
 8008614:	e7c4      	b.n	80085a0 <_svfiprintf_r+0x130>
 8008616:	fb0c 2101 	mla	r1, ip, r1, r2
 800861a:	4604      	mov	r4, r0
 800861c:	2301      	movs	r3, #1
 800861e:	e7f0      	b.n	8008602 <_svfiprintf_r+0x192>
 8008620:	ab03      	add	r3, sp, #12
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	462a      	mov	r2, r5
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <_svfiprintf_r+0x1f4>)
 8008628:	a904      	add	r1, sp, #16
 800862a:	4638      	mov	r0, r7
 800862c:	f3af 8000 	nop.w
 8008630:	1c42      	adds	r2, r0, #1
 8008632:	4606      	mov	r6, r0
 8008634:	d1d6      	bne.n	80085e4 <_svfiprintf_r+0x174>
 8008636:	89ab      	ldrh	r3, [r5, #12]
 8008638:	065b      	lsls	r3, r3, #25
 800863a:	f53f af2d 	bmi.w	8008498 <_svfiprintf_r+0x28>
 800863e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008640:	b01d      	add	sp, #116	; 0x74
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	ab03      	add	r3, sp, #12
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	462a      	mov	r2, r5
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <_svfiprintf_r+0x1f4>)
 800864e:	a904      	add	r1, sp, #16
 8008650:	4638      	mov	r0, r7
 8008652:	f000 f879 	bl	8008748 <_printf_i>
 8008656:	e7eb      	b.n	8008630 <_svfiprintf_r+0x1c0>
 8008658:	0800915c 	.word	0x0800915c
 800865c:	08009166 	.word	0x08009166
 8008660:	00000000 	.word	0x00000000
 8008664:	080083bd 	.word	0x080083bd
 8008668:	08009162 	.word	0x08009162

0800866c <_printf_common>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	4616      	mov	r6, r2
 8008672:	4699      	mov	r9, r3
 8008674:	688a      	ldr	r2, [r1, #8]
 8008676:	690b      	ldr	r3, [r1, #16]
 8008678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800867c:	4293      	cmp	r3, r2
 800867e:	bfb8      	it	lt
 8008680:	4613      	movlt	r3, r2
 8008682:	6033      	str	r3, [r6, #0]
 8008684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008688:	4607      	mov	r7, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b10a      	cbz	r2, 8008692 <_printf_common+0x26>
 800868e:	3301      	adds	r3, #1
 8008690:	6033      	str	r3, [r6, #0]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	0699      	lsls	r1, r3, #26
 8008696:	bf42      	ittt	mi
 8008698:	6833      	ldrmi	r3, [r6, #0]
 800869a:	3302      	addmi	r3, #2
 800869c:	6033      	strmi	r3, [r6, #0]
 800869e:	6825      	ldr	r5, [r4, #0]
 80086a0:	f015 0506 	ands.w	r5, r5, #6
 80086a4:	d106      	bne.n	80086b4 <_printf_common+0x48>
 80086a6:	f104 0a19 	add.w	sl, r4, #25
 80086aa:	68e3      	ldr	r3, [r4, #12]
 80086ac:	6832      	ldr	r2, [r6, #0]
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	dc26      	bgt.n	8008702 <_printf_common+0x96>
 80086b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b8:	1e13      	subs	r3, r2, #0
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	bf18      	it	ne
 80086be:	2301      	movne	r3, #1
 80086c0:	0692      	lsls	r2, r2, #26
 80086c2:	d42b      	bmi.n	800871c <_printf_common+0xb0>
 80086c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c8:	4649      	mov	r1, r9
 80086ca:	4638      	mov	r0, r7
 80086cc:	47c0      	blx	r8
 80086ce:	3001      	adds	r0, #1
 80086d0:	d01e      	beq.n	8008710 <_printf_common+0xa4>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	6922      	ldr	r2, [r4, #16]
 80086d6:	f003 0306 	and.w	r3, r3, #6
 80086da:	2b04      	cmp	r3, #4
 80086dc:	bf02      	ittt	eq
 80086de:	68e5      	ldreq	r5, [r4, #12]
 80086e0:	6833      	ldreq	r3, [r6, #0]
 80086e2:	1aed      	subeq	r5, r5, r3
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	bf0c      	ite	eq
 80086e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086ec:	2500      	movne	r5, #0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bfc4      	itt	gt
 80086f2:	1a9b      	subgt	r3, r3, r2
 80086f4:	18ed      	addgt	r5, r5, r3
 80086f6:	2600      	movs	r6, #0
 80086f8:	341a      	adds	r4, #26
 80086fa:	42b5      	cmp	r5, r6
 80086fc:	d11a      	bne.n	8008734 <_printf_common+0xc8>
 80086fe:	2000      	movs	r0, #0
 8008700:	e008      	b.n	8008714 <_printf_common+0xa8>
 8008702:	2301      	movs	r3, #1
 8008704:	4652      	mov	r2, sl
 8008706:	4649      	mov	r1, r9
 8008708:	4638      	mov	r0, r7
 800870a:	47c0      	blx	r8
 800870c:	3001      	adds	r0, #1
 800870e:	d103      	bne.n	8008718 <_printf_common+0xac>
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008718:	3501      	adds	r5, #1
 800871a:	e7c6      	b.n	80086aa <_printf_common+0x3e>
 800871c:	18e1      	adds	r1, r4, r3
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	2030      	movs	r0, #48	; 0x30
 8008722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008726:	4422      	add	r2, r4
 8008728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800872c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008730:	3302      	adds	r3, #2
 8008732:	e7c7      	b.n	80086c4 <_printf_common+0x58>
 8008734:	2301      	movs	r3, #1
 8008736:	4622      	mov	r2, r4
 8008738:	4649      	mov	r1, r9
 800873a:	4638      	mov	r0, r7
 800873c:	47c0      	blx	r8
 800873e:	3001      	adds	r0, #1
 8008740:	d0e6      	beq.n	8008710 <_printf_common+0xa4>
 8008742:	3601      	adds	r6, #1
 8008744:	e7d9      	b.n	80086fa <_printf_common+0x8e>
	...

08008748 <_printf_i>:
 8008748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	7e0f      	ldrb	r7, [r1, #24]
 800874e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008750:	2f78      	cmp	r7, #120	; 0x78
 8008752:	4691      	mov	r9, r2
 8008754:	4680      	mov	r8, r0
 8008756:	460c      	mov	r4, r1
 8008758:	469a      	mov	sl, r3
 800875a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800875e:	d807      	bhi.n	8008770 <_printf_i+0x28>
 8008760:	2f62      	cmp	r7, #98	; 0x62
 8008762:	d80a      	bhi.n	800877a <_printf_i+0x32>
 8008764:	2f00      	cmp	r7, #0
 8008766:	f000 80d4 	beq.w	8008912 <_printf_i+0x1ca>
 800876a:	2f58      	cmp	r7, #88	; 0x58
 800876c:	f000 80c0 	beq.w	80088f0 <_printf_i+0x1a8>
 8008770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008778:	e03a      	b.n	80087f0 <_printf_i+0xa8>
 800877a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800877e:	2b15      	cmp	r3, #21
 8008780:	d8f6      	bhi.n	8008770 <_printf_i+0x28>
 8008782:	a101      	add	r1, pc, #4	; (adr r1, 8008788 <_printf_i+0x40>)
 8008784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087f5 	.word	0x080087f5
 8008790:	08008771 	.word	0x08008771
 8008794:	08008771 	.word	0x08008771
 8008798:	08008771 	.word	0x08008771
 800879c:	08008771 	.word	0x08008771
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	08008771 	.word	0x08008771
 80087a8:	08008771 	.word	0x08008771
 80087ac:	08008771 	.word	0x08008771
 80087b0:	08008771 	.word	0x08008771
 80087b4:	080088f9 	.word	0x080088f9
 80087b8:	08008821 	.word	0x08008821
 80087bc:	080088b3 	.word	0x080088b3
 80087c0:	08008771 	.word	0x08008771
 80087c4:	08008771 	.word	0x08008771
 80087c8:	0800891b 	.word	0x0800891b
 80087cc:	08008771 	.word	0x08008771
 80087d0:	08008821 	.word	0x08008821
 80087d4:	08008771 	.word	0x08008771
 80087d8:	08008771 	.word	0x08008771
 80087dc:	080088bb 	.word	0x080088bb
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	1d1a      	adds	r2, r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	602a      	str	r2, [r5, #0]
 80087e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f0:	2301      	movs	r3, #1
 80087f2:	e09f      	b.n	8008934 <_printf_i+0x1ec>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	682b      	ldr	r3, [r5, #0]
 80087f8:	0607      	lsls	r7, r0, #24
 80087fa:	f103 0104 	add.w	r1, r3, #4
 80087fe:	6029      	str	r1, [r5, #0]
 8008800:	d501      	bpl.n	8008806 <_printf_i+0xbe>
 8008802:	681e      	ldr	r6, [r3, #0]
 8008804:	e003      	b.n	800880e <_printf_i+0xc6>
 8008806:	0646      	lsls	r6, r0, #25
 8008808:	d5fb      	bpl.n	8008802 <_printf_i+0xba>
 800880a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800880e:	2e00      	cmp	r6, #0
 8008810:	da03      	bge.n	800881a <_printf_i+0xd2>
 8008812:	232d      	movs	r3, #45	; 0x2d
 8008814:	4276      	negs	r6, r6
 8008816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881a:	485a      	ldr	r0, [pc, #360]	; (8008984 <_printf_i+0x23c>)
 800881c:	230a      	movs	r3, #10
 800881e:	e012      	b.n	8008846 <_printf_i+0xfe>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	6820      	ldr	r0, [r4, #0]
 8008824:	1d19      	adds	r1, r3, #4
 8008826:	6029      	str	r1, [r5, #0]
 8008828:	0605      	lsls	r5, r0, #24
 800882a:	d501      	bpl.n	8008830 <_printf_i+0xe8>
 800882c:	681e      	ldr	r6, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0xee>
 8008830:	0641      	lsls	r1, r0, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0xe4>
 8008834:	881e      	ldrh	r6, [r3, #0]
 8008836:	4853      	ldr	r0, [pc, #332]	; (8008984 <_printf_i+0x23c>)
 8008838:	2f6f      	cmp	r7, #111	; 0x6f
 800883a:	bf0c      	ite	eq
 800883c:	2308      	moveq	r3, #8
 800883e:	230a      	movne	r3, #10
 8008840:	2100      	movs	r1, #0
 8008842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008846:	6865      	ldr	r5, [r4, #4]
 8008848:	60a5      	str	r5, [r4, #8]
 800884a:	2d00      	cmp	r5, #0
 800884c:	bfa2      	ittt	ge
 800884e:	6821      	ldrge	r1, [r4, #0]
 8008850:	f021 0104 	bicge.w	r1, r1, #4
 8008854:	6021      	strge	r1, [r4, #0]
 8008856:	b90e      	cbnz	r6, 800885c <_printf_i+0x114>
 8008858:	2d00      	cmp	r5, #0
 800885a:	d04b      	beq.n	80088f4 <_printf_i+0x1ac>
 800885c:	4615      	mov	r5, r2
 800885e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008862:	fb03 6711 	mls	r7, r3, r1, r6
 8008866:	5dc7      	ldrb	r7, [r0, r7]
 8008868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800886c:	4637      	mov	r7, r6
 800886e:	42bb      	cmp	r3, r7
 8008870:	460e      	mov	r6, r1
 8008872:	d9f4      	bls.n	800885e <_printf_i+0x116>
 8008874:	2b08      	cmp	r3, #8
 8008876:	d10b      	bne.n	8008890 <_printf_i+0x148>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	07de      	lsls	r6, r3, #31
 800887c:	d508      	bpl.n	8008890 <_printf_i+0x148>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	6861      	ldr	r1, [r4, #4]
 8008882:	4299      	cmp	r1, r3
 8008884:	bfde      	ittt	le
 8008886:	2330      	movle	r3, #48	; 0x30
 8008888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800888c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008890:	1b52      	subs	r2, r2, r5
 8008892:	6122      	str	r2, [r4, #16]
 8008894:	f8cd a000 	str.w	sl, [sp]
 8008898:	464b      	mov	r3, r9
 800889a:	aa03      	add	r2, sp, #12
 800889c:	4621      	mov	r1, r4
 800889e:	4640      	mov	r0, r8
 80088a0:	f7ff fee4 	bl	800866c <_printf_common>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d14a      	bne.n	800893e <_printf_i+0x1f6>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b004      	add	sp, #16
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	f043 0320 	orr.w	r3, r3, #32
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	4833      	ldr	r0, [pc, #204]	; (8008988 <_printf_i+0x240>)
 80088bc:	2778      	movs	r7, #120	; 0x78
 80088be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	6829      	ldr	r1, [r5, #0]
 80088c6:	061f      	lsls	r7, r3, #24
 80088c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80088cc:	d402      	bmi.n	80088d4 <_printf_i+0x18c>
 80088ce:	065f      	lsls	r7, r3, #25
 80088d0:	bf48      	it	mi
 80088d2:	b2b6      	uxthmi	r6, r6
 80088d4:	07df      	lsls	r7, r3, #31
 80088d6:	bf48      	it	mi
 80088d8:	f043 0320 	orrmi.w	r3, r3, #32
 80088dc:	6029      	str	r1, [r5, #0]
 80088de:	bf48      	it	mi
 80088e0:	6023      	strmi	r3, [r4, #0]
 80088e2:	b91e      	cbnz	r6, 80088ec <_printf_i+0x1a4>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	f023 0320 	bic.w	r3, r3, #32
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	2310      	movs	r3, #16
 80088ee:	e7a7      	b.n	8008840 <_printf_i+0xf8>
 80088f0:	4824      	ldr	r0, [pc, #144]	; (8008984 <_printf_i+0x23c>)
 80088f2:	e7e4      	b.n	80088be <_printf_i+0x176>
 80088f4:	4615      	mov	r5, r2
 80088f6:	e7bd      	b.n	8008874 <_printf_i+0x12c>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	6826      	ldr	r6, [r4, #0]
 80088fc:	6961      	ldr	r1, [r4, #20]
 80088fe:	1d18      	adds	r0, r3, #4
 8008900:	6028      	str	r0, [r5, #0]
 8008902:	0635      	lsls	r5, r6, #24
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	d501      	bpl.n	800890c <_printf_i+0x1c4>
 8008908:	6019      	str	r1, [r3, #0]
 800890a:	e002      	b.n	8008912 <_printf_i+0x1ca>
 800890c:	0670      	lsls	r0, r6, #25
 800890e:	d5fb      	bpl.n	8008908 <_printf_i+0x1c0>
 8008910:	8019      	strh	r1, [r3, #0]
 8008912:	2300      	movs	r3, #0
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	4615      	mov	r5, r2
 8008918:	e7bc      	b.n	8008894 <_printf_i+0x14c>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	602a      	str	r2, [r5, #0]
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	6862      	ldr	r2, [r4, #4]
 8008924:	2100      	movs	r1, #0
 8008926:	4628      	mov	r0, r5
 8008928:	f7f7 fc6a 	bl	8000200 <memchr>
 800892c:	b108      	cbz	r0, 8008932 <_printf_i+0x1ea>
 800892e:	1b40      	subs	r0, r0, r5
 8008930:	6060      	str	r0, [r4, #4]
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	2300      	movs	r3, #0
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893c:	e7aa      	b.n	8008894 <_printf_i+0x14c>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	462a      	mov	r2, r5
 8008942:	4649      	mov	r1, r9
 8008944:	4640      	mov	r0, r8
 8008946:	47d0      	blx	sl
 8008948:	3001      	adds	r0, #1
 800894a:	d0ad      	beq.n	80088a8 <_printf_i+0x160>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	079b      	lsls	r3, r3, #30
 8008950:	d413      	bmi.n	800897a <_printf_i+0x232>
 8008952:	68e0      	ldr	r0, [r4, #12]
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	4298      	cmp	r0, r3
 8008958:	bfb8      	it	lt
 800895a:	4618      	movlt	r0, r3
 800895c:	e7a6      	b.n	80088ac <_printf_i+0x164>
 800895e:	2301      	movs	r3, #1
 8008960:	4632      	mov	r2, r6
 8008962:	4649      	mov	r1, r9
 8008964:	4640      	mov	r0, r8
 8008966:	47d0      	blx	sl
 8008968:	3001      	adds	r0, #1
 800896a:	d09d      	beq.n	80088a8 <_printf_i+0x160>
 800896c:	3501      	adds	r5, #1
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	9903      	ldr	r1, [sp, #12]
 8008972:	1a5b      	subs	r3, r3, r1
 8008974:	42ab      	cmp	r3, r5
 8008976:	dcf2      	bgt.n	800895e <_printf_i+0x216>
 8008978:	e7eb      	b.n	8008952 <_printf_i+0x20a>
 800897a:	2500      	movs	r5, #0
 800897c:	f104 0619 	add.w	r6, r4, #25
 8008980:	e7f5      	b.n	800896e <_printf_i+0x226>
 8008982:	bf00      	nop
 8008984:	0800916d 	.word	0x0800916d
 8008988:	0800917e 	.word	0x0800917e

0800898c <memmove>:
 800898c:	4288      	cmp	r0, r1
 800898e:	b510      	push	{r4, lr}
 8008990:	eb01 0402 	add.w	r4, r1, r2
 8008994:	d902      	bls.n	800899c <memmove+0x10>
 8008996:	4284      	cmp	r4, r0
 8008998:	4623      	mov	r3, r4
 800899a:	d807      	bhi.n	80089ac <memmove+0x20>
 800899c:	1e43      	subs	r3, r0, #1
 800899e:	42a1      	cmp	r1, r4
 80089a0:	d008      	beq.n	80089b4 <memmove+0x28>
 80089a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089aa:	e7f8      	b.n	800899e <memmove+0x12>
 80089ac:	4402      	add	r2, r0
 80089ae:	4601      	mov	r1, r0
 80089b0:	428a      	cmp	r2, r1
 80089b2:	d100      	bne.n	80089b6 <memmove+0x2a>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089be:	e7f7      	b.n	80089b0 <memmove+0x24>

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_sbrk_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f9 f960 	bl	8001c90 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20000998 	.word	0x20000998

080089e0 <memcpy>:
 80089e0:	440a      	add	r2, r1
 80089e2:	4291      	cmp	r1, r2
 80089e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089e8:	d100      	bne.n	80089ec <memcpy+0xc>
 80089ea:	4770      	bx	lr
 80089ec:	b510      	push	{r4, lr}
 80089ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089f6:	4291      	cmp	r1, r2
 80089f8:	d1f9      	bne.n	80089ee <memcpy+0xe>
 80089fa:	bd10      	pop	{r4, pc}

080089fc <_realloc_r>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	4680      	mov	r8, r0
 8008a02:	4614      	mov	r4, r2
 8008a04:	460e      	mov	r6, r1
 8008a06:	b921      	cbnz	r1, 8008a12 <_realloc_r+0x16>
 8008a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	f7ff bc49 	b.w	80082a4 <_malloc_r>
 8008a12:	b92a      	cbnz	r2, 8008a20 <_realloc_r+0x24>
 8008a14:	f7ff fbda 	bl	80081cc <_free_r>
 8008a18:	4625      	mov	r5, r4
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a20:	f000 f81b 	bl	8008a5a <_malloc_usable_size_r>
 8008a24:	4284      	cmp	r4, r0
 8008a26:	4607      	mov	r7, r0
 8008a28:	d802      	bhi.n	8008a30 <_realloc_r+0x34>
 8008a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a2e:	d812      	bhi.n	8008a56 <_realloc_r+0x5a>
 8008a30:	4621      	mov	r1, r4
 8008a32:	4640      	mov	r0, r8
 8008a34:	f7ff fc36 	bl	80082a4 <_malloc_r>
 8008a38:	4605      	mov	r5, r0
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d0ed      	beq.n	8008a1a <_realloc_r+0x1e>
 8008a3e:	42bc      	cmp	r4, r7
 8008a40:	4622      	mov	r2, r4
 8008a42:	4631      	mov	r1, r6
 8008a44:	bf28      	it	cs
 8008a46:	463a      	movcs	r2, r7
 8008a48:	f7ff ffca 	bl	80089e0 <memcpy>
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fbbc 	bl	80081cc <_free_r>
 8008a54:	e7e1      	b.n	8008a1a <_realloc_r+0x1e>
 8008a56:	4635      	mov	r5, r6
 8008a58:	e7df      	b.n	8008a1a <_realloc_r+0x1e>

08008a5a <_malloc_usable_size_r>:
 8008a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5e:	1f18      	subs	r0, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bfbc      	itt	lt
 8008a64:	580b      	ldrlt	r3, [r1, r0]
 8008a66:	18c0      	addlt	r0, r0, r3
 8008a68:	4770      	bx	lr
	...

08008a6c <_init>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr

08008a78 <_fini>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr
